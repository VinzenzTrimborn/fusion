// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: adU29zJd9uLGW9TewABBsV
// Component: 6mLOgS1IZY8Z
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import Button from "../../Button"; // plasmic-import: apXgE63BR30L/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import Checkbox from "../../Checkbox"; // plasmic-import: QYHJ3nGLufw1/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_fusion_lab.module.css"; // plasmic-import: adU29zJd9uLGW9TewABBsV/projectcss
import sty from "./PlasmicRegisterForm.module.css"; // plasmic-import: 6mLOgS1IZY8Z/css

createPlasmicElementProxy;

export const PlasmicRegisterForm__VariantProps = new Array("login2");

export const PlasmicRegisterForm__ArgProps = new Array();

const $$ = {};

function PlasmicRegisterForm__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "checkBoxInfoAgreement.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "form",
        onMutate: p.generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "form",
        onMutate: p.generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "statemodalopen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "login2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.login2
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"registered"}
      data-plasmic-override={overrides.registered}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.registered,
        { [sty.registeredlogin2]: hasVariant($state, "login2", "login2") }
      )}
    >
      <div
        data-plasmic-name={"formArea"}
        data-plasmic-override={overrides.formArea}
        className={classNames(projectcss.all, sty.formArea, {
          [sty.formArealogin2]: hasVariant($state, "login2", "login2")
        })}
      >
        <AntdModal
          data-plasmic-name={"modal"}
          data-plasmic-override={overrides.modal}
          className={classNames("__wab_instance", sty.modal)}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens
          )}
          footer={
            <div className={classNames(projectcss.all, sty.freeBox__hNgoi)}>
              <Button
                className={classNames("__wab_instance", sty.button___3GgoV)}
                onClick={async event => {
                  const $steps = {};
                  $steps["goToHome"] = true
                    ? (() => {
                        const actionArgs = { destination: `/` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            location.assign(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToHome"] != null &&
                    typeof $steps["goToHome"] === "object" &&
                    typeof $steps["goToHome"].then === "function"
                  ) {
                    $steps["goToHome"] = await $steps["goToHome"];
                  }
                }}
              >
                {"No, back to home"}
              </Button>
              <Button
                className={classNames("__wab_instance", sty.button__ur79P)}
                onClick={async event => {
                  const $steps = {};
                  $steps["goToQuestionnaire"] = true
                    ? (() => {
                        const actionArgs = { destination: `/questionnaire` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            location.assign(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToQuestionnaire"] != null &&
                    typeof $steps["goToQuestionnaire"] === "object" &&
                    typeof $steps["goToQuestionnaire"].then === "function"
                  ) {
                    $steps["goToQuestionnaire"] = await $steps[
                      "goToQuestionnaire"
                    ];
                  }
                }}
              >
                {"Yes, confirm"}
              </Button>
            </div>
          }
          modalScopeClassName={sty["modal__modal"]}
          onOpenChange={p.generateStateOnChangeProp($state, ["modal", "open"])}
          open={p.generateStateValueProp($state, ["modal", "open"])}
          title={"Would you like to help us by answering some questions?"}
          trigger={null}
          width={"560"}
        >
          <div className={classNames(projectcss.all, sty.freeBox__thQr8)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nFmTr
              )}
            >
              {
                "Those questions would help us understand your feedback better and enable us to address them in our design"
              }
            </div>
          </div>
        </AntdModal>
        <div className={classNames(projectcss.all, sty.freeBox__bCjFq)}>
          <div className={classNames(projectcss.all, sty.freeBox__olxKd)}>
            <div className={classNames(projectcss.all, sty.freeBox__mVdxo)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__x5IkU,
                  {
                    [sty.textlogin2__x5IkUsWr9K]: hasVariant(
                      $state,
                      "login2",
                      "login2"
                    )
                  }
                )}
              >
                {hasVariant($state, "login2", "login2")
                  ? "Welcome Back!"
                  : "Welcome !"}
              </div>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__g2Hx)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nj4Uf,
                    {
                      [sty.textlogin2__nj4UFsWr9K]: hasVariant(
                        $state,
                        "login2",
                        "login2"
                      )
                    }
                  )}
                >
                  {hasVariant($state, "login2", "login2")
                    ? "LogIn to TUM ITBE "
                    : "Sign up to TUM ITBE "}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__p5HrH
                  )}
                >
                  {"to participate and give feedback"}
                </div>
              </p.Stack>
              <p.Stack
                as={"div"}
                data-plasmic-name={"email"}
                data-plasmic-override={overrides.email}
                hasGap={true}
                className={classNames(projectcss.all, sty.email)}
              >
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.form, {
                      [sty.formlogin2]: hasVariant($state, "login2", "login2")
                    }),
                    extendedOnValuesChange:
                      p.generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["form", "value"],
                        FormWrapper_Helpers
                      ),
                    formItems: undefined,
                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: undefined,
                    onIsSubmittingChange:
                      p.generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["form", "isSubmitting"],
                        FormWrapper_Helpers
                      ),
                    ref: ref => {
                      $refs["form"] = ref;
                    },
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  p.initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "form.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "form.isSubmitting"
                      }
                    ],

                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );
                  return (
                    <FormWrapper
                      data-plasmic-name={"form"}
                      data-plasmic-override={overrides.form}
                      {...child$Props}
                    >
                      <FormItemWrapper
                        className={classNames("__wab_instance", sty.formField)}
                        label={"E-mail"}
                        name={"email"}
                      >
                        <AntdInput
                          className={classNames("__wab_instance", sty.input)}
                        />
                      </FormItemWrapper>
                      <Button
                        className={classNames("__wab_instance", sty.register, {
                          [sty.registerlogin2]: hasVariant(
                            $state,
                            "login2",
                            "login2"
                          )
                        })}
                        onClick={async event => {
                          const $steps = {};
                          $steps["updateModalOpen"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["modal", "open"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;
                                  p.set(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateModalOpen"] != null &&
                            typeof $steps["updateModalOpen"] === "object" &&
                            typeof $steps["updateModalOpen"].then === "function"
                          ) {
                            $steps["updateModalOpen"] = await $steps[
                              "updateModalOpen"
                            ];
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vvlS,
                            {
                              [sty.textlogin2__vvlSsWr9K]: hasVariant(
                                $state,
                                "login2",
                                "login2"
                              )
                            }
                          )}
                        >
                          {hasVariant($state, "login2", "login2") ? (
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"Login"}
                              </span>
                            </React.Fragment>
                          ) : (
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"Register"}
                              </span>
                            </React.Fragment>
                          )}
                        </div>
                      </Button>
                    </FormWrapper>
                  );
                })()}
              </p.Stack>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__yD33)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xJsf7,
                  {
                    [sty.textlogin2__xJsf7SWr9K]: hasVariant(
                      $state,
                      "login2",
                      "login2"
                    )
                  }
                )}
              >
                {hasVariant($state, "login2", "login2")
                  ? "You do not have an account?"
                  : "Already have an Account ?"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gcj2A,
                  {
                    [sty.textlogin2__gcj2AsWr9K]: hasVariant(
                      $state,
                      "login2",
                      "login2"
                    )
                  }
                )}
                onClick={async event => {
                  const $steps = {};
                  $steps["updateLogin2"] = true
                    ? (() => {
                        const actionArgs = { vgroup: "login2", operation: 4 };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }
                          p.set($state, vgroup, true);
                          return true;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateLogin2"] != null &&
                    typeof $steps["updateLogin2"] === "object" &&
                    typeof $steps["updateLogin2"].then === "function"
                  ) {
                    $steps["updateLogin2"] = await $steps["updateLogin2"];
                  }
                }}
              >
                {hasVariant($state, "login2", "login2") ? "Register" : "Login"}
              </div>
              {(hasVariant($state, "login2", "login2") ? true : false) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__faOum,
                    {
                      [sty.textlogin2__faOumsWr9K]: hasVariant(
                        $state,
                        "login2",
                        "login2"
                      )
                    }
                  )}
                  onClick={async event => {
                    const $steps = {};
                    $steps["updateLogin2"] = true
                      ? (() => {
                          const actionArgs = { vgroup: "login2", operation: 6 };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }
                            p.set($state, vgroup, false);
                            return false;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLogin2"] != null &&
                      typeof $steps["updateLogin2"] === "object" &&
                      typeof $steps["updateLogin2"].then === "function"
                    ) {
                      $steps["updateLogin2"] = await $steps["updateLogin2"];
                    }
                  }}
                >
                  {hasVariant($state, "login2", "login2")
                    ? "Register"
                    : "Login"}
                </div>
              ) : null}
            </div>
          </div>
          <p.Stack
            as={"div"}
            data-plasmic-name={"checkBox"}
            data-plasmic-override={overrides.checkBox}
            hasGap={true}
            className={classNames(projectcss.all, sty.checkBox)}
          >
            <Checkbox
              data-plasmic-name={"checkBoxInfoAgreement"}
              data-plasmic-override={overrides.checkBoxInfoAgreement}
              className={classNames(
                "__wab_instance",
                sty.checkBoxInfoAgreement
              )}
              isChecked={
                p.generateStateValueProp($state, [
                  "checkBoxInfoAgreement",
                  "isChecked"
                ]) ?? false
              }
              onChange={(...eventArgs) => {
                p.generateStateOnChangeProp($state, [
                  "checkBoxInfoAgreement",
                  "isChecked"
                ])(eventArgs[0]);
              }}
            >
              {""}
            </Checkbox>
            <div
              data-plasmic-name={"agreeText"}
              data-plasmic-override={overrides.agreeText}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.agreeText
              )}
            >
              {"I agree that my information can be used for study purposes"}
            </div>
          </p.Stack>
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  registered: [
    "registered",
    "formArea",
    "modal",
    "email",
    "form",
    "formField",
    "input",
    "register",
    "checkBox",
    "checkBoxInfoAgreement",
    "agreeText"
  ],

  formArea: [
    "formArea",
    "modal",
    "email",
    "form",
    "formField",
    "input",
    "register",
    "checkBox",
    "checkBoxInfoAgreement",
    "agreeText"
  ],

  modal: ["modal"],
  email: ["email", "form", "formField", "input", "register"],
  form: ["form", "formField", "input", "register"],
  formField: ["formField", "input"],
  input: ["input"],
  register: ["register"],
  checkBox: ["checkBox", "checkBoxInfoAgreement", "agreeText"],
  checkBoxInfoAgreement: ["checkBoxInfoAgreement"],
  agreeText: ["agreeText"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRegisterForm__ArgProps,
          internalVariantPropNames: PlasmicRegisterForm__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRegisterForm__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "registered") {
    func.displayName = "PlasmicRegisterForm";
  } else {
    func.displayName = `PlasmicRegisterForm.${nodeName}`;
  }
  return func;
}

export const PlasmicRegisterForm = Object.assign(
  // Top-level PlasmicRegisterForm renders the root element
  makeNodeComponent("registered"),
  {
    // Helper components rendering sub-elements
    formArea: makeNodeComponent("formArea"),
    modal: makeNodeComponent("modal"),
    email: makeNodeComponent("email"),
    form: makeNodeComponent("form"),
    formField: makeNodeComponent("formField"),
    input: makeNodeComponent("input"),
    register: makeNodeComponent("register"),
    checkBox: makeNodeComponent("checkBox"),
    checkBoxInfoAgreement: makeNodeComponent("checkBoxInfoAgreement"),
    agreeText: makeNodeComponent("agreeText"),
    // Metadata about props expected for PlasmicRegisterForm
    internalVariantProps: PlasmicRegisterForm__VariantProps,
    internalArgProps: PlasmicRegisterForm__ArgProps
  }
);

export default PlasmicRegisterForm;
/* prettier-ignore-end */
