// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: adU29zJd9uLGW9TewABBsV
// Component: v_wMKsIXVD_E
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import PopUpGallery from "../../PopUpGallery"; // plasmic-import: lKMH_lDVGHXv/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_fusion_lab.module.css"; // plasmic-import: adU29zJd9uLGW9TewABBsV/projectcss
import sty from "./PlasmicDisplay.module.css"; // plasmic-import: v_wMKsIXVD_E/css

createPlasmicElementProxy;

export const PlasmicDisplay__VariantProps = new Array(
  "variants2",
  "popUp2",
  "unnamedGroupOfVariants3"
);

export const PlasmicDisplay__ArgProps = new Array();

const $$ = {};

function PlasmicDisplay__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "variants2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.variants2
      },
      {
        path: "popUp2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.popUp2
      },
      {
        path: "unnamedGroupOfVariants3",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.unnamedGroupOfVariants3
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootpopUp2]: hasVariant($state, "popUp2", "popUp2"),
          [sty.rootunnamedGroupOfVariants3_activityPopUp1]: hasVariant(
            $state,
            "unnamedGroupOfVariants3",
            "activityPopUp1"
          ),
          [sty.rootunnamedGroupOfVariants3_activityPopUp2]: hasVariant(
            $state,
            "unnamedGroupOfVariants3",
            "activityPopUp2"
          ),
          [sty.rootunnamedGroupOfVariants3_activityPopUp3]: hasVariant(
            $state,
            "unnamedGroupOfVariants3",
            "activityPopUp3"
          ),
          [sty.rootunnamedGroupOfVariants3_activityPopUp4]: hasVariant(
            $state,
            "unnamedGroupOfVariants3",
            "activityPopUp4"
          ),
          [sty.rootunnamedGroupOfVariants3_activityPopUp5]: hasVariant(
            $state,
            "unnamedGroupOfVariants3",
            "activityPopUp5"
          ),
          [sty.rootvariants2_activities]: hasVariant(
            $state,
            "variants2",
            "activities"
          ),
          [sty.rootvariants2_analysis]: hasVariant(
            $state,
            "variants2",
            "analysis"
          ),
          [sty.rootvariants2_renderings]: hasVariant(
            $state,
            "variants2",
            "renderings"
          ),
          [sty.rootvariants2_sketches]: hasVariant(
            $state,
            "variants2",
            "sketches"
          )
        }
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"gallery01"}
        data-plasmic-override={overrides.gallery01}
        hasGap={true}
        className={classNames(projectcss.all, sty.gallery01, {
          [sty.gallery01popUp2]: hasVariant($state, "popUp2", "popUp2"),
          [sty.gallery01unnamedGroupOfVariants3_activityPopUp1]: hasVariant(
            $state,
            "unnamedGroupOfVariants3",
            "activityPopUp1"
          ),
          [sty.gallery01unnamedGroupOfVariants3_activityPopUp2]: hasVariant(
            $state,
            "unnamedGroupOfVariants3",
            "activityPopUp2"
          ),
          [sty.gallery01unnamedGroupOfVariants3_activityPopUp4]: hasVariant(
            $state,
            "unnamedGroupOfVariants3",
            "activityPopUp4"
          ),
          [sty.gallery01unnamedGroupOfVariants3_activityPopUp5]: hasVariant(
            $state,
            "unnamedGroupOfVariants3",
            "activityPopUp5"
          ),
          [sty.gallery01variants2_analysis]: hasVariant(
            $state,
            "variants2",
            "analysis"
          ),
          [sty.gallery01variants2_renderings]: hasVariant(
            $state,
            "variants2",
            "renderings"
          )
        })}
      >
        <div
          data-plasmic-name={"description"}
          data-plasmic-override={overrides.description}
          className={classNames(projectcss.all, sty.description, {
            [sty.descriptionvariants2_renderings]: hasVariant(
              $state,
              "variants2",
              "renderings"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__goGpD
            )}
          >
            {"Information about the Bridge and it\u2019s Design"}
          </div>
          <div
            data-plasmic-name={
              "inConceivingTheDesignForTheDonnersbergerBridgeOurInspirationWasDrawnFromMunichsArchitecturalEssenceOurAimWasSimpleCreateABridgeThatHarmonizesWithTheCitysIdentityAndSurroundingsPositionedAsASymbolicGatewayItPaysHomageToMunichsHistoricGatesOfferingGuestsAWarmWelcomeAndPanoramicViewsOfTheCityAndSunsetOverTheRailwayTracksBeyondAestheticsOurDesignAddressesPracticalChallengesOfABustlingTrafficHubIncorporatingNoiseCancellationToMirrorTheDynamicFlowOfTheTrafficTheBridgesInnovationExtendsToItsStructureWhereArchesSupportingTheMainSectionDoubleAsFunctionalElementsAPlatformConnectingTheArchesProvidesAUniqueViewpointAndActivatesAreasBeneathTheBridgeTransformingParkingLotsIntoEngagingSpacesAsWePresentThisVisionWeInviteCitizensToExploreAndShareInsightsYourPerspectivesAreVitalInShapingTheDonnersbergerBridgeEnsuringItStandsNotOnlyAsAStructuralMarvelButAlsoAsACommunityCentricLandmarkJoinUsInEnvisioningABridgeThatReflectsMunichsSpiritAndEnhancesUrbanLiving"
            }
            data-plasmic-override={
              overrides.inConceivingTheDesignForTheDonnersbergerBridgeOurInspirationWasDrawnFromMunichsArchitecturalEssenceOurAimWasSimpleCreateABridgeThatHarmonizesWithTheCitysIdentityAndSurroundingsPositionedAsASymbolicGatewayItPaysHomageToMunichsHistoricGatesOfferingGuestsAWarmWelcomeAndPanoramicViewsOfTheCityAndSunsetOverTheRailwayTracksBeyondAestheticsOurDesignAddressesPracticalChallengesOfABustlingTrafficHubIncorporatingNoiseCancellationToMirrorTheDynamicFlowOfTheTrafficTheBridgesInnovationExtendsToItsStructureWhereArchesSupportingTheMainSectionDoubleAsFunctionalElementsAPlatformConnectingTheArchesProvidesAUniqueViewpointAndActivatesAreasBeneathTheBridgeTransformingParkingLotsIntoEngagingSpacesAsWePresentThisVisionWeInviteCitizensToExploreAndShareInsightsYourPerspectivesAreVitalInShapingTheDonnersbergerBridgeEnsuringItStandsNotOnlyAsAStructuralMarvelButAlsoAsACommunityCentricLandmarkJoinUsInEnvisioningABridgeThatReflectsMunichsSpiritAndEnhancesUrbanLiving
            }
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.inConceivingTheDesignForTheDonnersbergerBridgeOurInspirationWasDrawnFromMunichsArchitecturalEssenceOurAimWasSimpleCreateABridgeThatHarmonizesWithTheCitysIdentityAndSurroundingsPositionedAsASymbolicGatewayItPaysHomageToMunichsHistoricGatesOfferingGuestsAWarmWelcomeAndPanoramicViewsOfTheCityAndSunsetOverTheRailwayTracksBeyondAestheticsOurDesignAddressesPracticalChallengesOfABustlingTrafficHubIncorporatingNoiseCancellationToMirrorTheDynamicFlowOfTheTrafficTheBridgesInnovationExtendsToItsStructureWhereArchesSupportingTheMainSectionDoubleAsFunctionalElementsAPlatformConnectingTheArchesProvidesAUniqueViewpointAndActivatesAreasBeneathTheBridgeTransformingParkingLotsIntoEngagingSpacesAsWePresentThisVisionWeInviteCitizensToExploreAndShareInsightsYourPerspectivesAreVitalInShapingTheDonnersbergerBridgeEnsuringItStandsNotOnlyAsAStructuralMarvelButAlsoAsACommunityCentricLandmarkJoinUsInEnvisioningABridgeThatReflectsMunichsSpiritAndEnhancesUrbanLiving
            )}
          >
            {
              "\nIn conceiving the design for the Donnersberger Bridge, our inspiration was drawn from Munich's architectural essence. Our aim was simple: create a bridge that harmonizes with the city's identity and surroundings. Positioned as a symbolic gateway, it pays homage to Munich's historic gates, offering guests a warm welcome and panoramic views of the city and sunset over the railway tracks.\n\nBeyond aesthetics, our design addresses practical challenges of a bustling traffic hub, incorporating noise cancellation to mirror the dynamic flow of the traffic. The bridge's innovation extends to its structure, where arches supporting the main section double as functional elements. A platform connecting the arches provides a unique viewpoint and activates areas beneath the bridge, transforming parking lots into engaging spaces.\nAs we present this vision, we invite citizens to explore and share insights. Your perspectives are vital in shaping the Donnersberger Bridge, ensuring it stands not only as a structural marvel but also as a community-centric landmark. Join us in envisioning a bridge that reflects Munich's spirit and enhances urban living.\n\n"
            }
          </div>
        </div>
        <div
          data-plasmic-name={"navBar"}
          data-plasmic-override={overrides.navBar}
          className={classNames(projectcss.all, sty.navBar)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame108"}
            data-plasmic-override={overrides.frame108}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame108)}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox___8XjHn)}
              onClick={async event => {
                const $steps = {};
                $steps["updateVariants2"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "variants2",
                        operation: 0,
                        value: "activities"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }
                        p.set($state, vgroup, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateVariants2"] != null &&
                  typeof $steps["updateVariants2"] === "object" &&
                  typeof $steps["updateVariants2"].then === "function"
                ) {
                  $steps["updateVariants2"] = await $steps["updateVariants2"];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tifKi,
                  {
                    [sty.textvariants2_activities__tifKIoy1JL]: hasVariant(
                      $state,
                      "variants2",
                      "activities"
                    ),
                    [sty.textvariants2_analysis__tifKiw6Kp]: hasVariant(
                      $state,
                      "variants2",
                      "analysis"
                    ),
                    [sty.textvariants2_renderings__tifKIhKtTu]: hasVariant(
                      $state,
                      "variants2",
                      "renderings"
                    ),
                    [sty.textvariants2_sketches__tifKIl9NWu]: hasVariant(
                      $state,
                      "variants2",
                      "sketches"
                    )
                  }
                )}
                onClick={async event => {
                  const $steps = {};
                  $steps["updateVariants2"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: "variants2",
                          operation: 0,
                          value: "activities"
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }
                          p.set($state, vgroup, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateVariants2"] != null &&
                    typeof $steps["updateVariants2"] === "object" &&
                    typeof $steps["updateVariants2"].then === "function"
                  ) {
                    $steps["updateVariants2"] = await $steps["updateVariants2"];
                  }
                }}
              >
                {"Activities"}
              </div>
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__gJf00, {
                [sty.freeBoxvariants2_renderings__gJf00HKtTu]: hasVariant(
                  $state,
                  "variants2",
                  "renderings"
                )
              })}
              onClick={async event => {
                const $steps = {};
                $steps["updateVariants2"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "variants2",
                        operation: 0,
                        value: "renderings"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }
                        p.set($state, vgroup, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateVariants2"] != null &&
                  typeof $steps["updateVariants2"] === "object" &&
                  typeof $steps["updateVariants2"].then === "function"
                ) {
                  $steps["updateVariants2"] = await $steps["updateVariants2"];
                }
              }}
            >
              <div
                data-plasmic-name={"_3DRenderings"}
                data-plasmic-override={overrides._3DRenderings}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty._3DRenderings,
                  {
                    [sty._3DRenderingsvariants2_renderings]: hasVariant(
                      $state,
                      "variants2",
                      "renderings"
                    )
                  }
                )}
                onClick={async event => {
                  const $steps = {};
                  $steps["updateVariants2"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: "variants2",
                          operation: 0,
                          value: "renderings"
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }
                          p.set($state, vgroup, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateVariants2"] != null &&
                    typeof $steps["updateVariants2"] === "object" &&
                    typeof $steps["updateVariants2"].then === "function"
                  ) {
                    $steps["updateVariants2"] = await $steps["updateVariants2"];
                  }
                }}
              >
                {"Renderings "}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__p3Z4V)}>
              <div
                data-plasmic-name={"analysis"}
                data-plasmic-override={overrides.analysis}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.analysis,
                  {
                    [sty.analysisvariants2_analysis]: hasVariant(
                      $state,
                      "variants2",
                      "analysis"
                    ),
                    [sty.analysisvariants2_renderings]: hasVariant(
                      $state,
                      "variants2",
                      "renderings"
                    ),
                    [sty.analysisvariants2_sketches]: hasVariant(
                      $state,
                      "variants2",
                      "sketches"
                    )
                  }
                )}
                onClick={async event => {
                  const $steps = {};
                  $steps["updateVariants2"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: "variants2",
                          operation: 0,
                          value: "analysis"
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }
                          p.set($state, vgroup, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateVariants2"] != null &&
                    typeof $steps["updateVariants2"] === "object" &&
                    typeof $steps["updateVariants2"].then === "function"
                  ) {
                    $steps["updateVariants2"] = await $steps["updateVariants2"];
                  }
                }}
              >
                {"Analysis "}
              </div>
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__uM7K5, {
                [sty.freeBoxvariants2_sketches__uM7K5L9NWu]: hasVariant(
                  $state,
                  "variants2",
                  "sketches"
                )
              })}
            >
              <div
                data-plasmic-name={"sketches"}
                data-plasmic-override={overrides.sketches}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.sketches,
                  {
                    [sty.sketchesvariants2_sketches]: hasVariant(
                      $state,
                      "variants2",
                      "sketches"
                    )
                  }
                )}
                onClick={async event => {
                  const $steps = {};
                  $steps["updateVariants2"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: "variants2",
                          operation: 0,
                          value: "sketches"
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }
                          p.set($state, vgroup, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateVariants2"] != null &&
                    typeof $steps["updateVariants2"] === "object" &&
                    typeof $steps["updateVariants2"].then === "function"
                  ) {
                    $steps["updateVariants2"] = await $steps["updateVariants2"];
                  }
                }}
              >
                {"Sketches "}
              </div>
            </div>
          </p.Stack>
        </div>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__t4Vcl, {
            [sty.freeBoxvariants2_activities__t4Vcloy1JL]: hasVariant(
              $state,
              "variants2",
              "activities"
            )
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__hh4Lb, {
              [sty.freeBoxvariants2_activities__hh4LBoy1JL]: hasVariant(
                $state,
                "variants2",
                "activities"
              )
            })}
            onClick={async event => {
              const $steps = {};
              $steps["updateUnnamedGroupOfVariants3"] = true
                ? (() => {
                    const actionArgs = {
                      vgroup: "unnamedGroupOfVariants3",
                      operation: 0,
                      value: "activityPopUp3"
                    };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }
                      p.set($state, vgroup, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateUnnamedGroupOfVariants3"] != null &&
                typeof $steps["updateUnnamedGroupOfVariants3"] === "object" &&
                typeof $steps["updateUnnamedGroupOfVariants3"].then ===
                  "function"
              ) {
                $steps["updateUnnamedGroupOfVariants3"] = await $steps[
                  "updateUnnamedGroupOfVariants3"
                ];
              }
            }}
          >
            <div
              data-plasmic-name={"rectangle3178"}
              data-plasmic-override={overrides.rectangle3178}
              className={classNames(projectcss.all, sty.rectangle3178, {
                [sty.rectangle3178variants2_activities]: hasVariant(
                  $state,
                  "variants2",
                  "activities"
                ),
                [sty.rectangle3178variants2_renderings]: hasVariant(
                  $state,
                  "variants2",
                  "renderings"
                )
              })}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__n9Xw0
              )}
            >
              {"Over the bridge platform"}
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__uttHp, {
              [sty.freeBoxvariants2_activities__uttHpoy1JL]: hasVariant(
                $state,
                "variants2",
                "activities"
              )
            })}
            onClick={async event => {
              const $steps = {};
              $steps["updateUnnamedGroupOfVariants3"] = true
                ? (() => {
                    const actionArgs = {
                      vgroup: "unnamedGroupOfVariants3",
                      operation: 0,
                      value: "activityPopUp2"
                    };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }
                      p.set($state, vgroup, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateUnnamedGroupOfVariants3"] != null &&
                typeof $steps["updateUnnamedGroupOfVariants3"] === "object" &&
                typeof $steps["updateUnnamedGroupOfVariants3"].then ===
                  "function"
              ) {
                $steps["updateUnnamedGroupOfVariants3"] = await $steps[
                  "updateUnnamedGroupOfVariants3"
                ];
              }
            }}
          >
            <div
              data-plasmic-name={"rectangle3177"}
              data-plasmic-override={overrides.rectangle3177}
              className={classNames(projectcss.all, sty.rectangle3177, {
                [sty.rectangle3177variants2_activities]: hasVariant(
                  $state,
                  "variants2",
                  "activities"
                ),
                [sty.rectangle3177variants2_renderings]: hasVariant(
                  $state,
                  "variants2",
                  "renderings"
                )
              })}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___3Yz3T
              )}
            >
              {"Skate-park area"}
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__lPps, {
              [sty.freeBoxvariants2_activities__lPpsoy1JL]: hasVariant(
                $state,
                "variants2",
                "activities"
              )
            })}
            onClick={async event => {
              const $steps = {};
              $steps["updateUnnamedGroupOfVariants3"] = true
                ? (() => {
                    const actionArgs = {
                      vgroup: "unnamedGroupOfVariants3",
                      operation: 0,
                      value: "activityPopUp1"
                    };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }
                      p.set($state, vgroup, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateUnnamedGroupOfVariants3"] != null &&
                typeof $steps["updateUnnamedGroupOfVariants3"] === "object" &&
                typeof $steps["updateUnnamedGroupOfVariants3"].then ===
                  "function"
              ) {
                $steps["updateUnnamedGroupOfVariants3"] = await $steps[
                  "updateUnnamedGroupOfVariants3"
                ];
              }
            }}
          >
            <div
              data-plasmic-name={"rectangle3179"}
              data-plasmic-override={overrides.rectangle3179}
              className={classNames(projectcss.all, sty.rectangle3179, {
                [sty.rectangle3179variants2_activities]: hasVariant(
                  $state,
                  "variants2",
                  "activities"
                ),
                [sty.rectangle3179variants2_renderings]: hasVariant(
                  $state,
                  "variants2",
                  "renderings"
                )
              })}
            />

            <div
              data-plasmic-name={"climbingWall"}
              data-plasmic-override={overrides.climbingWall}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.climbingWall
              )}
            >
              {"Climbing wall "}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__nzUej)}>
            <div
              data-plasmic-name={"rectangle3181"}
              data-plasmic-override={overrides.rectangle3181}
              className={classNames(projectcss.all, sty.rectangle3181)}
            />

            <div
              data-plasmic-name={"openActivitiesOnTheNorth"}
              data-plasmic-override={overrides.openActivitiesOnTheNorth}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.openActivitiesOnTheNorth
              )}
            >
              {"Open activities on the north "}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__cqgce)}>
            <div
              data-plasmic-name={"rectangle3180"}
              data-plasmic-override={overrides.rectangle3180}
              className={classNames(projectcss.all, sty.rectangle3180)}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__p0BCx
              )}
            >
              {"Daylight Open Market"}
            </div>
          </div>
        </p.Stack>
        <div
          data-plasmic-name={"map"}
          data-plasmic-override={overrides.map}
          className={classNames(projectcss.all, sty.map, {
            [sty.mapvariants2_renderings]: hasVariant(
              $state,
              "variants2",
              "renderings"
            )
          })}
        >
          <div
            data-plasmic-name={"rectangle3183"}
            data-plasmic-override={overrides.rectangle3183}
            className={classNames(projectcss.all, sty.rectangle3183, {
              [sty.rectangle3183variants2_renderings]: hasVariant(
                $state,
                "variants2",
                "renderings"
              )
            })}
          />

          <div
            data-plasmic-name={"mapOfTheAreasDesignedOnTopAndUnderTheBridge"}
            data-plasmic-override={
              overrides.mapOfTheAreasDesignedOnTopAndUnderTheBridge
            }
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.mapOfTheAreasDesignedOnTopAndUnderTheBridge
            )}
          >
            {"Map of the areas designed on top and under the bridge "}
          </div>
        </div>
      </p.Stack>
      <PopUpGallery
        className={classNames("__wab_instance", sty.popUpGallery__bVuN, {
          [sty.popUpGallerypopUp2__bVuNaS23]: hasVariant(
            $state,
            "popUp2",
            "popUp2"
          )
        })}
      />

      <PopUpGallery
        className={classNames("__wab_instance", sty.popUpGallery__eh0Jh, {
          [sty.popUpGalleryunnamedGroupOfVariants3_activityPopUp5__eh0JhZowXe]:
            hasVariant($state, "unnamedGroupOfVariants3", "activityPopUp5")
        })}
        popUpVariants={"activity5"}
      />

      <PopUpGallery
        className={classNames("__wab_instance", sty.popUpGallery___0FCo, {
          [sty.popUpGalleryunnamedGroupOfVariants3_activityPopUp4___0FCoo2SZo]:
            hasVariant($state, "unnamedGroupOfVariants3", "activityPopUp4")
        })}
        popUpVariants={"activity4"}
      />

      <PopUpGallery
        className={classNames("__wab_instance", sty.popUpGallery__tge3D, {
          [sty.popUpGalleryunnamedGroupOfVariants3_activityPopUp1__tge3DcEnHz]:
            hasVariant($state, "unnamedGroupOfVariants3", "activityPopUp1")
        })}
        popUpVariants={"activity1"}
      />

      <PopUpGallery
        className={classNames("__wab_instance", sty.popUpGallery___3REa3, {
          [sty.popUpGalleryunnamedGroupOfVariants3_activityPopUp2___3REa3I33Ht]:
            hasVariant($state, "unnamedGroupOfVariants3", "activityPopUp2")
        })}
        popUpVariants={"activity2"}
      />

      <PopUpGallery
        className={classNames("__wab_instance", sty.popUpGallery__mcG2S, {
          [sty.popUpGalleryunnamedGroupOfVariants3_activityPopUp3__mcG2S67F2T]:
            hasVariant($state, "unnamedGroupOfVariants3", "activityPopUp3")
        })}
        popUpVariants={"activity3"}
      />
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "gallery01",
    "description",
    "inConceivingTheDesignForTheDonnersbergerBridgeOurInspirationWasDrawnFromMunichsArchitecturalEssenceOurAimWasSimpleCreateABridgeThatHarmonizesWithTheCitysIdentityAndSurroundingsPositionedAsASymbolicGatewayItPaysHomageToMunichsHistoricGatesOfferingGuestsAWarmWelcomeAndPanoramicViewsOfTheCityAndSunsetOverTheRailwayTracksBeyondAestheticsOurDesignAddressesPracticalChallengesOfABustlingTrafficHubIncorporatingNoiseCancellationToMirrorTheDynamicFlowOfTheTrafficTheBridgesInnovationExtendsToItsStructureWhereArchesSupportingTheMainSectionDoubleAsFunctionalElementsAPlatformConnectingTheArchesProvidesAUniqueViewpointAndActivatesAreasBeneathTheBridgeTransformingParkingLotsIntoEngagingSpacesAsWePresentThisVisionWeInviteCitizensToExploreAndShareInsightsYourPerspectivesAreVitalInShapingTheDonnersbergerBridgeEnsuringItStandsNotOnlyAsAStructuralMarvelButAlsoAsACommunityCentricLandmarkJoinUsInEnvisioningABridgeThatReflectsMunichsSpiritAndEnhancesUrbanLiving",
    "navBar",
    "frame108",
    "_3DRenderings",
    "analysis",
    "sketches",
    "rectangle3178",
    "rectangle3177",
    "rectangle3179",
    "climbingWall",
    "rectangle3181",
    "openActivitiesOnTheNorth",
    "rectangle3180",
    "map",
    "rectangle3183",
    "mapOfTheAreasDesignedOnTopAndUnderTheBridge"
  ],

  gallery01: [
    "gallery01",
    "description",
    "inConceivingTheDesignForTheDonnersbergerBridgeOurInspirationWasDrawnFromMunichsArchitecturalEssenceOurAimWasSimpleCreateABridgeThatHarmonizesWithTheCitysIdentityAndSurroundingsPositionedAsASymbolicGatewayItPaysHomageToMunichsHistoricGatesOfferingGuestsAWarmWelcomeAndPanoramicViewsOfTheCityAndSunsetOverTheRailwayTracksBeyondAestheticsOurDesignAddressesPracticalChallengesOfABustlingTrafficHubIncorporatingNoiseCancellationToMirrorTheDynamicFlowOfTheTrafficTheBridgesInnovationExtendsToItsStructureWhereArchesSupportingTheMainSectionDoubleAsFunctionalElementsAPlatformConnectingTheArchesProvidesAUniqueViewpointAndActivatesAreasBeneathTheBridgeTransformingParkingLotsIntoEngagingSpacesAsWePresentThisVisionWeInviteCitizensToExploreAndShareInsightsYourPerspectivesAreVitalInShapingTheDonnersbergerBridgeEnsuringItStandsNotOnlyAsAStructuralMarvelButAlsoAsACommunityCentricLandmarkJoinUsInEnvisioningABridgeThatReflectsMunichsSpiritAndEnhancesUrbanLiving",
    "navBar",
    "frame108",
    "_3DRenderings",
    "analysis",
    "sketches",
    "rectangle3178",
    "rectangle3177",
    "rectangle3179",
    "climbingWall",
    "rectangle3181",
    "openActivitiesOnTheNorth",
    "rectangle3180",
    "map",
    "rectangle3183",
    "mapOfTheAreasDesignedOnTopAndUnderTheBridge"
  ],

  description: [
    "description",
    "inConceivingTheDesignForTheDonnersbergerBridgeOurInspirationWasDrawnFromMunichsArchitecturalEssenceOurAimWasSimpleCreateABridgeThatHarmonizesWithTheCitysIdentityAndSurroundingsPositionedAsASymbolicGatewayItPaysHomageToMunichsHistoricGatesOfferingGuestsAWarmWelcomeAndPanoramicViewsOfTheCityAndSunsetOverTheRailwayTracksBeyondAestheticsOurDesignAddressesPracticalChallengesOfABustlingTrafficHubIncorporatingNoiseCancellationToMirrorTheDynamicFlowOfTheTrafficTheBridgesInnovationExtendsToItsStructureWhereArchesSupportingTheMainSectionDoubleAsFunctionalElementsAPlatformConnectingTheArchesProvidesAUniqueViewpointAndActivatesAreasBeneathTheBridgeTransformingParkingLotsIntoEngagingSpacesAsWePresentThisVisionWeInviteCitizensToExploreAndShareInsightsYourPerspectivesAreVitalInShapingTheDonnersbergerBridgeEnsuringItStandsNotOnlyAsAStructuralMarvelButAlsoAsACommunityCentricLandmarkJoinUsInEnvisioningABridgeThatReflectsMunichsSpiritAndEnhancesUrbanLiving"
  ],

  inConceivingTheDesignForTheDonnersbergerBridgeOurInspirationWasDrawnFromMunichsArchitecturalEssenceOurAimWasSimpleCreateABridgeThatHarmonizesWithTheCitysIdentityAndSurroundingsPositionedAsASymbolicGatewayItPaysHomageToMunichsHistoricGatesOfferingGuestsAWarmWelcomeAndPanoramicViewsOfTheCityAndSunsetOverTheRailwayTracksBeyondAestheticsOurDesignAddressesPracticalChallengesOfABustlingTrafficHubIncorporatingNoiseCancellationToMirrorTheDynamicFlowOfTheTrafficTheBridgesInnovationExtendsToItsStructureWhereArchesSupportingTheMainSectionDoubleAsFunctionalElementsAPlatformConnectingTheArchesProvidesAUniqueViewpointAndActivatesAreasBeneathTheBridgeTransformingParkingLotsIntoEngagingSpacesAsWePresentThisVisionWeInviteCitizensToExploreAndShareInsightsYourPerspectivesAreVitalInShapingTheDonnersbergerBridgeEnsuringItStandsNotOnlyAsAStructuralMarvelButAlsoAsACommunityCentricLandmarkJoinUsInEnvisioningABridgeThatReflectsMunichsSpiritAndEnhancesUrbanLiving:
    [
      "inConceivingTheDesignForTheDonnersbergerBridgeOurInspirationWasDrawnFromMunichsArchitecturalEssenceOurAimWasSimpleCreateABridgeThatHarmonizesWithTheCitysIdentityAndSurroundingsPositionedAsASymbolicGatewayItPaysHomageToMunichsHistoricGatesOfferingGuestsAWarmWelcomeAndPanoramicViewsOfTheCityAndSunsetOverTheRailwayTracksBeyondAestheticsOurDesignAddressesPracticalChallengesOfABustlingTrafficHubIncorporatingNoiseCancellationToMirrorTheDynamicFlowOfTheTrafficTheBridgesInnovationExtendsToItsStructureWhereArchesSupportingTheMainSectionDoubleAsFunctionalElementsAPlatformConnectingTheArchesProvidesAUniqueViewpointAndActivatesAreasBeneathTheBridgeTransformingParkingLotsIntoEngagingSpacesAsWePresentThisVisionWeInviteCitizensToExploreAndShareInsightsYourPerspectivesAreVitalInShapingTheDonnersbergerBridgeEnsuringItStandsNotOnlyAsAStructuralMarvelButAlsoAsACommunityCentricLandmarkJoinUsInEnvisioningABridgeThatReflectsMunichsSpiritAndEnhancesUrbanLiving"
    ],

  navBar: ["navBar", "frame108", "_3DRenderings", "analysis", "sketches"],
  frame108: ["frame108", "_3DRenderings", "analysis", "sketches"],
  _3DRenderings: ["_3DRenderings"],
  analysis: ["analysis"],
  sketches: ["sketches"],
  rectangle3178: ["rectangle3178"],
  rectangle3177: ["rectangle3177"],
  rectangle3179: ["rectangle3179"],
  climbingWall: ["climbingWall"],
  rectangle3181: ["rectangle3181"],
  openActivitiesOnTheNorth: ["openActivitiesOnTheNorth"],
  rectangle3180: ["rectangle3180"],
  map: ["map", "rectangle3183", "mapOfTheAreasDesignedOnTopAndUnderTheBridge"],
  rectangle3183: ["rectangle3183"],
  mapOfTheAreasDesignedOnTopAndUnderTheBridge: [
    "mapOfTheAreasDesignedOnTopAndUnderTheBridge"
  ]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDisplay__ArgProps,
          internalVariantPropNames: PlasmicDisplay__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDisplay__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDisplay";
  } else {
    func.displayName = `PlasmicDisplay.${nodeName}`;
  }
  return func;
}

export const PlasmicDisplay = Object.assign(
  // Top-level PlasmicDisplay renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    gallery01: makeNodeComponent("gallery01"),
    description: makeNodeComponent("description"),
    inConceivingTheDesignForTheDonnersbergerBridgeOurInspirationWasDrawnFromMunichsArchitecturalEssenceOurAimWasSimpleCreateABridgeThatHarmonizesWithTheCitysIdentityAndSurroundingsPositionedAsASymbolicGatewayItPaysHomageToMunichsHistoricGatesOfferingGuestsAWarmWelcomeAndPanoramicViewsOfTheCityAndSunsetOverTheRailwayTracksBeyondAestheticsOurDesignAddressesPracticalChallengesOfABustlingTrafficHubIncorporatingNoiseCancellationToMirrorTheDynamicFlowOfTheTrafficTheBridgesInnovationExtendsToItsStructureWhereArchesSupportingTheMainSectionDoubleAsFunctionalElementsAPlatformConnectingTheArchesProvidesAUniqueViewpointAndActivatesAreasBeneathTheBridgeTransformingParkingLotsIntoEngagingSpacesAsWePresentThisVisionWeInviteCitizensToExploreAndShareInsightsYourPerspectivesAreVitalInShapingTheDonnersbergerBridgeEnsuringItStandsNotOnlyAsAStructuralMarvelButAlsoAsACommunityCentricLandmarkJoinUsInEnvisioningABridgeThatReflectsMunichsSpiritAndEnhancesUrbanLiving:
      makeNodeComponent(
        "inConceivingTheDesignForTheDonnersbergerBridgeOurInspirationWasDrawnFromMunichsArchitecturalEssenceOurAimWasSimpleCreateABridgeThatHarmonizesWithTheCitysIdentityAndSurroundingsPositionedAsASymbolicGatewayItPaysHomageToMunichsHistoricGatesOfferingGuestsAWarmWelcomeAndPanoramicViewsOfTheCityAndSunsetOverTheRailwayTracksBeyondAestheticsOurDesignAddressesPracticalChallengesOfABustlingTrafficHubIncorporatingNoiseCancellationToMirrorTheDynamicFlowOfTheTrafficTheBridgesInnovationExtendsToItsStructureWhereArchesSupportingTheMainSectionDoubleAsFunctionalElementsAPlatformConnectingTheArchesProvidesAUniqueViewpointAndActivatesAreasBeneathTheBridgeTransformingParkingLotsIntoEngagingSpacesAsWePresentThisVisionWeInviteCitizensToExploreAndShareInsightsYourPerspectivesAreVitalInShapingTheDonnersbergerBridgeEnsuringItStandsNotOnlyAsAStructuralMarvelButAlsoAsACommunityCentricLandmarkJoinUsInEnvisioningABridgeThatReflectsMunichsSpiritAndEnhancesUrbanLiving"
      ),
    navBar: makeNodeComponent("navBar"),
    frame108: makeNodeComponent("frame108"),
    _3DRenderings: makeNodeComponent("_3DRenderings"),
    analysis: makeNodeComponent("analysis"),
    sketches: makeNodeComponent("sketches"),
    rectangle3178: makeNodeComponent("rectangle3178"),
    rectangle3177: makeNodeComponent("rectangle3177"),
    rectangle3179: makeNodeComponent("rectangle3179"),
    climbingWall: makeNodeComponent("climbingWall"),
    rectangle3181: makeNodeComponent("rectangle3181"),
    openActivitiesOnTheNorth: makeNodeComponent("openActivitiesOnTheNorth"),
    rectangle3180: makeNodeComponent("rectangle3180"),
    map: makeNodeComponent("map"),
    rectangle3183: makeNodeComponent("rectangle3183"),
    mapOfTheAreasDesignedOnTopAndUnderTheBridge: makeNodeComponent(
      "mapOfTheAreasDesignedOnTopAndUnderTheBridge"
    ),
    // Metadata about props expected for PlasmicDisplay
    internalVariantProps: PlasmicDisplay__VariantProps,
    internalArgProps: PlasmicDisplay__ArgProps
  }
);

export default PlasmicDisplay;
/* prettier-ignore-end */
