// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: adU29zJd9uLGW9TewABBsV
// Component: clPh1NSkBPaO
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  set as $stateSet,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import Comment from "../../Comment"; // plasmic-import: FjjS-KWqLu0p/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_fusion_lab.module.css"; // plasmic-import: adU29zJd9uLGW9TewABBsV/projectcss
import sty from "./PlasmicParticipationArea.module.css"; // plasmic-import: clPh1NSkBPaO/css
import QuestionCircleSvgrepoComsvgIcon from "./icons/PlasmicIcon__QuestionCircleSvgrepoComsvg"; // plasmic-import: 0DE5OuaA8WJ1/icon

createPlasmicElementProxy;

export const PlasmicParticipationArea__VariantProps = new Array();

export const PlasmicParticipationArea__ArgProps = new Array();

const $$ = {};

function PlasmicParticipationArea__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "newCommentText.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__ks7IC
        )}
      >
        {"Explore the 3D Model Yourself"}
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__mnvTp)}>
        <div className={classNames(projectcss.all, sty.freeBox__vAye7)}>
          <div
            data-plasmic-name={"canvas"}
            data-plasmic-override={overrides.canvas}
            className={classNames(projectcss.all, sty.canvas)}
          />

          <div
            data-plasmic-name={"helpButton"}
            data-plasmic-override={overrides.helpButton}
            className={classNames(projectcss.all, sty.helpButton)}
          >
            <QuestionCircleSvgrepoComsvgIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              onMouseOver={async event => {
                const $steps = {};
                $steps["updateModalOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["modal", "open"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;
                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateModalOpen"] != null &&
                  typeof $steps["updateModalOpen"] === "object" &&
                  typeof $steps["updateModalOpen"].then === "function"
                ) {
                  $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                }
              }}
              role={"img"}
            />

            <AntdModal
              data-plasmic-name={"modal"}
              data-plasmic-override={overrides.modal}
              className={classNames("__wab_instance", sty.modal)}
              defaultStylesClassName={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )}
              hideFooter={true}
              modalScopeClassName={sty["modal__modal"]}
              onOpenChange={generateStateOnChangeProp($state, [
                "modal",
                "open"
              ])}
              open={generateStateValueProp($state, ["modal", "open"])}
              title={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__va8WI
                  )}
                >
                  {"Instructions on how to move around"}
                </div>
              }
              trigger={null}
            >
              <div
                data-plasmic-name={"hintsDropdownMenu"}
                data-plasmic-override={overrides.hintsDropdownMenu}
                className={classNames(projectcss.all, sty.hintsDropdownMenu)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jsaMo
                  )}
                >
                  {
                    "Scroll & Zoom to move\nW,A,S,D or Arrow Keys to move around\nQ, E to move up and down\nShift: Increase Speed"
                  }
                </div>
              </div>
            </AntdModal>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__nw8Q1)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__diJG)}
            >
              <textarea
                data-plasmic-name={"newCommentText"}
                data-plasmic-override={overrides.newCommentText}
                className={classNames(
                  projectcss.all,
                  projectcss.textarea,
                  sty.newCommentText
                )}
                onChange={e => {
                  generateStateOnChangeProp($state, [
                    "newCommentText",
                    "value"
                  ])(e.target.value);
                }}
                placeholder={"Type your comment here..."}
                ref={ref => {
                  $refs["newCommentText"] = ref;
                }}
                value={
                  generateStateValueProp($state, ["newCommentText", "value"]) ??
                  ""
                }
              />

              <div
                data-plasmic-name={"sendButton"}
                data-plasmic-override={overrides.sendButton}
                className={classNames(projectcss.all, sty.sendButton)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kmLsl
                  )}
                >
                  {"Leave a Comment"}
                </div>
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"commentSidebar"}
              data-plasmic-override={overrides.commentSidebar}
              hasGap={true}
              className={classNames(projectcss.all, sty.commentSidebar)}
            >
              <Comment
                className={classNames("__wab_instance", sty.comment__fuV80)}
              />

              <Comment
                className={classNames("__wab_instance", sty.comment__jXvz)}
              />

              <Comment
                className={classNames("__wab_instance", sty.comment__wMo2)}
              />

              <Comment
                className={classNames("__wab_instance", sty.comment__syp9S)}
              />

              <Comment
                className={classNames("__wab_instance", sty.comment__hdDi)}
              />

              <Comment
                className={classNames("__wab_instance", sty.comment__bbf8W)}
              />
            </Stack__>
          </Stack__>
        </div>
      </div>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__p0MIh)}
      >
        <AntdButton
          data-plasmic-name={"viewButton1"}
          data-plasmic-override={overrides.viewButton1}
          className={classNames("__wab_instance", sty.viewButton1)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__jWhYk
            )}
          >
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ color: "#000000" }}
              >
                {"Platfrom"}
              </span>
            </React.Fragment>
          </div>
        </AntdButton>
        <AntdButton
          data-plasmic-name={"viewButton2"}
          data-plasmic-override={overrides.viewButton2}
          className={classNames("__wab_instance", sty.viewButton2)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__iy8Eb
            )}
          >
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ color: "#000000" }}
              >
                {"Skatepark"}
              </span>
            </React.Fragment>
          </div>
        </AntdButton>
        <AntdButton
          data-plasmic-name={"viewButton3"}
          data-plasmic-override={overrides.viewButton3}
          className={classNames("__wab_instance", sty.viewButton3)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___6C9Ky
            )}
          >
            {"Climbing Area"}
          </div>
        </AntdButton>
        <AntdButton
          data-plasmic-name={"viewButton4"}
          data-plasmic-override={overrides.viewButton4}
          className={classNames("__wab_instance", sty.viewButton4)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__dbbOx
            )}
          >
            {"Open Area"}
          </div>
        </AntdButton>
        <AntdButton
          data-plasmic-name={"viewButton5"}
          data-plasmic-override={overrides.viewButton5}
          className={classNames("__wab_instance", sty.viewButton5)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__pcs4K
            )}
          >
            {"Market"}
          </div>
        </AntdButton>
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "canvas",
    "helpButton",
    "svg",
    "modal",
    "hintsDropdownMenu",
    "newCommentText",
    "sendButton",
    "commentSidebar",
    "viewButton1",
    "viewButton2",
    "viewButton3",
    "viewButton4",
    "viewButton5"
  ],

  canvas: ["canvas"],
  helpButton: ["helpButton", "svg", "modal", "hintsDropdownMenu"],
  svg: ["svg"],
  modal: ["modal", "hintsDropdownMenu"],
  hintsDropdownMenu: ["hintsDropdownMenu"],
  newCommentText: ["newCommentText"],
  sendButton: ["sendButton"],
  commentSidebar: ["commentSidebar"],
  viewButton1: ["viewButton1"],
  viewButton2: ["viewButton2"],
  viewButton3: ["viewButton3"],
  viewButton4: ["viewButton4"],
  viewButton5: ["viewButton5"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicParticipationArea__ArgProps,
          internalVariantPropNames: PlasmicParticipationArea__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicParticipationArea__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicParticipationArea";
  } else {
    func.displayName = `PlasmicParticipationArea.${nodeName}`;
  }
  return func;
}

export const PlasmicParticipationArea = Object.assign(
  // Top-level PlasmicParticipationArea renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    canvas: makeNodeComponent("canvas"),
    helpButton: makeNodeComponent("helpButton"),
    svg: makeNodeComponent("svg"),
    modal: makeNodeComponent("modal"),
    hintsDropdownMenu: makeNodeComponent("hintsDropdownMenu"),
    newCommentText: makeNodeComponent("newCommentText"),
    sendButton: makeNodeComponent("sendButton"),
    commentSidebar: makeNodeComponent("commentSidebar"),
    viewButton1: makeNodeComponent("viewButton1"),
    viewButton2: makeNodeComponent("viewButton2"),
    viewButton3: makeNodeComponent("viewButton3"),
    viewButton4: makeNodeComponent("viewButton4"),
    viewButton5: makeNodeComponent("viewButton5"),
    // Metadata about props expected for PlasmicParticipationArea
    internalVariantProps: PlasmicParticipationArea__VariantProps,
    internalArgProps: PlasmicParticipationArea__ArgProps
  }
);

export default PlasmicParticipationArea;
/* prettier-ignore-end */
