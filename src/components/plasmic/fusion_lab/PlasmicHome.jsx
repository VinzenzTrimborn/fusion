// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: adU29zJd9uLGW9TewABBsV
// Component: yVO7gSdMDe6r
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: iV9ipicgvWtS/component
import Navbar from "../../Navbar"; // plasmic-import: lwEnvYluELlC/component
import ParticipationArea from "../../ParticipationArea"; // plasmic-import: clPh1NSkBPaO/component
import ViewBar from "../../ViewBar"; // plasmic-import: XC59IaIFr3ao/component
import VotingSection from "../../VotingSection"; // plasmic-import: y-2j-fa4twS1/component
import AboutUs from "../../AboutUs"; // plasmic-import: IwB4ixeF6-I9/component
import Team from "../../Team"; // plasmic-import: SnzWAy89iw5m/component
import GalleryDisplay from "../../GalleryDisplay"; // plasmic-import: v_wMKsIXVD_E/component
import FaqSection from "../../FaqSection"; // plasmic-import: Qhhf4YZ2QDy9/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_fusion_lab.module.css"; // plasmic-import: adU29zJd9uLGW9TewABBsV/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: yVO7gSdMDe6r/css

createPlasmicElementProxy;

export const PlasmicHome__VariantProps = new Array();

export const PlasmicHome__ArgProps = new Array();

const $$ = {};

function PlasmicHome__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <ParticipationArea
            data-plasmic-name={"participationArea"}
            data-plasmic-override={overrides.participationArea}
            className={classNames("__wab_instance", sty.participationArea)}
          />

          <ViewBar
            data-plasmic-name={"viewBar"}
            data-plasmic-override={overrides.viewBar}
            className={classNames("__wab_instance", sty.viewBar)}
          />

          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"Choose Your Favorite Proposal!"}
          </div>
          <VotingSection
            data-plasmic-name={"votingSection"}
            data-plasmic-override={overrides.votingSection}
            className={classNames("__wab_instance", sty.votingSection)}
          />

          <AboutUs
            data-plasmic-name={"aboutUs"}
            data-plasmic-override={overrides.aboutUs}
            className={classNames("__wab_instance", sty.aboutUs)}
          />

          <Team
            data-plasmic-name={"team"}
            data-plasmic-override={overrides.team}
            className={classNames("__wab_instance", sty.team)}
          />

          <GalleryDisplay
            data-plasmic-name={"galleryDisplay"}
            data-plasmic-override={overrides.galleryDisplay}
            className={classNames("__wab_instance", sty.galleryDisplay)}
          />

          <FaqSection
            data-plasmic-name={"faqSection"}
            data-plasmic-override={overrides.faqSection}
            className={classNames("__wab_instance", sty.faqSection)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "navbar",
    "participationArea",
    "viewBar",
    "text",
    "votingSection",
    "aboutUs",
    "team",
    "galleryDisplay",
    "faqSection"
  ],

  header: ["header"],
  navbar: ["navbar"],
  participationArea: ["participationArea"],
  viewBar: ["viewBar"],
  text: ["text"],
  votingSection: ["votingSection"],
  aboutUs: ["aboutUs"],
  team: ["team"],
  galleryDisplay: ["galleryDisplay"],
  faqSection: ["faqSection"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    navbar: makeNodeComponent("navbar"),
    participationArea: makeNodeComponent("participationArea"),
    viewBar: makeNodeComponent("viewBar"),
    text: makeNodeComponent("text"),
    votingSection: makeNodeComponent("votingSection"),
    aboutUs: makeNodeComponent("aboutUs"),
    team: makeNodeComponent("team"),
    galleryDisplay: makeNodeComponent("galleryDisplay"),
    faqSection: makeNodeComponent("faqSection"),
    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "Participate Donnersberger",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
