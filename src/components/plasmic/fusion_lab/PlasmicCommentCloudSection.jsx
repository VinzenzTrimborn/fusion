// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: adU29zJd9uLGW9TewABBsV
// Component: NG6kf33f9FmD
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import FavComment from "../../FavComment"; // plasmic-import: 0MoHniQ3DN8s/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_fusion_lab.module.css"; // plasmic-import: adU29zJd9uLGW9TewABBsV/projectcss
import sty from "./PlasmicCommentCloudSection.module.css"; // plasmic-import: NG6kf33f9FmD/css

createPlasmicElementProxy;

export const PlasmicCommentCloudSection__VariantProps = new Array();

export const PlasmicCommentCloudSection__ArgProps = new Array();

const $$ = {};

function PlasmicCommentCloudSection__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__e74Zf)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__vv7Ay
          )}
        >
          {"Comment Cloud"}
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__vr6ZG)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__oFvIh
            )}
          >
            {
              "Explore some of the most like comments of people who already participated in the public participation process."
            }
          </div>
        </div>
      </p.Stack>
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__po0Ji)}
      >
        <FavComment
          className={classNames("__wab_instance", sty.favComment__yyqg3)}
        />

        <FavComment
          className={classNames("__wab_instance", sty.favComment__sFuEo)}
        />

        <FavComment
          className={classNames("__wab_instance", sty.favComment___5JKxk)}
        />

        <FavComment
          className={classNames("__wab_instance", sty.favComment__aiUf0)}
        />

        <FavComment
          className={classNames("__wab_instance", sty.favComment__eKpmf)}
        />
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCommentCloudSection__ArgProps,
          internalVariantPropNames: PlasmicCommentCloudSection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCommentCloudSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCommentCloudSection";
  } else {
    func.displayName = `PlasmicCommentCloudSection.${nodeName}`;
  }
  return func;
}

export const PlasmicCommentCloudSection = Object.assign(
  // Top-level PlasmicCommentCloudSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicCommentCloudSection
    internalVariantProps: PlasmicCommentCloudSection__VariantProps,
    internalArgProps: PlasmicCommentCloudSection__ArgProps
  }
);

export default PlasmicCommentCloudSection;
/* prettier-ignore-end */
