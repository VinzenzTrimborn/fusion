// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: adU29zJd9uLGW9TewABBsV
// Component: lwEnvYluELlC
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import ButtonHome from "../../ButtonHome"; // plasmic-import: t7jVw_W02fSH/component
import ButtonProject from "../../ButtonProject"; // plasmic-import: X4fuFaE3nrQg/component
import ButtonOpinion from "../../ButtonOpinion"; // plasmic-import: sIfpDxyPYxed/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_fusion_lab.module.css"; // plasmic-import: adU29zJd9uLGW9TewABBsV/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: lwEnvYluELlC/css

createPlasmicElementProxy;

export const PlasmicNavbar__VariantProps = new Array();

export const PlasmicNavbar__ArgProps = new Array();

const $$ = {};

function PlasmicNavbar__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"home2"}
      data-plasmic-override={overrides.home2}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.home2
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox___521Hd)} />
      <div className={classNames(projectcss.all, sty.freeBox__qIZs)}>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___7ORoh)}
        >
          <ButtonHome
            data-plasmic-name={"buttonHome"}
            data-plasmic-override={overrides.buttonHome}
            className={classNames("__wab_instance", sty.buttonHome)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sCJg
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#000000" }}
                >
                  {"home"}
                </span>
              </React.Fragment>
            </div>
          </ButtonHome>
          <ButtonProject
            data-plasmic-name={"buttonProject"}
            data-plasmic-override={overrides.buttonProject}
            className={classNames("__wab_instance", sty.buttonProject)}
          />

          <ButtonOpinion
            data-plasmic-name={"buttonOpinion"}
            data-plasmic-override={overrides.buttonOpinion}
            className={classNames("__wab_instance", sty.buttonOpinion)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__r9Oo
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#000000" }}
                >
                  {"answer our survey"}
                </span>
              </React.Fragment>
            </div>
          </ButtonOpinion>
        </p.Stack>
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  home2: ["home2", "buttonHome", "buttonProject", "buttonOpinion"],
  buttonHome: ["buttonHome"],
  buttonProject: ["buttonProject"],
  buttonOpinion: ["buttonOpinion"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavbar__ArgProps,
          internalVariantPropNames: PlasmicNavbar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "home2") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("home2"),
  {
    // Helper components rendering sub-elements
    buttonHome: makeNodeComponent("buttonHome"),
    buttonProject: makeNodeComponent("buttonProject"),
    buttonOpinion: makeNodeComponent("buttonOpinion"),
    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
