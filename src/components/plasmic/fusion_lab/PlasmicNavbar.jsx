// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: adU29zJd9uLGW9TewABBsV
// Component: lwEnvYluELlC
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: apXgE63BR30L/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_fusion_lab.module.css"; // plasmic-import: adU29zJd9uLGW9TewABBsV/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: lwEnvYluELlC/css

createPlasmicElementProxy;

export const PlasmicNavbar__VariantProps = new Array();

export const PlasmicNavbar__ArgProps = new Array();

const $$ = {};

function PlasmicNavbar__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"home2"}
      data-plasmic-override={overrides.home2}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.home2
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox___521Hd)} />
      <div className={classNames(projectcss.all, sty.freeBox__qIZs)}>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___7ORoh)}
        >
          <Button
            data-plasmic-name={"home"}
            data-plasmic-override={overrides.home}
            className={classNames("__wab_instance", sty.home)}
            onClick={async event => {
              const $steps = {};
              $steps["goToHome"] = true
                ? (() => {
                    const actionArgs = { destination: `/` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        location.assign(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToHome"] != null &&
                typeof $steps["goToHome"] === "object" &&
                typeof $steps["goToHome"].then === "function"
              ) {
                $steps["goToHome"] = await $steps["goToHome"];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ht4Wt
              )}
            >
              {"Home"}
            </div>
          </Button>
          <Button
            data-plasmic-name={"visualization"}
            data-plasmic-override={overrides.visualization}
            className={classNames("__wab_instance", sty.visualization)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qhg7W
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#000000" }}
                >
                  {"Visualization"}
                </span>
              </React.Fragment>
            </div>
          </Button>
          <Button
            data-plasmic-name={"about"}
            data-plasmic-override={overrides.about}
            className={classNames("__wab_instance", sty.about)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___6S7Cc
              )}
            >
              {"About"}
            </div>
          </Button>
          <Button
            data-plasmic-name={"team"}
            data-plasmic-override={overrides.team}
            className={classNames("__wab_instance", sty.team)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__v3Zh
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#000000" }}
                >
                  {"Team"}
                </span>
              </React.Fragment>
            </div>
          </Button>
          <Button
            data-plasmic-name={"faq"}
            data-plasmic-override={overrides.faq}
            className={classNames("__wab_instance", sty.faq)}
            onClick={async event => {
              const $steps = {};
              $steps["updateStateVariable"] = true
                ? (() => {
                    const actionArgs = {};
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;
                      undefined;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateStateVariable"] != null &&
                typeof $steps["updateStateVariable"] === "object" &&
                typeof $steps["updateStateVariable"].then === "function"
              ) {
                $steps["updateStateVariable"] = await $steps[
                  "updateStateVariable"
                ];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vfA
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700, color: "#000000" }}
                >
                  {"FAQ"}
                </span>
              </React.Fragment>
            </div>
          </Button>
          <Button
            data-plasmic-name={"faq2"}
            data-plasmic-override={overrides.faq2}
            className={classNames("__wab_instance", sty.faq2)}
            onClick={async event => {
              const $steps = {};
              $steps["goToGallery"] = true
                ? (() => {
                    const actionArgs = { destination: `/gallery` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        location.assign(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToGallery"] != null &&
                typeof $steps["goToGallery"] === "object" &&
                typeof $steps["goToGallery"].then === "function"
              ) {
                $steps["goToGallery"] = await $steps["goToGallery"];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__aq5Yd
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700, color: "#000000" }}
                >
                  {"Gallery"}
                </span>
              </React.Fragment>
            </div>
          </Button>
        </p.Stack>
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  home2: ["home2", "home", "visualization", "about", "team", "faq", "faq2"],
  home: ["home"],
  visualization: ["visualization"],
  about: ["about"],
  team: ["team"],
  faq: ["faq"],
  faq2: ["faq2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavbar__ArgProps,
          internalVariantPropNames: PlasmicNavbar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "home2") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("home2"),
  {
    // Helper components rendering sub-elements
    home: makeNodeComponent("home"),
    visualization: makeNodeComponent("visualization"),
    about: makeNodeComponent("about"),
    team: makeNodeComponent("team"),
    faq: makeNodeComponent("faq"),
    faq2: makeNodeComponent("faq2"),
    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
