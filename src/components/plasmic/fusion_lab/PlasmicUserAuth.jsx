// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: adU29zJd9uLGW9TewABBsV
// Component: zv2IqcCjwXro
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import TextInput from "../../TextInput"; // plasmic-import: eo06WAQVRF2h/component
import { AntdPassword } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdPassword_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import Button from "../../Button"; // plasmic-import: apXgE63BR30L/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_fusion_lab.module.css"; // plasmic-import: adU29zJd9uLGW9TewABBsV/projectcss
import sty from "./PlasmicUserAuth.module.css"; // plasmic-import: zv2IqcCjwXro/css
import CloseSvgrepoComsvgIcon from "./icons/PlasmicIcon__CloseSvgrepoComsvg"; // plasmic-import: naIJz5VNedYp/icon

createPlasmicElementProxy;

export const PlasmicUserAuth__VariantProps = new Array("login");

export const PlasmicUserAuth__ArgProps = new Array("open");

const $$ = {};

function PlasmicUserAuth__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          open: false
        },
        props.args
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "statemodalopen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "login",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.login
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props["open"]
      },
      {
        path: "email.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "password.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: p.generateOnMutateForSpec("value", AntdPassword_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        { [sty.rootlogin]: hasVariant($state, "login", "login") }
      )}
    >
      <AntdModal
        data-plasmic-name={"modal"}
        data-plasmic-override={overrides.modal}
        className={classNames("__wab_instance", sty.modal)}
        closeIcon={
          <CloseSvgrepoComsvgIcon
            data-plasmic-name={"closeIcon"}
            data-plasmic-override={overrides.closeIcon}
            className={classNames(projectcss.all, sty.closeIcon)}
            role={"img"}
          />
        }
        defaultStylesClassName={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens
        )}
        footer={
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__e96Vf)}
          >
            <Button
              data-plasmic-name={"cancelButton"}
              data-plasmic-override={overrides.cancelButton}
              className={classNames("__wab_instance", sty.cancelButton)}
              color={"clear"}
              shape={"sharp"}
              size={"compact"}
            >
              {"Cancle"}
            </Button>
            <Button
              data-plasmic-name={"registerButton"}
              data-plasmic-override={overrides.registerButton}
              className={classNames("__wab_instance", sty.registerButton, {
                [sty.registerButtonlogin]: hasVariant($state, "login", "login")
              })}
              color={"blue"}
              shape={"sharp"}
              size={"compact"}
              submitsForm={false}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jxpht,
                  {
                    [sty.textlogin__jxphtxLejx]: hasVariant(
                      $state,
                      "login",
                      "login"
                    )
                  }
                )}
              >
                {hasVariant($state, "login", "login") ? "Log In" : "Register"}
              </div>
            </Button>
          </p.Stack>
        }
        maskClosable={false}
        modalScopeClassName={sty["modal__modal"]}
        onOpenChange={p.generateStateOnChangeProp($state, ["modal", "open"])}
        open={p.generateStateValueProp($state, ["modal", "open"])}
        title={hasVariant($state, "login", "login") ? "Log In" : "Sign up"}
        trigger={
          <AntdButton
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__g5F3U
              )}
            >
              {"Show modal"}
            </div>
          </AntdButton>
        }
      >
        <div className={classNames(projectcss.all, sty.freeBox__fDoPr)}>
          <div className={classNames(projectcss.all, sty.freeBox__buFF)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__nca0M)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aBOyi
                )}
              >
                {"to participate and give feedback"}
              </div>
            </p.Stack>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__tyewh)}
            >
              <TextInput
                data-plasmic-name={"email"}
                data-plasmic-override={overrides.email}
                className={classNames("__wab_instance", sty.email)}
                onChange={(...eventArgs) => {
                  p.generateStateOnChangeProp($state, ["email", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }}
                placeholder={"Enter your email..."}
                value={
                  p.generateStateValueProp($state, ["email", "value"]) ?? ""
                }
              />

              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.password),
                  onChange: p.generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["password", "value"],
                    AntdPassword_Helpers
                  ),
                  placeholder: "Password",
                  value: p.generateStateValueProp($state, ["password", "value"])
                };
                p.initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "password.value"
                    }
                  ],

                  [],
                  AntdPassword_Helpers ?? {},
                  child$Props
                );
                return (
                  <AntdPassword
                    data-plasmic-name={"password"}
                    data-plasmic-override={overrides.password}
                    {...child$Props}
                  />
                );
              })()}
            </p.Stack>
          </div>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__tA4Gb)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__i95N,
                {
                  [sty.textlogin__i95NXLejx]: hasVariant(
                    $state,
                    "login",
                    "login"
                  )
                }
              )}
            >
              {hasVariant($state, "login", "login")
                ? "You do not have an account?"
                : "Already have an Account?"}
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__dotqt)}
              onClick={async event => {
                const $steps = {};
                $steps["updateLogin"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "login",
                        operation: 4,
                        value: "login"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }
                        p.set($state, vgroup, true);
                        return true;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateLogin"] != null &&
                  typeof $steps["updateLogin"] === "object" &&
                  typeof $steps["updateLogin"].then === "function"
                ) {
                  $steps["updateLogin"] = await $steps["updateLogin"];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3LBz,
                  {
                    [sty.textlogin___3LBzxLejx]: hasVariant(
                      $state,
                      "login",
                      "login"
                    )
                  }
                )}
                onClick={async event => {
                  const $steps = {};
                  $steps["updateLogin2"] = true
                    ? (() => {
                        const actionArgs = { vgroup: "login", operation: 4 };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }
                          p.set($state, vgroup, true);
                          return true;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateLogin2"] != null &&
                    typeof $steps["updateLogin2"] === "object" &&
                    typeof $steps["updateLogin2"].then === "function"
                  ) {
                    $steps["updateLogin2"] = await $steps["updateLogin2"];
                  }
                }}
              >
                {hasVariant($state, "login", "login") ? "Register" : "Login"}
              </div>
            </div>
            {(hasVariant($state, "login", "login") ? true : false) ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gQ0K8,
                  {
                    [sty.textlogin__gQ0K8XLejx]: hasVariant(
                      $state,
                      "login",
                      "login"
                    )
                  }
                )}
                onClick={async event => {
                  const $steps = {};
                  $steps["updateLogin2"] = true
                    ? (() => {
                        const actionArgs = { vgroup: "login", operation: 6 };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }
                          p.set($state, vgroup, false);
                          return false;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateLogin2"] != null &&
                    typeof $steps["updateLogin2"] === "object" &&
                    typeof $steps["updateLogin2"].then === "function"
                  ) {
                    $steps["updateLogin2"] = await $steps["updateLogin2"];
                  }
                }}
              >
                {hasVariant($state, "login", "login") ? "Register" : "Login"}
              </div>
            ) : null}
          </p.Stack>
        </div>
      </AntdModal>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "modal",
    "email",
    "password",
    "button",
    "cancelButton",
    "registerButton",
    "closeIcon"
  ],

  modal: [
    "modal",
    "email",
    "password",
    "button",
    "cancelButton",
    "registerButton",
    "closeIcon"
  ],

  email: ["email"],
  password: ["password"],
  button: ["button"],
  cancelButton: ["cancelButton"],
  registerButton: ["registerButton"],
  closeIcon: ["closeIcon"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUserAuth__ArgProps,
          internalVariantPropNames: PlasmicUserAuth__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUserAuth__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUserAuth";
  } else {
    func.displayName = `PlasmicUserAuth.${nodeName}`;
  }
  return func;
}

export const PlasmicUserAuth = Object.assign(
  // Top-level PlasmicUserAuth renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    modal: makeNodeComponent("modal"),
    email: makeNodeComponent("email"),
    password: makeNodeComponent("password"),
    button: makeNodeComponent("button"),
    cancelButton: makeNodeComponent("cancelButton"),
    registerButton: makeNodeComponent("registerButton"),
    closeIcon: makeNodeComponent("closeIcon"),
    // Metadata about props expected for PlasmicUserAuth
    internalVariantProps: PlasmicUserAuth__VariantProps,
    internalArgProps: PlasmicUserAuth__ArgProps
  }
);

export default PlasmicUserAuth;
/* prettier-ignore-end */
