// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: adU29zJd9uLGW9TewABBsV
// Component: jLuEuaSOhZq9
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_fusion_lab.module.css"; // plasmic-import: adU29zJd9uLGW9TewABBsV/projectcss
import sty from "./PlasmicLikeButton.module.css"; // plasmic-import: jLuEuaSOhZq9/css
import heartemptypngGa5STMfgIb9C from "./images/heartemptypng.png"; // plasmic-import: ga5sTMfgIb9c/picture
import heartfullpngRHxMiSIoRakU from "./images/heartfullpng.png"; // plasmic-import: RHxMiSIoRakU/picture

createPlasmicElementProxy;

export const PlasmicLikeButton__VariantProps = new Array("likedState");

export const PlasmicLikeButton__ArgProps = new Array();

const $$ = {};

function PlasmicLikeButton__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "isLiked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "count",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "likedState",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.likedState
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"likeButton"}
      data-plasmic-override={overrides.likeButton}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.likeButton,
        {
          [sty.likeButtonlikedState]: hasVariant(
            $state,
            "likedState",
            "likedState"
          )
        }
      )}
      onClick={async event => {
        const $steps = {};
        $steps["updateVariable"] = true
          ? (() => {
              const actionArgs = {
                variable: {
                  objRoot: $state,
                  variablePath: ["isLiked"]
                },
                operation: 0
              };
              return (({ variable, value, startIndex, deleteCount }) => {
                if (!variable) {
                  return;
                }
                const { objRoot, variablePath } = variable;
                p.set(objRoot, variablePath, value);
                return value;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["updateVariable"] != null &&
          typeof $steps["updateVariable"] === "object" &&
          typeof $steps["updateVariable"].then === "function"
        ) {
          $steps["updateVariable"] = await $steps["updateVariable"];
        }
      }}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text, {
          [sty.textlikedState]: hasVariant($state, "likedState", "likedState")
        })}
      >
        <React.Fragment>
          {(() => {
            try {
              return $state.count;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "0";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <p.PlasmicImg
        alt={""}
        className={classNames(sty.img__qfHd7, {
          [sty.imglikedState__qfHd7G04Gk]: hasVariant(
            $state,
            "likedState",
            "likedState"
          )
        })}
        displayHeight={"auto"}
        displayMaxHeight={"none"}
        displayMaxWidth={"35%"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={"auto"}
        loading={"lazy"}
        onClick={async event => {
          const $steps = {};
          $steps["updateCount"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["count"]
                  },
                  operation: 2
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;
                  const oldValue = p.get(objRoot, variablePath);
                  p.set(objRoot, variablePath, oldValue + 1);
                  return oldValue + 1;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateCount"] != null &&
            typeof $steps["updateCount"] === "object" &&
            typeof $steps["updateCount"].then === "function"
          ) {
            $steps["updateCount"] = await $steps["updateCount"];
          }
          $steps["updateLikedState"] = true
            ? (() => {
                const actionArgs = { vgroup: "likedState", operation: 2 };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }
                  const oldValue = p.get($state, vgroup);
                  p.set($state, vgroup, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateLikedState"] != null &&
            typeof $steps["updateLikedState"] === "object" &&
            typeof $steps["updateLikedState"].then === "function"
          ) {
            $steps["updateLikedState"] = await $steps["updateLikedState"];
          }
        }}
        src={
          hasVariant($state, "likedState", "likedState")
            ? {
                src: heartfullpngRHxMiSIoRakU,
                fullWidth: 300,
                fullHeight: 300,
                aspectRatio: undefined
              }
            : {
                src: heartemptypngGa5STMfgIb9C,
                fullWidth: 300,
                fullHeight: 300,
                aspectRatio: undefined
              }
        }
      />

      {(hasVariant($state, "likedState", "likedState") ? true : false) ? (
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__d5Mut, {
            [sty.imglikedState__d5Mutg04Gk]: hasVariant(
              $state,
              "likedState",
              "likedState"
            )
          })}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={
            hasVariant($state, "likedState", "likedState") ? "35%" : "100%"
          }
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          loading={"lazy"}
          onClick={async event => {
            const $steps = {};
            $steps["updateLikedState"] = true
              ? (() => {
                  const actionArgs = {
                    vgroup: "likedState",
                    operation: 6,
                    value: "likedState"
                  };
                  return (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }
                    p.set($state, vgroup, false);
                    return false;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateLikedState"] != null &&
              typeof $steps["updateLikedState"] === "object" &&
              typeof $steps["updateLikedState"].then === "function"
            ) {
              $steps["updateLikedState"] = await $steps["updateLikedState"];
            }
            $steps["updateCount"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["count"]
                    },
                    operation: 3
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;
                    const oldValue = p.get(objRoot, variablePath);
                    p.set(objRoot, variablePath, oldValue - 1);
                    return oldValue - 1;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateCount"] != null &&
              typeof $steps["updateCount"] === "object" &&
              typeof $steps["updateCount"].then === "function"
            ) {
              $steps["updateCount"] = await $steps["updateCount"];
            }
          }}
          src={
            hasVariant($state, "likedState", "likedState")
              ? {
                  src: heartfullpngRHxMiSIoRakU,
                  fullWidth: 300,
                  fullHeight: 300,
                  aspectRatio: undefined
                }
              : {
                  src: heartemptypngGa5STMfgIb9C,
                  fullWidth: 300,
                  fullHeight: 300,
                  aspectRatio: undefined
                }
          }
        />
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  likeButton: ["likeButton", "text"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLikeButton__ArgProps,
          internalVariantPropNames: PlasmicLikeButton__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLikeButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "likeButton") {
    func.displayName = "PlasmicLikeButton";
  } else {
    func.displayName = `PlasmicLikeButton.${nodeName}`;
  }
  return func;
}

export const PlasmicLikeButton = Object.assign(
  // Top-level PlasmicLikeButton renders the root element
  makeNodeComponent("likeButton"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicLikeButton
    internalVariantProps: PlasmicLikeButton__VariantProps,
    internalArgProps: PlasmicLikeButton__ArgProps
  }
);

export default PlasmicLikeButton;
/* prettier-ignore-end */
