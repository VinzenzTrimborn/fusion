// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: adU29zJd9uLGW9TewABBsV
// Component: BOUoKYlWFZly
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  set as $stateSet,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import Select from "../../Select"; // plasmic-import: YbzHlcQNiy51/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import Button from "../../Button"; // plasmic-import: apXgE63BR30L/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_fusion_lab.module.css"; // plasmic-import: adU29zJd9uLGW9TewABBsV/projectcss
import sty from "./PlasmicActivityQuestions.module.css"; // plasmic-import: BOUoKYlWFZly/css

createPlasmicElementProxy;

export const PlasmicActivityQuestions__VariantProps = new Array("activity");

export const PlasmicActivityQuestions__ArgProps = new Array("open", "variant");

const $$ = {};

function PlasmicActivityQuestions__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          open: true
        },
        props.args
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props["open"]
      },
      {
        path: "grade.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "improvementComment.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "notLikeComment.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "often.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "activity",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.activity
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootactivity_bridgePlatform]: hasVariant(
            $state,
            "activity",
            "bridgePlatform"
          ),
          [sty.rootactivity_climbingWall]: hasVariant(
            $state,
            "activity",
            "climbingWall"
          ),
          [sty.rootactivity_openActivitiesNorth]: hasVariant(
            $state,
            "activity",
            "openActivitiesNorth"
          ),
          [sty.rootactivity_openActivitiesSouth]: hasVariant(
            $state,
            "activity",
            "openActivitiesSouth"
          ),
          [sty.rootactivity_skateParkArea]: hasVariant(
            $state,
            "activity",
            "skateParkArea"
          )
        }
      )}
    >
      <AntdModal
        data-plasmic-name={"modal"}
        data-plasmic-override={overrides.modal}
        className={classNames("__wab_instance", sty.modal, {
          [sty.modalactivity_climbingWall]: hasVariant(
            $state,
            "activity",
            "climbingWall"
          ),
          [sty.modalactivity_openActivitiesNorth]: hasVariant(
            $state,
            "activity",
            "openActivitiesNorth"
          )
        })}
        defaultStylesClassName={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens
        )}
        footer={
          <div
            className={classNames(projectcss.all, sty.freeBox__wxuMq, {
              [sty.freeBoxactivity_bridgePlatform__wxuMq5LLv2]: hasVariant(
                $state,
                "activity",
                "bridgePlatform"
              ),
              [sty.freeBoxactivity_openActivitiesSouth__wxuMqTaom]: hasVariant(
                $state,
                "activity",
                "openActivitiesSouth"
              )
            })}
          >
            <Button
              data-plasmic-name={"climbingSubmit"}
              data-plasmic-override={overrides.climbingSubmit}
              className={classNames("__wab_instance", sty.climbingSubmit, {
                [sty.climbingSubmitactivity_bridgePlatform]: hasVariant(
                  $state,
                  "activity",
                  "bridgePlatform"
                ),
                [sty.climbingSubmitactivity_climbingWall]: hasVariant(
                  $state,
                  "activity",
                  "climbingWall"
                ),
                [sty.climbingSubmitactivity_openActivitiesNorth]: hasVariant(
                  $state,
                  "activity",
                  "openActivitiesNorth"
                ),
                [sty.climbingSubmitactivity_openActivitiesSouth]: hasVariant(
                  $state,
                  "activity",
                  "openActivitiesSouth"
                ),
                [sty.climbingSubmitactivity_skateParkArea]: hasVariant(
                  $state,
                  "activity",
                  "skateParkArea"
                )
              })}
              onClick={async event => {
                const $steps = {};
                $steps["updateModalOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["modal", "open"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;
                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateModalOpen"] != null &&
                  typeof $steps["updateModalOpen"] === "object" &&
                  typeof $steps["updateModalOpen"].then === "function"
                ) {
                  $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__k1K7P
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700, color: "#FFFFFF" }}
                  >
                    {"Submit"}
                  </span>
                </React.Fragment>
              </div>
            </Button>
            <Button
              data-plasmic-name={"platformSubmit"}
              data-plasmic-override={overrides.platformSubmit}
              className={classNames("__wab_instance", sty.platformSubmit, {
                [sty.platformSubmitactivity_bridgePlatform]: hasVariant(
                  $state,
                  "activity",
                  "bridgePlatform"
                ),
                [sty.platformSubmitactivity_openActivitiesNorth]: hasVariant(
                  $state,
                  "activity",
                  "openActivitiesNorth"
                ),
                [sty.platformSubmitactivity_openActivitiesSouth]: hasVariant(
                  $state,
                  "activity",
                  "openActivitiesSouth"
                ),
                [sty.platformSubmitactivity_skateParkArea]: hasVariant(
                  $state,
                  "activity",
                  "skateParkArea"
                )
              })}
              onClick={async event => {
                const $steps = {};
                $steps["updateModalOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["modal", "open"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;
                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateModalOpen"] != null &&
                  typeof $steps["updateModalOpen"] === "object" &&
                  typeof $steps["updateModalOpen"].then === "function"
                ) {
                  $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hU3Y
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700, color: "#FFFFFF" }}
                  >
                    {"Submit"}
                  </span>
                </React.Fragment>
              </div>
            </Button>
            <Button
              data-plasmic-name={"skateSubmit"}
              data-plasmic-override={overrides.skateSubmit}
              className={classNames("__wab_instance", sty.skateSubmit, {
                [sty.skateSubmitactivity_openActivitiesNorth]: hasVariant(
                  $state,
                  "activity",
                  "openActivitiesNorth"
                ),
                [sty.skateSubmitactivity_openActivitiesSouth]: hasVariant(
                  $state,
                  "activity",
                  "openActivitiesSouth"
                ),
                [sty.skateSubmitactivity_skateParkArea]: hasVariant(
                  $state,
                  "activity",
                  "skateParkArea"
                )
              })}
              onClick={async event => {
                const $steps = {};
                $steps["updateModalOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["modal", "open"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;
                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateModalOpen"] != null &&
                  typeof $steps["updateModalOpen"] === "object" &&
                  typeof $steps["updateModalOpen"].then === "function"
                ) {
                  $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__djZlE
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700, color: "#FFFFFF" }}
                  >
                    {"Submit"}
                  </span>
                </React.Fragment>
              </div>
            </Button>
            <Button
              data-plasmic-name={"openNorthSubmit"}
              data-plasmic-override={overrides.openNorthSubmit}
              className={classNames("__wab_instance", sty.openNorthSubmit, {
                [sty.openNorthSubmitactivity_openActivitiesNorth]: hasVariant(
                  $state,
                  "activity",
                  "openActivitiesNorth"
                ),
                [sty.openNorthSubmitactivity_openActivitiesSouth]: hasVariant(
                  $state,
                  "activity",
                  "openActivitiesSouth"
                ),
                [sty.openNorthSubmitactivity_skateParkArea]: hasVariant(
                  $state,
                  "activity",
                  "skateParkArea"
                )
              })}
              onClick={async event => {
                const $steps = {};
                $steps["updateModalOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["modal", "open"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;
                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateModalOpen"] != null &&
                  typeof $steps["updateModalOpen"] === "object" &&
                  typeof $steps["updateModalOpen"].then === "function"
                ) {
                  $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__weI08
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700, color: "#FFFFFF" }}
                  >
                    {"Submit"}
                  </span>
                </React.Fragment>
              </div>
            </Button>
            {(
              hasVariant($state, "activity", "openActivitiesSouth")
                ? true
                : false
            ) ? (
              <Button
                data-plasmic-name={"openSouthSubmit"}
                data-plasmic-override={overrides.openSouthSubmit}
                className={classNames("__wab_instance", sty.openSouthSubmit, {
                  [sty.openSouthSubmitactivity_openActivitiesNorth]: hasVariant(
                    $state,
                    "activity",
                    "openActivitiesNorth"
                  ),
                  [sty.openSouthSubmitactivity_openActivitiesSouth]: hasVariant(
                    $state,
                    "activity",
                    "openActivitiesSouth"
                  )
                })}
                onClick={async event => {
                  const $steps = {};
                  $steps["updateModalOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["modal", "open"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;
                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModalOpen"] != null &&
                    typeof $steps["updateModalOpen"] === "object" &&
                    typeof $steps["updateModalOpen"].then === "function"
                  ) {
                    $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0Bs8R
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700, color: "#FFFFFF" }}
                    >
                      {"Submit"}
                    </span>
                  </React.Fragment>
                </div>
              </Button>
            ) : null}
          </div>
        }
        modalScopeClassName={sty["modal__modal"]}
        onOpenChange={generateStateOnChangeProp($state, ["modal", "open"])}
        open={generateStateValueProp($state, ["modal", "open"])}
        title={
          hasVariant($state, "activity", "openActivitiesSouth")
            ? "What is your opinion of the open activities south?"
            : hasVariant($state, "activity", "openActivitiesNorth")
            ? "What is your opinion of the open activities north?"
            : hasVariant($state, "activity", "skateParkArea")
            ? "What is your opinion of the skate park area?"
            : hasVariant($state, "activity", "bridgePlatform")
            ? "What is your opinion of the bridge platform?"
            : "What is your opinion of the climbing wall?"
        }
        trigger={
          <AntdButton
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button)}
            type={"primary"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___5X3MJ
              )}
            >
              {"Give us your opinion"}
            </div>
          </AntdButton>
        }
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___6TkBw)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__tca74
            )}
          >
            {"On a scale from 1 (best) to 6 how do you like this idea?"}
          </div>
          <AntdInputNumber
            data-plasmic-name={"grade"}
            data-plasmic-override={overrides.grade}
            className={classNames("__wab_instance", sty.grade)}
            controls={true}
            max={6}
            min={1}
            onChange={generateStateOnChangeProp($state, ["grade", "value"])}
            placeholder={"Grade"}
            step={1}
            type={"number"}
            value={generateStateValueProp($state, ["grade", "value"])}
          />
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___5UVn6)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__px7Sb
            )}
          >
            {"How often would you use this area?"}
          </div>
          <Select
            data-plasmic-name={"often"}
            data-plasmic-override={overrides.often}
            aria-label={"Select Usage"}
            className={classNames("__wab_instance", sty.often)}
            onChange={(...eventArgs) => {
              generateStateOnChangeProp($state, ["often", "value"])(
                eventArgs[0]
              );
            }}
            options={(() => {
              const __composite = [
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null }
              ];

              __composite["0"]["value"] = "Never";
              __composite["0"]["label"] = "Never";
              __composite["1"]["value"] = "1-2 per month";
              __composite["1"]["label"] = "1-2 per month";
              __composite["2"]["value"] = "More";
              __composite["2"]["label"] = "More";
              return __composite;
            })()}
            value={generateStateValueProp($state, ["often", "value"])}
          />
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__oIb3)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__pjQjL
            )}
          >
            {"What do you not like about the current idea?"}
          </div>
          <textarea
            data-plasmic-name={"notLikeComment"}
            data-plasmic-override={overrides.notLikeComment}
            aria-label={"Dislike field"}
            className={classNames(
              projectcss.all,
              projectcss.textarea,
              sty.notLikeComment
            )}
            onChange={e => {
              generateStateOnChangeProp($state, ["notLikeComment", "value"])(
                e.target.value
              );
            }}
            placeholder={"Describe what you do not like..."}
            ref={ref => {
              $refs["notLikeComment"] = ref;
            }}
            value={
              generateStateValueProp($state, ["notLikeComment", "value"]) ?? ""
            }
          />
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__sguF9)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___6QUek
            )}
          >
            {"What would you like to improve about this idea?"}
          </div>
          <textarea
            data-plasmic-name={"improvementComment"}
            data-plasmic-override={overrides.improvementComment}
            aria-label={"recommendation field"}
            className={classNames(
              projectcss.all,
              projectcss.textarea,
              sty.improvementComment
            )}
            onChange={e => {
              generateStateOnChangeProp($state, [
                "improvementComment",
                "value"
              ])(e.target.value);
            }}
            placeholder={"Describe what you would improve..."}
            ref={ref => {
              $refs["improvementComment"] = ref;
            }}
            value={
              generateStateValueProp($state, ["improvementComment", "value"]) ??
              ""
            }
          />
        </Stack__>
      </AntdModal>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "modal",
    "grade",
    "often",
    "notLikeComment",
    "improvementComment",
    "button",
    "climbingSubmit",
    "platformSubmit",
    "skateSubmit",
    "openNorthSubmit",
    "openSouthSubmit"
  ],

  modal: [
    "modal",
    "grade",
    "often",
    "notLikeComment",
    "improvementComment",
    "button",
    "climbingSubmit",
    "platformSubmit",
    "skateSubmit",
    "openNorthSubmit",
    "openSouthSubmit"
  ],

  grade: ["grade"],
  often: ["often"],
  notLikeComment: ["notLikeComment"],
  improvementComment: ["improvementComment"],
  button: ["button"],
  climbingSubmit: ["climbingSubmit"],
  platformSubmit: ["platformSubmit"],
  skateSubmit: ["skateSubmit"],
  openNorthSubmit: ["openNorthSubmit"],
  openSouthSubmit: ["openSouthSubmit"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicActivityQuestions__ArgProps,
          internalVariantPropNames: PlasmicActivityQuestions__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicActivityQuestions__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicActivityQuestions";
  } else {
    func.displayName = `PlasmicActivityQuestions.${nodeName}`;
  }
  return func;
}

export const PlasmicActivityQuestions = Object.assign(
  // Top-level PlasmicActivityQuestions renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    modal: makeNodeComponent("modal"),
    grade: makeNodeComponent("grade"),
    often: makeNodeComponent("often"),
    notLikeComment: makeNodeComponent("notLikeComment"),
    improvementComment: makeNodeComponent("improvementComment"),
    button: makeNodeComponent("button"),
    climbingSubmit: makeNodeComponent("climbingSubmit"),
    platformSubmit: makeNodeComponent("platformSubmit"),
    skateSubmit: makeNodeComponent("skateSubmit"),
    openNorthSubmit: makeNodeComponent("openNorthSubmit"),
    openSouthSubmit: makeNodeComponent("openSouthSubmit"),
    // Metadata about props expected for PlasmicActivityQuestions
    internalVariantProps: PlasmicActivityQuestions__VariantProps,
    internalArgProps: PlasmicActivityQuestions__ArgProps
  }
);

export default PlasmicActivityQuestions;
/* prettier-ignore-end */
