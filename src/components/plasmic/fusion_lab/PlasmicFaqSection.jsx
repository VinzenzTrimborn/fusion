// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: adU29zJd9uLGW9TewABBsV
// Component: Qhhf4YZ2QDy9
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_fusion_lab.module.css"; // plasmic-import: adU29zJd9uLGW9TewABBsV/projectcss
import sty from "./PlasmicFaqSection.module.css"; // plasmic-import: Qhhf4YZ2QDy9/css

createPlasmicElementProxy;

export const PlasmicFaqSection__VariantProps = new Array("answers");

export const PlasmicFaqSection__ArgProps = new Array();

const $$ = {};

function PlasmicFaqSection__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "answers",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.answers
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__hIykt
        )}
      >
        {"Frequently Asked Questions"}
      </div>
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__fOhLd)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__mLyEs)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__iErO3
            )}
          >
            {"Questions"}
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__ugDyI, {
              [sty.freeBoxanswers__1__ugDyIFbPfn]: hasVariant(
                $state,
                "answers",
                "_1"
              ),
              [sty.freeBoxanswers__2__ugDyImlkfn]: hasVariant(
                $state,
                "answers",
                "_2"
              )
            })}
            onClick={async event => {
              const $steps = {};
              $steps["updateAnswers"] = true
                ? (() => {
                    const actionArgs = {
                      vgroup: "answers",
                      operation: 0,
                      value: "_1"
                    };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }
                      p.set($state, vgroup, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateAnswers"] != null &&
                typeof $steps["updateAnswers"] === "object" &&
                typeof $steps["updateAnswers"].then === "function"
              ) {
                $steps["updateAnswers"] = await $steps["updateAnswers"];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vDhs5,
                {
                  [sty.textanswers__1__vDhs5FbPfn]: hasVariant(
                    $state,
                    "answers",
                    "_1"
                  )
                }
              )}
            >
              {"Why is the Donnersberger Bridge being re-designed?"}
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__dnLwG, {
              [sty.freeBoxanswers__1__dnLwGFbPfn]: hasVariant(
                $state,
                "answers",
                "_1"
              ),
              [sty.freeBoxanswers__2__dnLwGmlkfn]: hasVariant(
                $state,
                "answers",
                "_2"
              )
            })}
            onClick={async event => {
              const $steps = {};
              $steps["updateAnswers"] = true
                ? (() => {
                    const actionArgs = {
                      vgroup: "answers",
                      operation: 0,
                      value: "_2"
                    };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }
                      p.set($state, vgroup, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateAnswers"] != null &&
                typeof $steps["updateAnswers"] === "object" &&
                typeof $steps["updateAnswers"].then === "function"
              ) {
                $steps["updateAnswers"] = await $steps["updateAnswers"];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vPeGy,
                {
                  [sty.textanswers__1__vPeGyFbPfn]: hasVariant(
                    $state,
                    "answers",
                    "_1"
                  )
                }
              )}
            >
              {
                "What are the main challenges addressed by the bridge\nreconstruction project?"
              }
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__sx5K0, {
              [sty.freeBoxanswers__1__sx5K0FbPfn]: hasVariant(
                $state,
                "answers",
                "_1"
              ),
              [sty.freeBoxanswers__3__sx5K03L9Fx]: hasVariant(
                $state,
                "answers",
                "_3"
              )
            })}
            onClick={async event => {
              const $steps = {};
              $steps["updateAnswers"] = true
                ? (() => {
                    const actionArgs = {
                      vgroup: "answers",
                      operation: 0,
                      value: "_3"
                    };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }
                      p.set($state, vgroup, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateAnswers"] != null &&
                typeof $steps["updateAnswers"] === "object" &&
                typeof $steps["updateAnswers"].then === "function"
              ) {
                $steps["updateAnswers"] = await $steps["updateAnswers"];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__z1Mg1
              )}
            >
              {
                "How long is the projected timeline for the bridge redesign, and what are the key milestones?"
              }
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__ydFmg, {
              [sty.freeBoxanswers__4__ydFmgjrPol]: hasVariant(
                $state,
                "answers",
                "_4"
              )
            })}
            onClick={async event => {
              const $steps = {};
              $steps["updateAnswers"] = true
                ? (() => {
                    const actionArgs = {
                      vgroup: "answers",
                      operation: 0,
                      value: "_4"
                    };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }
                      p.set($state, vgroup, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateAnswers"] != null &&
                typeof $steps["updateAnswers"] === "object" &&
                typeof $steps["updateAnswers"].then === "function"
              ) {
                $steps["updateAnswers"] = await $steps["updateAnswers"];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__q3Jb2
              )}
            >
              {
                "Will the new bridge design incorporate sustainable or environmentally friendly features?"
              }
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__csKlA, {
              [sty.freeBoxanswers__5__csKlA4GKjS]: hasVariant(
                $state,
                "answers",
                "_5"
              )
            })}
            onClick={async event => {
              const $steps = {};
              $steps["updateAnswers"] = true
                ? (() => {
                    const actionArgs = {
                      vgroup: "answers",
                      operation: 0,
                      value: "_5"
                    };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }
                      p.set($state, vgroup, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateAnswers"] != null &&
                typeof $steps["updateAnswers"] === "object" &&
                typeof $steps["updateAnswers"].then === "function"
              ) {
                $steps["updateAnswers"] = await $steps["updateAnswers"];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wTmOx
              )}
            >
              {
                "Are there any specific engineering or architectural innovations being implemented in the new bridge design?"
              }
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__oxb1T, {
              [sty.freeBoxanswers__6__oxb1Tdayq8]: hasVariant(
                $state,
                "answers",
                "_6"
              )
            })}
            onClick={async event => {
              const $steps = {};
              $steps["updateAnswers"] = true
                ? (() => {
                    const actionArgs = {
                      vgroup: "answers",
                      operation: 0,
                      value: "_6"
                    };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }
                      p.set($state, vgroup, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateAnswers"] != null &&
                typeof $steps["updateAnswers"] === "object" &&
                typeof $steps["updateAnswers"].then === "function"
              ) {
                $steps["updateAnswers"] = await $steps["updateAnswers"];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qkkp
              )}
            >
              {
                "What measures are in place to ensure the safety of pedestrians and cyclists during and after construction?"
              }
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__tISf, {
              [sty.freeBoxanswers__7__tISfaIuc3]: hasVariant(
                $state,
                "answers",
                "_7"
              )
            })}
            onClick={async event => {
              const $steps = {};
              $steps["updateAnswers"] = true
                ? (() => {
                    const actionArgs = {
                      vgroup: "answers",
                      operation: 0,
                      value: "_7"
                    };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }
                      p.set($state, vgroup, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateAnswers"] != null &&
                typeof $steps["updateAnswers"] === "object" &&
                typeof $steps["updateAnswers"].then === "function"
              ) {
                $steps["updateAnswers"] = await $steps["updateAnswers"];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jPTo
              )}
            >
              {"Which methods were used for the design phase?"}
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__zRvZs, {
              [sty.freeBoxanswers__8__zRvZsCwtP]: hasVariant(
                $state,
                "answers",
                "_8"
              )
            })}
            onClick={async event => {
              const $steps = {};
              $steps["updateAnswers"] = true
                ? (() => {
                    const actionArgs = {
                      vgroup: "answers",
                      operation: 0,
                      value: "_8"
                    };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }
                      p.set($state, vgroup, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateAnswers"] != null &&
                typeof $steps["updateAnswers"] === "object" &&
                typeof $steps["updateAnswers"].then === "function"
              ) {
                $steps["updateAnswers"] = await $steps["updateAnswers"];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__n2Ut2
              )}
            >
              {
                "Are there opportunities for the public to actively contribute to the bridge project?"
              }
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__bizrX, {
              [sty.freeBoxanswers__9__bizrXsSeH]: hasVariant(
                $state,
                "answers",
                "_9"
              )
            })}
            onClick={async event => {
              const $steps = {};
              $steps["updateAnswers"] = true
                ? (() => {
                    const actionArgs = {
                      vgroup: "answers",
                      operation: 0,
                      value: "_9"
                    };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }
                      p.set($state, vgroup, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateAnswers"] != null &&
                typeof $steps["updateAnswers"] === "object" &&
                typeof $steps["updateAnswers"].then === "function"
              ) {
                $steps["updateAnswers"] = await $steps["updateAnswers"];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__timqg
              )}
            >
              {
                "What types of activities are available for public contribution?"
              }
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__gEkit, {
              [sty.freeBoxanswers__10__gEkitRmuR4]: hasVariant(
                $state,
                "answers",
                "_10"
              )
            })}
            onClick={async event => {
              const $steps = {};
              $steps["updateAnswers"] = true
                ? (() => {
                    const actionArgs = {
                      vgroup: "answers",
                      operation: 0,
                      value: "_10"
                    };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }
                      p.set($state, vgroup, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateAnswers"] != null &&
                typeof $steps["updateAnswers"] === "object" &&
                typeof $steps["updateAnswers"].then === "function"
              ) {
                $steps["updateAnswers"] = await $steps["updateAnswers"];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rnEoi
              )}
            >
              {"How will the bridge be built?"}
            </div>
          </div>
        </p.Stack>
        <div className={classNames(projectcss.all, sty.freeBox__xb9Kz)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___2Qksb
            )}
          >
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ color: "#535353" }}
              >
                {"Answers"}
              </span>
            </React.Fragment>
          </div>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__sAt9C)}
          >
            <div
              data-plasmic-name={"answerBox"}
              data-plasmic-override={overrides.answerBox}
              className={classNames(projectcss.all, sty.answerBox, {
                [sty.answerBoxanswers__10]: hasVariant(
                  $state,
                  "answers",
                  "_10"
                ),
                [sty.answerBoxanswers__1]: hasVariant($state, "answers", "_1"),
                [sty.answerBoxanswers__2]: hasVariant($state, "answers", "_2"),
                [sty.answerBoxanswers__3]: hasVariant($state, "answers", "_3"),
                [sty.answerBoxanswers__4]: hasVariant($state, "answers", "_4"),
                [sty.answerBoxanswers__5]: hasVariant($state, "answers", "_5"),
                [sty.answerBoxanswers__6]: hasVariant($state, "answers", "_6"),
                [sty.answerBoxanswers__7]: hasVariant($state, "answers", "_7"),
                [sty.answerBoxanswers__8]: hasVariant($state, "answers", "_8"),
                [sty.answerBoxanswers__9]: hasVariant($state, "answers", "_9")
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___0Uzpd,
                  {
                    [sty.textanswers__10___0UzpdRmuR4]: hasVariant(
                      $state,
                      "answers",
                      "_10"
                    ),
                    [sty.textanswers__1___0UzpdFbPfn]: hasVariant(
                      $state,
                      "answers",
                      "_1"
                    ),
                    [sty.textanswers__2___0Uzpdmlkfn]: hasVariant(
                      $state,
                      "answers",
                      "_2"
                    ),
                    [sty.textanswers__3___0Uzpd3L9Fx]: hasVariant(
                      $state,
                      "answers",
                      "_3"
                    ),
                    [sty.textanswers__4___0UzpdjrPol]: hasVariant(
                      $state,
                      "answers",
                      "_4"
                    ),
                    [sty.textanswers__5___0Uzpd4GKjS]: hasVariant(
                      $state,
                      "answers",
                      "_5"
                    ),
                    [sty.textanswers__6___0Uzpddayq8]: hasVariant(
                      $state,
                      "answers",
                      "_6"
                    ),
                    [sty.textanswers__7___0UzpdaIuc3]: hasVariant(
                      $state,
                      "answers",
                      "_7"
                    ),
                    [sty.textanswers__8___0UzpdCwtP]: hasVariant(
                      $state,
                      "answers",
                      "_8"
                    ),
                    [sty.textanswers__9___0UzpdsSeH]: hasVariant(
                      $state,
                      "answers",
                      "_9"
                    )
                  }
                )}
              >
                {hasVariant($state, "answers", "_10")
                  ? "The bridge will be built with least amount of disturbance to the \non going traffic. Lanes will be closed in such an order that the \nflow of traffic will be unaffacted. The middle portion of the \nbridge will be built on the side and then it will be moved to its \nlocation. We even prepared a video of this! Check it out in our \ngallery."
                  : hasVariant($state, "answers", "_9")
                  ? "We have diverse activities, including tree planting events, art \ninstallations, and even unique features like climbing walls \nintegrated into the bridge design."
                  : hasVariant($state, "answers", "_8")
                  ? "Yes, we encourage active participation from the community. We \nhave implemented various engagement activities to involve the \npublic in the project."
                  : hasVariant($state, "answers", "_7")
                  ? "BIM and Parametrical design tools such as Grasshopper were \nthe main approaches during the design phase."
                  : hasVariant($state, "answers", "_6")
                  ? "Safety measures include designated pedestrian and cyclist \npathways, well-marked crossings, and the installation of \nappropriate signage. Construction zones will be secured to \nminimize risks."
                  : hasVariant($state, "answers", "_5")
                  ? "The new bridge design incorporates innovative engineering \ntechniques and architectural features aimed at optimizing \nstructural integrity, traffic flow, and overall aesthetic appeal."
                  : hasVariant($state, "answers", "_4")
                  ? "Yes, the new bridge design places a strong emphasis \non sustainability, incorporating features such as eco-friendly \nmaterials, energy-efficient lighting, and green spaces where \npossible."
                  : hasVariant($state, "answers", "_3")
                  ? "The projected timeline for the bridge redesign is 2 years, \nwhich is normal for a project at this scale. Key milestones include \nplanning, approvals, construction, and post-construction evaluations."
                  : hasVariant($state, "answers", "_2")
                  ? "The project addresses challenges such as aging infrastructure, \nincreased traffic volumes, and the need for improved safety \nstandards, all of which necessitate a comprehensive\n reconstruction effort."
                  : "The bridge is being redesigned to address structural \ndeficiencies, enhance overall safety and functionality\n and create a new icon for the city."}
              </div>
            </div>
            <div
              data-plasmic-name={"answerPic"}
              data-plasmic-override={overrides.answerPic}
              className={classNames(projectcss.all, sty.answerPic)}
            />
          </p.Stack>
        </div>
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "answerBox", "answerPic"],
  answerBox: ["answerBox"],
  answerPic: ["answerPic"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFaqSection__ArgProps,
          internalVariantPropNames: PlasmicFaqSection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFaqSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFaqSection";
  } else {
    func.displayName = `PlasmicFaqSection.${nodeName}`;
  }
  return func;
}

export const PlasmicFaqSection = Object.assign(
  // Top-level PlasmicFaqSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    answerBox: makeNodeComponent("answerBox"),
    answerPic: makeNodeComponent("answerPic"),
    // Metadata about props expected for PlasmicFaqSection
    internalVariantProps: PlasmicFaqSection__VariantProps,
    internalArgProps: PlasmicFaqSection__ArgProps
  }
);

export default PlasmicFaqSection;
/* prettier-ignore-end */
