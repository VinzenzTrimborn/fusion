// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: adU29zJd9uLGW9TewABBsV
// Component: M92W_pizgO6s
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_fusion_lab.module.css"; // plasmic-import: adU29zJd9uLGW9TewABBsV/projectcss
import sty from "./PlasmicGeneralStats.module.css"; // plasmic-import: M92W_pizgO6s/css
import Line1Icon from "./icons/PlasmicIcon__Line1"; // plasmic-import: Pr58OLGA7wJO/icon
import Line2Icon from "./icons/PlasmicIcon__Line2"; // plasmic-import: ahcEOZfyIxmC/icon

createPlasmicElementProxy;

export const PlasmicGeneralStats__VariantProps = new Array();

export const PlasmicGeneralStats__ArgProps = new Array();

const $$ = {};

function PlasmicGeneralStats__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"statsGroup"}
        data-plasmic-override={overrides.statsGroup}
        className={classNames(projectcss.all, sty.statsGroup)}
      >
        <div
          data-plasmic-name={"generalStatistics"}
          data-plasmic-override={overrides.generalStatistics}
          className={classNames(projectcss.all, sty.generalStatistics)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__epFe
            )}
          >
            {"General Statistics"}
          </div>
        </div>
        <div
          data-plasmic-name={"statBox"}
          data-plasmic-override={overrides.statBox}
          className={classNames(projectcss.all, sty.statBox)}
        >
          <div
            data-plasmic-name={"statBoxRectangle"}
            data-plasmic-override={overrides.statBoxRectangle}
            className={classNames(projectcss.all, sty.statBoxRectangle)}
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"statGroup"}
            data-plasmic-override={overrides.statGroup}
            hasGap={true}
            className={classNames(projectcss.all, sty.statGroup)}
          >
            <div
              data-plasmic-name={"seen"}
              data-plasmic-override={overrides.seen}
              className={classNames(projectcss.all, sty.seen)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__blFOe
                )}
              >
                {"351"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hlHdK
                )}
              >
                {"People Have Seen the Model"}
              </div>
              <Line1Icon
                className={classNames(projectcss.all, sty.svg__l7XL)}
                role={"img"}
              />

              <Line2Icon
                className={classNames(projectcss.all, sty.svg__pQzjf)}
                role={"img"}
              />
            </div>
            <div
              data-plasmic-name={"comments"}
              data-plasmic-override={overrides.comments}
              className={classNames(projectcss.all, sty.comments)}
            >
              <div
                data-plasmic-name={"_351"}
                data-plasmic-override={overrides._351}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty._351
                )}
              >
                {"548"}
              </div>
              <div
                data-plasmic-name={"peopleHaveSeenTheModel"}
                data-plasmic-override={overrides.peopleHaveSeenTheModel}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.peopleHaveSeenTheModel
                )}
              >
                {"Comments in the model"}
              </div>
              <Line1Icon
                className={classNames(projectcss.all, sty.svg__fw6Kx)}
                role={"img"}
              />

              <Line2Icon
                className={classNames(projectcss.all, sty.svg__vE9D)}
                role={"img"}
              />
            </div>
            <div
              data-plasmic-name={"surveys"}
              data-plasmic-override={overrides.surveys}
              className={classNames(projectcss.all, sty.surveys)}
            >
              <div
                data-plasmic-name={"_124"}
                data-plasmic-override={overrides._124}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty._124
                )}
              >
                {"124"}
              </div>
              <div
                data-plasmic-name={"peopleHaveSeenTheModel2"}
                data-plasmic-override={overrides.peopleHaveSeenTheModel2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.peopleHaveSeenTheModel2
                )}
              >
                {"Surveys were answered"}
              </div>
              <Line1Icon
                className={classNames(projectcss.all, sty.svg__bHi18)}
                role={"img"}
              />

              <Line2Icon
                className={classNames(projectcss.all, sty.svg__aTmW9)}
                role={"img"}
              />
            </div>
            <div
              data-plasmic-name={"images"}
              data-plasmic-override={overrides.images}
              className={classNames(projectcss.all, sty.images)}
            >
              <div
                data-plasmic-name={"_54"}
                data-plasmic-override={overrides._54}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty._54
                )}
              >
                {"54"}
              </div>
              <div
                data-plasmic-name={"peopleHaveSeenTheModel3"}
                data-plasmic-override={overrides.peopleHaveSeenTheModel3}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.peopleHaveSeenTheModel3
                )}
              >
                {"Images were taken in the model"}
              </div>
              <Line1Icon
                className={classNames(projectcss.all, sty.svg__wrCgW)}
                role={"img"}
              />

              <Line2Icon
                className={classNames(projectcss.all, sty.svg___8MIuW)}
                role={"img"}
              />
            </div>
            <div
              data-plasmic-name={"liked"}
              data-plasmic-override={overrides.liked}
              className={classNames(projectcss.all, sty.liked)}
            >
              <div
                data-plasmic-name={"_254"}
                data-plasmic-override={overrides._254}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty._254
                )}
              >
                {"254"}
              </div>
              <div
                data-plasmic-name={"peopleHaveSeenTheModel4"}
                data-plasmic-override={overrides.peopleHaveSeenTheModel4}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.peopleHaveSeenTheModel4
                )}
              >
                {"People liked the bridge\u2019s design"}
              </div>
              <Line1Icon
                className={classNames(projectcss.all, sty.svg__xne8)}
                role={"img"}
              />

              <Line2Icon
                className={classNames(projectcss.all, sty.svg__zFr1I)}
                role={"img"}
              />
            </div>
          </p.Stack>
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "statsGroup",
    "generalStatistics",
    "statBox",
    "statBoxRectangle",
    "statGroup",
    "seen",
    "comments",
    "_351",
    "peopleHaveSeenTheModel",
    "surveys",
    "_124",
    "peopleHaveSeenTheModel2",
    "images",
    "_54",
    "peopleHaveSeenTheModel3",
    "liked",
    "_254",
    "peopleHaveSeenTheModel4"
  ],

  statsGroup: [
    "statsGroup",
    "generalStatistics",
    "statBox",
    "statBoxRectangle",
    "statGroup",
    "seen",
    "comments",
    "_351",
    "peopleHaveSeenTheModel",
    "surveys",
    "_124",
    "peopleHaveSeenTheModel2",
    "images",
    "_54",
    "peopleHaveSeenTheModel3",
    "liked",
    "_254",
    "peopleHaveSeenTheModel4"
  ],

  generalStatistics: ["generalStatistics"],
  statBox: [
    "statBox",
    "statBoxRectangle",
    "statGroup",
    "seen",
    "comments",
    "_351",
    "peopleHaveSeenTheModel",
    "surveys",
    "_124",
    "peopleHaveSeenTheModel2",
    "images",
    "_54",
    "peopleHaveSeenTheModel3",
    "liked",
    "_254",
    "peopleHaveSeenTheModel4"
  ],

  statBoxRectangle: ["statBoxRectangle"],
  statGroup: [
    "statGroup",
    "seen",
    "comments",
    "_351",
    "peopleHaveSeenTheModel",
    "surveys",
    "_124",
    "peopleHaveSeenTheModel2",
    "images",
    "_54",
    "peopleHaveSeenTheModel3",
    "liked",
    "_254",
    "peopleHaveSeenTheModel4"
  ],

  seen: ["seen"],
  comments: ["comments", "_351", "peopleHaveSeenTheModel"],
  _351: ["_351"],
  peopleHaveSeenTheModel: ["peopleHaveSeenTheModel"],
  surveys: ["surveys", "_124", "peopleHaveSeenTheModel2"],
  _124: ["_124"],
  peopleHaveSeenTheModel2: ["peopleHaveSeenTheModel2"],
  images: ["images", "_54", "peopleHaveSeenTheModel3"],
  _54: ["_54"],
  peopleHaveSeenTheModel3: ["peopleHaveSeenTheModel3"],
  liked: ["liked", "_254", "peopleHaveSeenTheModel4"],
  _254: ["_254"],
  peopleHaveSeenTheModel4: ["peopleHaveSeenTheModel4"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicGeneralStats__ArgProps,
          internalVariantPropNames: PlasmicGeneralStats__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicGeneralStats__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGeneralStats";
  } else {
    func.displayName = `PlasmicGeneralStats.${nodeName}`;
  }
  return func;
}

export const PlasmicGeneralStats = Object.assign(
  // Top-level PlasmicGeneralStats renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    statsGroup: makeNodeComponent("statsGroup"),
    generalStatistics: makeNodeComponent("generalStatistics"),
    statBox: makeNodeComponent("statBox"),
    statBoxRectangle: makeNodeComponent("statBoxRectangle"),
    statGroup: makeNodeComponent("statGroup"),
    seen: makeNodeComponent("seen"),
    comments: makeNodeComponent("comments"),
    _351: makeNodeComponent("_351"),
    peopleHaveSeenTheModel: makeNodeComponent("peopleHaveSeenTheModel"),
    surveys: makeNodeComponent("surveys"),
    _124: makeNodeComponent("_124"),
    peopleHaveSeenTheModel2: makeNodeComponent("peopleHaveSeenTheModel2"),
    images: makeNodeComponent("images"),
    _54: makeNodeComponent("_54"),
    peopleHaveSeenTheModel3: makeNodeComponent("peopleHaveSeenTheModel3"),
    liked: makeNodeComponent("liked"),
    _254: makeNodeComponent("_254"),
    peopleHaveSeenTheModel4: makeNodeComponent("peopleHaveSeenTheModel4"),
    // Metadata about props expected for PlasmicGeneralStats
    internalVariantProps: PlasmicGeneralStats__VariantProps,
    internalArgProps: PlasmicGeneralStats__ArgProps
  }
);

export default PlasmicGeneralStats;
/* prettier-ignore-end */
