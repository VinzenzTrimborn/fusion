// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: adU29zJd9uLGW9TewABBsV
// Component: QmnuKwpXkstV
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: lwEnvYluELlC/component
import Questions from "../../Questions"; // plasmic-import: ua_gmRo83aZu/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_fusion_lab.module.css"; // plasmic-import: adU29zJd9uLGW9TewABBsV/projectcss
import sty from "./PlasmicQuestionnaire.module.css"; // plasmic-import: QmnuKwpXkstV/css

createPlasmicElementProxy;

export const PlasmicQuestionnaire__VariantProps = new Array();

export const PlasmicQuestionnaire__ArgProps = new Array();

const $$ = {};

function PlasmicQuestionnaire__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"register"}
          data-plasmic-override={overrides.register}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.register
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <Questions
            data-plasmic-name={"questions"}
            data-plasmic-override={overrides.questions}
            className={classNames("__wab_instance", sty.questions)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  register: ["register", "navbar", "questions"],
  navbar: ["navbar"],
  questions: ["questions"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicQuestionnaire__ArgProps,
          internalVariantPropNames: PlasmicQuestionnaire__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicQuestionnaire__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "register") {
    func.displayName = "PlasmicQuestionnaire";
  } else {
    func.displayName = `PlasmicQuestionnaire.${nodeName}`;
  }
  return func;
}

export const PlasmicQuestionnaire = Object.assign(
  // Top-level PlasmicQuestionnaire renders the root element
  makeNodeComponent("register"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    questions: makeNodeComponent("questions"),
    // Metadata about props expected for PlasmicQuestionnaire
    internalVariantProps: PlasmicQuestionnaire__VariantProps,
    internalArgProps: PlasmicQuestionnaire__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicQuestionnaire;
/* prettier-ignore-end */
