// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: adU29zJd9uLGW9TewABBsV
// Component: apXgE63BR30L
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  renderPlasmicSlot,
  useCurrentUser,
  useDollarState,
  useTrigger
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import * as pp from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_fusion_lab.module.css"; // plasmic-import: adU29zJd9uLGW9TewABBsV/projectcss
import sty from "./PlasmicButton.module.css"; // plasmic-import: apXgE63BR30L/css
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: F3I08uNvLTAv/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: GwtwSpv5QuVA/icon

createPlasmicElementProxy;

export const PlasmicButton__VariantProps = new Array(
  "showStartIcon",
  "showEndIcon",
  "isDisabled",
  "shape",
  "size",
  "color"
);

export const PlasmicButton__ArgProps = new Array(
  "children",
  "startIcon",
  "endIcon",
  "link",
  "submitsForm",
  "target",
  "startIcon2",
  "children2",
  "endIcon2",
  "startIcon3",
  "children3",
  "endIcon3"
);

const $$ = {};

function PlasmicButton__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "showStartIcon",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.showStartIcon
      },
      {
        path: "showEndIcon",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.showEndIcon
      },
      {
        path: "isDisabled",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isDisabled
      },
      {
        path: "shape",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.shape
      },
      {
        path: "size",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.size
      },
      {
        path: "color",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.color
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const [isRootFocusVisibleWithin, triggerRootFocusVisibleWithinProps] =
    useTrigger("useFocusVisibleWithin", {
      isTextInput: false
    });
  const triggers = {
    focusVisibleWithin_root: isRootFocusVisibleWithin
  };
  return (
    <Stack__
      as={"button"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.root___focusVisibleWithin]: triggers.focusVisibleWithin_root,
          [sty.rootcolor_blue]: hasVariant($state, "color", "blue"),
          [sty.rootcolor_clear]: hasVariant($state, "color", "clear"),
          [sty.rootcolor_green]: hasVariant($state, "color", "green"),
          [sty.rootcolor_link]: hasVariant($state, "color", "link"),
          [sty.rootcolor_red]: hasVariant($state, "color", "red"),
          [sty.rootcolor_sand]: hasVariant($state, "color", "sand"),
          [sty.rootcolor_softBlue]: hasVariant($state, "color", "softBlue"),
          [sty.rootcolor_softGreen]: hasVariant($state, "color", "softGreen"),
          [sty.rootcolor_softRed]: hasVariant($state, "color", "softRed"),
          [sty.rootcolor_softSand]: hasVariant($state, "color", "softSand"),
          [sty.rootcolor_softYellow]: hasVariant($state, "color", "softYellow"),
          [sty.rootcolor_white]: hasVariant($state, "color", "white"),
          [sty.rootcolor_yellow]: hasVariant($state, "color", "yellow"),
          [sty.rootisDisabled]: hasVariant($state, "isDisabled", "isDisabled"),
          [sty.rootshape_round]: hasVariant($state, "shape", "round"),
          [sty.rootshape_round_size_compact]:
            hasVariant($state, "shape", "round") &&
            hasVariant($state, "size", "compact"),
          [sty.rootshape_rounded]: hasVariant($state, "shape", "rounded"),
          [sty.rootshape_rounded_showEndIcon]:
            hasVariant($state, "showEndIcon", "showEndIcon") &&
            hasVariant($state, "shape", "rounded"),
          [sty.rootshape_rounded_showStartIcon]:
            hasVariant($state, "shape", "rounded") &&
            hasVariant($state, "showStartIcon", "showStartIcon"),
          [sty.rootshape_rounded_size_compact]:
            hasVariant($state, "size", "compact") &&
            hasVariant($state, "shape", "rounded"),
          [sty.rootshape_sharp]: hasVariant($state, "shape", "sharp"),
          [sty.rootshowEndIcon]: hasVariant(
            $state,
            "showEndIcon",
            "showEndIcon"
          ),
          [sty.rootshowEndIcon_size_compact]:
            hasVariant($state, "size", "compact") &&
            hasVariant($state, "showEndIcon", "showEndIcon"),
          [sty.rootshowEndIcon_size_compact_showStartIcon]:
            hasVariant($state, "size", "compact") &&
            hasVariant($state, "showStartIcon", "showStartIcon") &&
            hasVariant($state, "showEndIcon", "showEndIcon"),
          [sty.rootshowStartIcon]: hasVariant(
            $state,
            "showStartIcon",
            "showStartIcon"
          ),
          [sty.rootsize_compact]: hasVariant($state, "size", "compact"),
          [sty.rootsize_compact_showStartIcon]:
            hasVariant($state, "size", "compact") &&
            hasVariant($state, "showStartIcon", "showStartIcon"),
          [sty.rootsize_minimal]: hasVariant($state, "size", "minimal"),
          [sty.rootsize_minimal_color_link]:
            hasVariant($state, "color", "link") &&
            hasVariant($state, "size", "minimal")
        }
      )}
      data-plasmic-trigger-props={[triggerRootFocusVisibleWithinProps]}
    >
      {(hasVariant($state, "showStartIcon", "showStartIcon") ? true : false) ? (
        <div
          data-plasmic-name={"startIconContainer"}
          data-plasmic-override={overrides.startIconContainer}
          className={classNames(projectcss.all, sty.startIconContainer, {
            [sty.startIconContainercolor_blue]: hasVariant(
              $state,
              "color",
              "blue"
            ),
            [sty.startIconContainershape_rounded_showStartIcon]:
              hasVariant($state, "shape", "rounded") &&
              hasVariant($state, "showStartIcon", "showStartIcon"),
            [sty.startIconContainershowStartIcon]: hasVariant(
              $state,
              "showStartIcon",
              "showStartIcon"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <ChecksvgIcon
                className={classNames(projectcss.all, sty.svg__kMgHp)}
                role={"img"}
              />
            ),

            value: args.startIcon,
            className: classNames(sty.slotTargetStartIcon, {
              [sty.slotTargetStartIconcolor_blue]: hasVariant(
                $state,
                "color",
                "blue"
              ),
              [sty.slotTargetStartIconcolor_clear]: hasVariant(
                $state,
                "color",
                "clear"
              ),
              [sty.slotTargetStartIconcolor_link]: hasVariant(
                $state,
                "color",
                "link"
              ),
              [sty.slotTargetStartIconcolor_softBlue]: hasVariant(
                $state,
                "color",
                "softBlue"
              ),
              [sty.slotTargetStartIconcolor_softGreen]: hasVariant(
                $state,
                "color",
                "softGreen"
              ),
              [sty.slotTargetStartIconcolor_softRed]: hasVariant(
                $state,
                "color",
                "softRed"
              ),
              [sty.slotTargetStartIconcolor_softSand]: hasVariant(
                $state,
                "color",
                "softSand"
              ),
              [sty.slotTargetStartIconcolor_softYellow]: hasVariant(
                $state,
                "color",
                "softYellow"
              ),
              [sty.slotTargetStartIconcolor_white]: hasVariant(
                $state,
                "color",
                "white"
              ),
              [sty.slotTargetStartIconcolor_yellow]: hasVariant(
                $state,
                "color",
                "yellow"
              ),
              [sty.slotTargetStartIconshowStartIcon]: hasVariant(
                $state,
                "showStartIcon",
                "showStartIcon"
              )
            })
          })}
        </div>
      ) : null}
      <div
        data-plasmic-name={"contentContainer"}
        data-plasmic-override={overrides.contentContainer}
        className={classNames(projectcss.all, sty.contentContainer, {
          [sty.contentContainer___focusVisibleWithin]:
            triggers.focusVisibleWithin_root,
          [sty.contentContainerisDisabled]: hasVariant(
            $state,
            "isDisabled",
            "isDisabled"
          ),
          [sty.contentContainershape_rounded]: hasVariant(
            $state,
            "shape",
            "rounded"
          ),
          [sty.contentContainershowEndIcon]: hasVariant(
            $state,
            "showEndIcon",
            "showEndIcon"
          )
        })}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mxDxH
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700, color: "#FFFFFF" }}
                >
                  {"Button"}
                </span>
              </React.Fragment>
            </div>
          ),

          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildren___focusVisibleWithin]:
              triggers.focusVisibleWithin_root,
            [sty.slotTargetChildrencolor_blue]: hasVariant(
              $state,
              "color",
              "blue"
            ),
            [sty.slotTargetChildrencolor_clear]: hasVariant(
              $state,
              "color",
              "clear"
            ),
            [sty.slotTargetChildrencolor_green]: hasVariant(
              $state,
              "color",
              "green"
            ),
            [sty.slotTargetChildrencolor_link]: hasVariant(
              $state,
              "color",
              "link"
            ),
            [sty.slotTargetChildrencolor_red]: hasVariant(
              $state,
              "color",
              "red"
            ),
            [sty.slotTargetChildrencolor_sand]: hasVariant(
              $state,
              "color",
              "sand"
            ),
            [sty.slotTargetChildrencolor_softBlue]: hasVariant(
              $state,
              "color",
              "softBlue"
            ),
            [sty.slotTargetChildrencolor_softGreen]: hasVariant(
              $state,
              "color",
              "softGreen"
            ),
            [sty.slotTargetChildrencolor_softRed]: hasVariant(
              $state,
              "color",
              "softRed"
            ),
            [sty.slotTargetChildrencolor_softSand]: hasVariant(
              $state,
              "color",
              "softSand"
            ),
            [sty.slotTargetChildrencolor_softYellow]: hasVariant(
              $state,
              "color",
              "softYellow"
            ),
            [sty.slotTargetChildrencolor_white]: hasVariant(
              $state,
              "color",
              "white"
            ),
            [sty.slotTargetChildrencolor_yellow]: hasVariant(
              $state,
              "color",
              "yellow"
            ),
            [sty.slotTargetChildrenisDisabled]: hasVariant(
              $state,
              "isDisabled",
              "isDisabled"
            ),
            [sty.slotTargetChildrenshape_rounded]: hasVariant(
              $state,
              "shape",
              "rounded"
            ),
            [sty.slotTargetChildrenshowEndIcon]: hasVariant(
              $state,
              "showEndIcon",
              "showEndIcon"
            ),
            [sty.slotTargetChildrenshowStartIcon]: hasVariant(
              $state,
              "showStartIcon",
              "showStartIcon"
            ),
            [sty.slotTargetChildrensize_minimal]: hasVariant(
              $state,
              "size",
              "minimal"
            ),
            [sty.slotTargetChildrensize_minimal_color_link]:
              hasVariant($state, "color", "link") &&
              hasVariant($state, "size", "minimal")
          })
        })}
      </div>
      <div
        data-plasmic-name={"endIconContainer"}
        data-plasmic-override={overrides.endIconContainer}
        className={classNames(projectcss.all, sty.endIconContainer, {
          [sty.endIconContainercolor_white]: hasVariant(
            $state,
            "color",
            "white"
          ),
          [sty.endIconContainercolor_yellow]: hasVariant(
            $state,
            "color",
            "yellow"
          ),
          [sty.endIconContainershowEndIcon]: hasVariant(
            $state,
            "showEndIcon",
            "showEndIcon"
          )
        })}
      >
        {false
          ? renderPlasmicSlot({
              defaultContents: (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg___3OQp)}
                  role={"img"}
                />
              ),

              value: args.endIcon,
              className: classNames(sty.slotTargetEndIcon, {
                [sty.slotTargetEndIconcolor_clear]: hasVariant(
                  $state,
                  "color",
                  "clear"
                ),
                [sty.slotTargetEndIconcolor_link]: hasVariant(
                  $state,
                  "color",
                  "link"
                ),
                [sty.slotTargetEndIconcolor_softBlue]: hasVariant(
                  $state,
                  "color",
                  "softBlue"
                ),
                [sty.slotTargetEndIconcolor_softGreen]: hasVariant(
                  $state,
                  "color",
                  "softGreen"
                ),
                [sty.slotTargetEndIconcolor_softRed]: hasVariant(
                  $state,
                  "color",
                  "softRed"
                ),
                [sty.slotTargetEndIconcolor_softSand]: hasVariant(
                  $state,
                  "color",
                  "softSand"
                ),
                [sty.slotTargetEndIconcolor_softYellow]: hasVariant(
                  $state,
                  "color",
                  "softYellow"
                ),
                [sty.slotTargetEndIconcolor_white]: hasVariant(
                  $state,
                  "color",
                  "white"
                ),
                [sty.slotTargetEndIconcolor_yellow]: hasVariant(
                  $state,
                  "color",
                  "yellow"
                ),
                [sty.slotTargetEndIconshowEndIcon]: hasVariant(
                  $state,
                  "showEndIcon",
                  "showEndIcon"
                )
              })
            })
          : null}
      </div>
      {false ? (
        <Stack__
          as={"button"}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.button,
            sty.button__sRj10,
            {
              [sty.button___focusVisibleWithin__sRj10Opjw3]:
                triggers.focusVisibleWithin_root,
              [sty.buttoncolor_blue__sRj10CnqoE]: hasVariant(
                $state,
                "color",
                "blue"
              ),
              [sty.buttoncolor_clear__sRj10Xs0Fs]: hasVariant(
                $state,
                "color",
                "clear"
              ),
              [sty.buttoncolor_green__sRj10V6H1J]: hasVariant(
                $state,
                "color",
                "green"
              ),
              [sty.buttoncolor_link__sRj10Z8DhY]: hasVariant(
                $state,
                "color",
                "link"
              ),
              [sty.buttoncolor_red__sRj10Az0VA]: hasVariant(
                $state,
                "color",
                "red"
              ),
              [sty.buttoncolor_sand__sRj103VQy4]: hasVariant(
                $state,
                "color",
                "sand"
              ),
              [sty.buttoncolor_softBlue__sRj100MdWm]: hasVariant(
                $state,
                "color",
                "softBlue"
              ),
              [sty.buttoncolor_softGreen__sRj10JV44D]: hasVariant(
                $state,
                "color",
                "softGreen"
              ),
              [sty.buttoncolor_softRed__sRj10NvxpF]: hasVariant(
                $state,
                "color",
                "softRed"
              ),
              [sty.buttoncolor_softSand__sRj10Cu7Lj]: hasVariant(
                $state,
                "color",
                "softSand"
              ),
              [sty.buttoncolor_softYellow__sRj104HNqh]: hasVariant(
                $state,
                "color",
                "softYellow"
              ),
              [sty.buttoncolor_white__sRj10V1XeG]: hasVariant(
                $state,
                "color",
                "white"
              ),
              [sty.buttoncolor_yellow__sRj10Qx83W]: hasVariant(
                $state,
                "color",
                "yellow"
              ),
              [sty.buttonisDisabled__sRj10VlZp]: hasVariant(
                $state,
                "isDisabled",
                "isDisabled"
              ),
              [sty.buttonshape_round__sRj10AQ4Hz]: hasVariant(
                $state,
                "shape",
                "round"
              ),
              [sty.buttonshape_round_size_compact__sRj10AQ4HzHYmh]:
                hasVariant($state, "shape", "round") &&
                hasVariant($state, "size", "compact"),
              [sty.buttonshape_rounded__sRj105VLxL]: hasVariant(
                $state,
                "shape",
                "rounded"
              ),
              [sty.buttonshape_rounded_showEndIcon__sRj105VLxLFJknh]:
                hasVariant($state, "showEndIcon", "showEndIcon") &&
                hasVariant($state, "shape", "rounded"),
              [sty.buttonshape_rounded_showStartIcon__sRj105VLxLJl3Pk]:
                hasVariant($state, "shape", "rounded") &&
                hasVariant($state, "showStartIcon", "showStartIcon"),
              [sty.buttonshape_rounded_size_compact__sRj105VLxLHYmh]:
                hasVariant($state, "size", "compact") &&
                hasVariant($state, "shape", "rounded"),
              [sty.buttonshape_sharp__sRj10Ct1Bz]: hasVariant(
                $state,
                "shape",
                "sharp"
              ),
              [sty.buttonshowEndIcon__sRj10FJknh]: hasVariant(
                $state,
                "showEndIcon",
                "showEndIcon"
              ),
              [sty.buttonshowEndIcon_size_compact__sRj10FJknhHYmh]:
                hasVariant($state, "size", "compact") &&
                hasVariant($state, "showEndIcon", "showEndIcon"),
              [sty.buttonshowEndIcon_size_compact_showStartIcon__sRj10FJknhHYmhJl3Pk]:
                hasVariant($state, "size", "compact") &&
                hasVariant($state, "showStartIcon", "showStartIcon") &&
                hasVariant($state, "showEndIcon", "showEndIcon"),
              [sty.buttonshowStartIcon__sRj10Jl3Pk]: hasVariant(
                $state,
                "showStartIcon",
                "showStartIcon"
              ),
              [sty.buttonsize_compact__sRj10HYmh]: hasVariant(
                $state,
                "size",
                "compact"
              ),
              [sty.buttonsize_compact_showStartIcon__sRj10HYmhJl3Pk]:
                hasVariant($state, "size", "compact") &&
                hasVariant($state, "showStartIcon", "showStartIcon"),
              [sty.buttonsize_minimal__sRj10Vc1Ed]: hasVariant(
                $state,
                "size",
                "minimal"
              ),
              [sty.buttonsize_minimal_color_link__sRj10Vc1EdZ8DhY]:
                hasVariant($state, "color", "link") &&
                hasVariant($state, "size", "minimal")
            }
          )}
        >
          {(
            hasVariant($state, "showStartIcon", "showStartIcon") ? true : false
          ) ? (
            <div
              data-plasmic-name={"startIconContainer2"}
              data-plasmic-override={overrides.startIconContainer2}
              className={classNames(projectcss.all, sty.startIconContainer2, {
                [sty.startIconContainer2color_blue]: hasVariant(
                  $state,
                  "color",
                  "blue"
                ),
                [sty.startIconContainer2shape_rounded_showStartIcon]:
                  hasVariant($state, "shape", "rounded") &&
                  hasVariant($state, "showStartIcon", "showStartIcon"),
                [sty.startIconContainer2showStartIcon]: hasVariant(
                  $state,
                  "showStartIcon",
                  "showStartIcon"
                )
              })}
            >
              {renderPlasmicSlot({
                defaultContents: (
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__wXmXb)}
                    role={"img"}
                  />
                ),

                value: args.startIcon2,
                className: classNames(sty.slotTargetStartIcon2, {
                  [sty.slotTargetStartIcon2color_blue]: hasVariant(
                    $state,
                    "color",
                    "blue"
                  ),
                  [sty.slotTargetStartIcon2color_clear]: hasVariant(
                    $state,
                    "color",
                    "clear"
                  ),
                  [sty.slotTargetStartIcon2color_link]: hasVariant(
                    $state,
                    "color",
                    "link"
                  ),
                  [sty.slotTargetStartIcon2color_softBlue]: hasVariant(
                    $state,
                    "color",
                    "softBlue"
                  ),
                  [sty.slotTargetStartIcon2color_softGreen]: hasVariant(
                    $state,
                    "color",
                    "softGreen"
                  ),
                  [sty.slotTargetStartIcon2color_softRed]: hasVariant(
                    $state,
                    "color",
                    "softRed"
                  ),
                  [sty.slotTargetStartIcon2color_softSand]: hasVariant(
                    $state,
                    "color",
                    "softSand"
                  ),
                  [sty.slotTargetStartIcon2color_softYellow]: hasVariant(
                    $state,
                    "color",
                    "softYellow"
                  ),
                  [sty.slotTargetStartIcon2color_white]: hasVariant(
                    $state,
                    "color",
                    "white"
                  ),
                  [sty.slotTargetStartIcon2color_yellow]: hasVariant(
                    $state,
                    "color",
                    "yellow"
                  ),
                  [sty.slotTargetStartIcon2showStartIcon]: hasVariant(
                    $state,
                    "showStartIcon",
                    "showStartIcon"
                  )
                })
              })}
            </div>
          ) : null}
          <div
            data-plasmic-name={"contentContainer2"}
            data-plasmic-override={overrides.contentContainer2}
            className={classNames(projectcss.all, sty.contentContainer2, {
              [sty.contentContainer2___focusVisibleWithin]:
                triggers.focusVisibleWithin_root,
              [sty.contentContainer2isDisabled]: hasVariant(
                $state,
                "isDisabled",
                "isDisabled"
              ),
              [sty.contentContainer2shape_rounded]: hasVariant(
                $state,
                "shape",
                "rounded"
              ),
              [sty.contentContainer2showEndIcon]: hasVariant(
                $state,
                "showEndIcon",
                "showEndIcon"
              )
            })}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vcD23
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700, color: "#FFFFFF" }}
                    >
                      {"Button"}
                    </span>
                  </React.Fragment>
                </div>
              ),

              value: args.children2,
              className: classNames(sty.slotTargetChildren2, {
                [sty.slotTargetChildren2___focusVisibleWithin]:
                  triggers.focusVisibleWithin_root,
                [sty.slotTargetChildren2color_blue]: hasVariant(
                  $state,
                  "color",
                  "blue"
                ),
                [sty.slotTargetChildren2color_clear]: hasVariant(
                  $state,
                  "color",
                  "clear"
                ),
                [sty.slotTargetChildren2color_green]: hasVariant(
                  $state,
                  "color",
                  "green"
                ),
                [sty.slotTargetChildren2color_link]: hasVariant(
                  $state,
                  "color",
                  "link"
                ),
                [sty.slotTargetChildren2color_red]: hasVariant(
                  $state,
                  "color",
                  "red"
                ),
                [sty.slotTargetChildren2color_sand]: hasVariant(
                  $state,
                  "color",
                  "sand"
                ),
                [sty.slotTargetChildren2color_softBlue]: hasVariant(
                  $state,
                  "color",
                  "softBlue"
                ),
                [sty.slotTargetChildren2color_softGreen]: hasVariant(
                  $state,
                  "color",
                  "softGreen"
                ),
                [sty.slotTargetChildren2color_softRed]: hasVariant(
                  $state,
                  "color",
                  "softRed"
                ),
                [sty.slotTargetChildren2color_softSand]: hasVariant(
                  $state,
                  "color",
                  "softSand"
                ),
                [sty.slotTargetChildren2color_softYellow]: hasVariant(
                  $state,
                  "color",
                  "softYellow"
                ),
                [sty.slotTargetChildren2color_white]: hasVariant(
                  $state,
                  "color",
                  "white"
                ),
                [sty.slotTargetChildren2color_yellow]: hasVariant(
                  $state,
                  "color",
                  "yellow"
                ),
                [sty.slotTargetChildren2isDisabled]: hasVariant(
                  $state,
                  "isDisabled",
                  "isDisabled"
                ),
                [sty.slotTargetChildren2shape_rounded]: hasVariant(
                  $state,
                  "shape",
                  "rounded"
                ),
                [sty.slotTargetChildren2showEndIcon]: hasVariant(
                  $state,
                  "showEndIcon",
                  "showEndIcon"
                ),
                [sty.slotTargetChildren2showStartIcon]: hasVariant(
                  $state,
                  "showStartIcon",
                  "showStartIcon"
                ),
                [sty.slotTargetChildren2size_minimal]: hasVariant(
                  $state,
                  "size",
                  "minimal"
                ),
                [sty.slotTargetChildren2size_minimal_color_link]:
                  hasVariant($state, "color", "link") &&
                  hasVariant($state, "size", "minimal")
              })
            })}
          </div>
          <div
            data-plasmic-name={"endIconContainer2"}
            data-plasmic-override={overrides.endIconContainer2}
            className={classNames(projectcss.all, sty.endIconContainer2, {
              [sty.endIconContainer2color_white]: hasVariant(
                $state,
                "color",
                "white"
              ),
              [sty.endIconContainer2color_yellow]: hasVariant(
                $state,
                "color",
                "yellow"
              ),
              [sty.endIconContainer2showEndIcon]: hasVariant(
                $state,
                "showEndIcon",
                "showEndIcon"
              )
            })}
          >
            {false
              ? renderPlasmicSlot({
                  defaultContents: (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__czOv7)}
                      role={"img"}
                    />
                  ),

                  value: args.endIcon2,
                  className: classNames(sty.slotTargetEndIcon2, {
                    [sty.slotTargetEndIcon2color_clear]: hasVariant(
                      $state,
                      "color",
                      "clear"
                    ),
                    [sty.slotTargetEndIcon2color_link]: hasVariant(
                      $state,
                      "color",
                      "link"
                    ),
                    [sty.slotTargetEndIcon2color_softBlue]: hasVariant(
                      $state,
                      "color",
                      "softBlue"
                    ),
                    [sty.slotTargetEndIcon2color_softGreen]: hasVariant(
                      $state,
                      "color",
                      "softGreen"
                    ),
                    [sty.slotTargetEndIcon2color_softRed]: hasVariant(
                      $state,
                      "color",
                      "softRed"
                    ),
                    [sty.slotTargetEndIcon2color_softSand]: hasVariant(
                      $state,
                      "color",
                      "softSand"
                    ),
                    [sty.slotTargetEndIcon2color_softYellow]: hasVariant(
                      $state,
                      "color",
                      "softYellow"
                    ),
                    [sty.slotTargetEndIcon2color_white]: hasVariant(
                      $state,
                      "color",
                      "white"
                    ),
                    [sty.slotTargetEndIcon2color_yellow]: hasVariant(
                      $state,
                      "color",
                      "yellow"
                    ),
                    [sty.slotTargetEndIcon2showEndIcon]: hasVariant(
                      $state,
                      "showEndIcon",
                      "showEndIcon"
                    )
                  })
                })
              : null}
          </div>
        </Stack__>
      ) : null}
      {false ? (
        <Stack__
          as={"button"}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.button,
            sty.button__ogJvL,
            {
              [sty.button___focusVisibleWithin__ogJvLopjw3]:
                triggers.focusVisibleWithin_root,
              [sty.buttoncolor_blue__ogJvLcnqoE]: hasVariant(
                $state,
                "color",
                "blue"
              ),
              [sty.buttoncolor_clear__ogJvLxs0Fs]: hasVariant(
                $state,
                "color",
                "clear"
              ),
              [sty.buttoncolor_green__ogJvLv6H1J]: hasVariant(
                $state,
                "color",
                "green"
              ),
              [sty.buttoncolor_link__ogJvLz8DhY]: hasVariant(
                $state,
                "color",
                "link"
              ),
              [sty.buttoncolor_red__ogJvLAz0VA]: hasVariant(
                $state,
                "color",
                "red"
              ),
              [sty.buttoncolor_sand__ogJvL3VQy4]: hasVariant(
                $state,
                "color",
                "sand"
              ),
              [sty.buttoncolor_softBlue__ogJvL0MdWm]: hasVariant(
                $state,
                "color",
                "softBlue"
              ),
              [sty.buttoncolor_softGreen__ogJvLjV44D]: hasVariant(
                $state,
                "color",
                "softGreen"
              ),
              [sty.buttoncolor_softRed__ogJvLnvxpF]: hasVariant(
                $state,
                "color",
                "softRed"
              ),
              [sty.buttoncolor_softSand__ogJvLCu7Lj]: hasVariant(
                $state,
                "color",
                "softSand"
              ),
              [sty.buttoncolor_softYellow__ogJvL4HNqh]: hasVariant(
                $state,
                "color",
                "softYellow"
              ),
              [sty.buttoncolor_white__ogJvLv1XeG]: hasVariant(
                $state,
                "color",
                "white"
              ),
              [sty.buttoncolor_yellow__ogJvLqx83W]: hasVariant(
                $state,
                "color",
                "yellow"
              ),
              [sty.buttonisDisabled__ogJvLvlZp]: hasVariant(
                $state,
                "isDisabled",
                "isDisabled"
              ),
              [sty.buttonshape_round__ogJvLaQ4Hz]: hasVariant(
                $state,
                "shape",
                "round"
              ),
              [sty.buttonshape_round_size_compact__ogJvLaQ4HzHYmh]:
                hasVariant($state, "shape", "round") &&
                hasVariant($state, "size", "compact"),
              [sty.buttonshape_rounded__ogJvL5VLxL]: hasVariant(
                $state,
                "shape",
                "rounded"
              ),
              [sty.buttonshape_rounded_showEndIcon__ogJvL5VLxLFJknh]:
                hasVariant($state, "showEndIcon", "showEndIcon") &&
                hasVariant($state, "shape", "rounded"),
              [sty.buttonshape_rounded_showStartIcon__ogJvL5VLxLJl3Pk]:
                hasVariant($state, "shape", "rounded") &&
                hasVariant($state, "showStartIcon", "showStartIcon"),
              [sty.buttonshape_rounded_size_compact__ogJvL5VLxLHYmh]:
                hasVariant($state, "size", "compact") &&
                hasVariant($state, "shape", "rounded"),
              [sty.buttonshape_sharp__ogJvLCt1Bz]: hasVariant(
                $state,
                "shape",
                "sharp"
              ),
              [sty.buttonshowEndIcon__ogJvLfJknh]: hasVariant(
                $state,
                "showEndIcon",
                "showEndIcon"
              ),
              [sty.buttonshowEndIcon_size_compact__ogJvLfJknhHYmh]:
                hasVariant($state, "size", "compact") &&
                hasVariant($state, "showEndIcon", "showEndIcon"),
              [sty.buttonshowEndIcon_size_compact_showStartIcon__ogJvLfJknhHYmhJl3Pk]:
                hasVariant($state, "size", "compact") &&
                hasVariant($state, "showStartIcon", "showStartIcon") &&
                hasVariant($state, "showEndIcon", "showEndIcon"),
              [sty.buttonshowStartIcon__ogJvLjl3Pk]: hasVariant(
                $state,
                "showStartIcon",
                "showStartIcon"
              ),
              [sty.buttonsize_compact__ogJvLhYmh]: hasVariant(
                $state,
                "size",
                "compact"
              ),
              [sty.buttonsize_compact_showStartIcon__ogJvLhYmhJl3Pk]:
                hasVariant($state, "size", "compact") &&
                hasVariant($state, "showStartIcon", "showStartIcon"),
              [sty.buttonsize_minimal__ogJvLVc1Ed]: hasVariant(
                $state,
                "size",
                "minimal"
              ),
              [sty.buttonsize_minimal_color_link__ogJvLVc1EdZ8DhY]:
                hasVariant($state, "color", "link") &&
                hasVariant($state, "size", "minimal")
            }
          )}
        >
          {(
            hasVariant($state, "showStartIcon", "showStartIcon") ? true : false
          ) ? (
            <div
              data-plasmic-name={"startIconContainer3"}
              data-plasmic-override={overrides.startIconContainer3}
              className={classNames(projectcss.all, sty.startIconContainer3, {
                [sty.startIconContainer3color_blue]: hasVariant(
                  $state,
                  "color",
                  "blue"
                ),
                [sty.startIconContainer3shape_rounded_showStartIcon]:
                  hasVariant($state, "shape", "rounded") &&
                  hasVariant($state, "showStartIcon", "showStartIcon"),
                [sty.startIconContainer3showStartIcon]: hasVariant(
                  $state,
                  "showStartIcon",
                  "showStartIcon"
                )
              })}
            >
              {renderPlasmicSlot({
                defaultContents: (
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__ueUQ)}
                    role={"img"}
                  />
                ),

                value: args.startIcon3,
                className: classNames(sty.slotTargetStartIcon3, {
                  [sty.slotTargetStartIcon3color_blue]: hasVariant(
                    $state,
                    "color",
                    "blue"
                  ),
                  [sty.slotTargetStartIcon3color_clear]: hasVariant(
                    $state,
                    "color",
                    "clear"
                  ),
                  [sty.slotTargetStartIcon3color_link]: hasVariant(
                    $state,
                    "color",
                    "link"
                  ),
                  [sty.slotTargetStartIcon3color_softBlue]: hasVariant(
                    $state,
                    "color",
                    "softBlue"
                  ),
                  [sty.slotTargetStartIcon3color_softGreen]: hasVariant(
                    $state,
                    "color",
                    "softGreen"
                  ),
                  [sty.slotTargetStartIcon3color_softRed]: hasVariant(
                    $state,
                    "color",
                    "softRed"
                  ),
                  [sty.slotTargetStartIcon3color_softSand]: hasVariant(
                    $state,
                    "color",
                    "softSand"
                  ),
                  [sty.slotTargetStartIcon3color_softYellow]: hasVariant(
                    $state,
                    "color",
                    "softYellow"
                  ),
                  [sty.slotTargetStartIcon3color_white]: hasVariant(
                    $state,
                    "color",
                    "white"
                  ),
                  [sty.slotTargetStartIcon3color_yellow]: hasVariant(
                    $state,
                    "color",
                    "yellow"
                  ),
                  [sty.slotTargetStartIcon3showStartIcon]: hasVariant(
                    $state,
                    "showStartIcon",
                    "showStartIcon"
                  )
                })
              })}
            </div>
          ) : null}
          <div
            data-plasmic-name={"contentContainer3"}
            data-plasmic-override={overrides.contentContainer3}
            className={classNames(projectcss.all, sty.contentContainer3, {
              [sty.contentContainer3___focusVisibleWithin]:
                triggers.focusVisibleWithin_root,
              [sty.contentContainer3isDisabled]: hasVariant(
                $state,
                "isDisabled",
                "isDisabled"
              ),
              [sty.contentContainer3shape_rounded]: hasVariant(
                $state,
                "shape",
                "rounded"
              ),
              [sty.contentContainer3showEndIcon]: hasVariant(
                $state,
                "showEndIcon",
                "showEndIcon"
              )
            })}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lqk3Z
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700, color: "#FFFFFF" }}
                    >
                      {"Button"}
                    </span>
                  </React.Fragment>
                </div>
              ),

              value: args.children3,
              className: classNames(sty.slotTargetChildren3, {
                [sty.slotTargetChildren3___focusVisibleWithin]:
                  triggers.focusVisibleWithin_root,
                [sty.slotTargetChildren3color_blue]: hasVariant(
                  $state,
                  "color",
                  "blue"
                ),
                [sty.slotTargetChildren3color_clear]: hasVariant(
                  $state,
                  "color",
                  "clear"
                ),
                [sty.slotTargetChildren3color_green]: hasVariant(
                  $state,
                  "color",
                  "green"
                ),
                [sty.slotTargetChildren3color_link]: hasVariant(
                  $state,
                  "color",
                  "link"
                ),
                [sty.slotTargetChildren3color_red]: hasVariant(
                  $state,
                  "color",
                  "red"
                ),
                [sty.slotTargetChildren3color_sand]: hasVariant(
                  $state,
                  "color",
                  "sand"
                ),
                [sty.slotTargetChildren3color_softBlue]: hasVariant(
                  $state,
                  "color",
                  "softBlue"
                ),
                [sty.slotTargetChildren3color_softGreen]: hasVariant(
                  $state,
                  "color",
                  "softGreen"
                ),
                [sty.slotTargetChildren3color_softRed]: hasVariant(
                  $state,
                  "color",
                  "softRed"
                ),
                [sty.slotTargetChildren3color_softSand]: hasVariant(
                  $state,
                  "color",
                  "softSand"
                ),
                [sty.slotTargetChildren3color_softYellow]: hasVariant(
                  $state,
                  "color",
                  "softYellow"
                ),
                [sty.slotTargetChildren3color_white]: hasVariant(
                  $state,
                  "color",
                  "white"
                ),
                [sty.slotTargetChildren3color_yellow]: hasVariant(
                  $state,
                  "color",
                  "yellow"
                ),
                [sty.slotTargetChildren3isDisabled]: hasVariant(
                  $state,
                  "isDisabled",
                  "isDisabled"
                ),
                [sty.slotTargetChildren3shape_rounded]: hasVariant(
                  $state,
                  "shape",
                  "rounded"
                ),
                [sty.slotTargetChildren3showEndIcon]: hasVariant(
                  $state,
                  "showEndIcon",
                  "showEndIcon"
                ),
                [sty.slotTargetChildren3showStartIcon]: hasVariant(
                  $state,
                  "showStartIcon",
                  "showStartIcon"
                ),
                [sty.slotTargetChildren3size_minimal]: hasVariant(
                  $state,
                  "size",
                  "minimal"
                ),
                [sty.slotTargetChildren3size_minimal_color_link]:
                  hasVariant($state, "color", "link") &&
                  hasVariant($state, "size", "minimal")
              })
            })}
          </div>
          <div
            data-plasmic-name={"endIconContainer3"}
            data-plasmic-override={overrides.endIconContainer3}
            className={classNames(projectcss.all, sty.endIconContainer3, {
              [sty.endIconContainer3color_white]: hasVariant(
                $state,
                "color",
                "white"
              ),
              [sty.endIconContainer3color_yellow]: hasVariant(
                $state,
                "color",
                "yellow"
              ),
              [sty.endIconContainer3showEndIcon]: hasVariant(
                $state,
                "showEndIcon",
                "showEndIcon"
              )
            })}
          >
            {false
              ? renderPlasmicSlot({
                  defaultContents: (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__nz7Gl)}
                      role={"img"}
                    />
                  ),

                  value: args.endIcon3,
                  className: classNames(sty.slotTargetEndIcon3, {
                    [sty.slotTargetEndIcon3color_clear]: hasVariant(
                      $state,
                      "color",
                      "clear"
                    ),
                    [sty.slotTargetEndIcon3color_link]: hasVariant(
                      $state,
                      "color",
                      "link"
                    ),
                    [sty.slotTargetEndIcon3color_softBlue]: hasVariant(
                      $state,
                      "color",
                      "softBlue"
                    ),
                    [sty.slotTargetEndIcon3color_softGreen]: hasVariant(
                      $state,
                      "color",
                      "softGreen"
                    ),
                    [sty.slotTargetEndIcon3color_softRed]: hasVariant(
                      $state,
                      "color",
                      "softRed"
                    ),
                    [sty.slotTargetEndIcon3color_softSand]: hasVariant(
                      $state,
                      "color",
                      "softSand"
                    ),
                    [sty.slotTargetEndIcon3color_softYellow]: hasVariant(
                      $state,
                      "color",
                      "softYellow"
                    ),
                    [sty.slotTargetEndIcon3color_white]: hasVariant(
                      $state,
                      "color",
                      "white"
                    ),
                    [sty.slotTargetEndIcon3color_yellow]: hasVariant(
                      $state,
                      "color",
                      "yellow"
                    ),
                    [sty.slotTargetEndIcon3showEndIcon]: hasVariant(
                      $state,
                      "showEndIcon",
                      "showEndIcon"
                    )
                  })
                })
              : null}
          </div>
        </Stack__>
      ) : null}
    </Stack__>
  );
}

function useBehavior(props, ref) {
  const b = pp.useButton(
    PlasmicButton,
    props,
    {
      showStartIconVariant: {
        group: "showStartIcon",
        variant: "showStartIcon"
      },
      showEndIconVariant: { group: "showEndIcon", variant: "showEndIcon" },
      isDisabledVariant: { group: "isDisabled", variant: "isDisabled" },
      contentSlot: "children",
      startIconSlot: "startIcon",
      endIconSlot: "endIcon",
      root: "root"
    },
    ref
  );
  return b;
}

const PlasmicDescendants = {
  root: [
    "root",
    "startIconContainer",
    "contentContainer",
    "endIconContainer",
    "startIconContainer2",
    "contentContainer2",
    "endIconContainer2",
    "startIconContainer3",
    "contentContainer3",
    "endIconContainer3"
  ],

  startIconContainer: ["startIconContainer"],
  contentContainer: ["contentContainer"],
  endIconContainer: ["endIconContainer"],
  startIconContainer2: ["startIconContainer2"],
  contentContainer2: ["contentContainer2"],
  endIconContainer2: ["endIconContainer2"],
  startIconContainer3: ["startIconContainer3"],
  contentContainer3: ["contentContainer3"],
  endIconContainer3: ["endIconContainer3"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicButton__ArgProps,
          internalVariantPropNames: PlasmicButton__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButton";
  } else {
    func.displayName = `PlasmicButton.${nodeName}`;
  }
  return func;
}

export const PlasmicButton = Object.assign(
  // Top-level PlasmicButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    startIconContainer: makeNodeComponent("startIconContainer"),
    contentContainer: makeNodeComponent("contentContainer"),
    endIconContainer: makeNodeComponent("endIconContainer"),
    startIconContainer2: makeNodeComponent("startIconContainer2"),
    contentContainer2: makeNodeComponent("contentContainer2"),
    endIconContainer2: makeNodeComponent("endIconContainer2"),
    startIconContainer3: makeNodeComponent("startIconContainer3"),
    contentContainer3: makeNodeComponent("contentContainer3"),
    endIconContainer3: makeNodeComponent("endIconContainer3"),
    // Metadata about props expected for PlasmicButton
    internalVariantProps: PlasmicButton__VariantProps,
    internalArgProps: PlasmicButton__ArgProps,
    useBehavior
  }
);

export default PlasmicButton;
/* prettier-ignore-end */
