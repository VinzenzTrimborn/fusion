// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: adU29zJd9uLGW9TewABBsV
// Component: XC59IaIFr3ao
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_fusion_lab.module.css"; // plasmic-import: adU29zJd9uLGW9TewABBsV/projectcss
import sty from "./PlasmicViewBar.module.css"; // plasmic-import: XC59IaIFr3ao/css

createPlasmicElementProxy;

export const PlasmicViewBar__VariantProps = new Array();

export const PlasmicViewBar__ArgProps = new Array();

const $$ = {};

function PlasmicViewBar__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"viewSelectionBar"}
        data-plasmic-override={overrides.viewSelectionBar}
        hasGap={true}
        className={classNames(projectcss.all, sty.viewSelectionBar)}
      >
        <AntdButton
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          className={classNames("__wab_instance", sty.button)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__cXqWt
            )}
          >
            {"View 1"}
          </div>
        </AntdButton>
        <AntdButton
          data-plasmic-name={"frame8715"}
          data-plasmic-override={overrides.frame8715}
          className={classNames("__wab_instance", sty.frame8715)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___1MnaY
            )}
          >
            {"View 2"}
          </div>
        </AntdButton>
        <AntdButton
          data-plasmic-name={"frame8716"}
          data-plasmic-override={overrides.frame8716}
          className={classNames("__wab_instance", sty.frame8716)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vKXbS
            )}
          >
            {"View 3"}
          </div>
        </AntdButton>
        <AntdButton
          data-plasmic-name={"frame8717"}
          data-plasmic-override={overrides.frame8717}
          className={classNames("__wab_instance", sty.frame8717)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__gPyc
            )}
          >
            {"View 4"}
          </div>
        </AntdButton>
        <AntdButton
          data-plasmic-name={"frame8718"}
          data-plasmic-override={overrides.frame8718}
          className={classNames("__wab_instance", sty.frame8718)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__liJrw
            )}
          >
            {"View 5"}
          </div>
        </AntdButton>
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "viewSelectionBar",
    "button",
    "frame8715",
    "frame8716",
    "frame8717",
    "frame8718"
  ],

  viewSelectionBar: [
    "viewSelectionBar",
    "button",
    "frame8715",
    "frame8716",
    "frame8717",
    "frame8718"
  ],

  button: ["button"],
  frame8715: ["frame8715"],
  frame8716: ["frame8716"],
  frame8717: ["frame8717"],
  frame8718: ["frame8718"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicViewBar__ArgProps,
          internalVariantPropNames: PlasmicViewBar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicViewBar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicViewBar";
  } else {
    func.displayName = `PlasmicViewBar.${nodeName}`;
  }
  return func;
}

export const PlasmicViewBar = Object.assign(
  // Top-level PlasmicViewBar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    viewSelectionBar: makeNodeComponent("viewSelectionBar"),
    button: makeNodeComponent("button"),
    frame8715: makeNodeComponent("frame8715"),
    frame8716: makeNodeComponent("frame8716"),
    frame8717: makeNodeComponent("frame8717"),
    frame8718: makeNodeComponent("frame8718"),
    // Metadata about props expected for PlasmicViewBar
    internalVariantProps: PlasmicViewBar__VariantProps,
    internalArgProps: PlasmicViewBar__ArgProps
  }
);

export default PlasmicViewBar;
/* prettier-ignore-end */
