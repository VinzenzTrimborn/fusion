// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: adU29zJd9uLGW9TewABBsV
// Component: kt1oJ-MMekfG
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_fusion_lab.module.css"; // plasmic-import: adU29zJd9uLGW9TewABBsV/projectcss
import sty from "./PlasmicAnalysisCarousel.module.css"; // plasmic-import: kt1oJ-MMekfG/css
import closeWhite36Dp1RrVeLvbYQpRj from "./images/closeWhite36Dp1.svg"; // plasmic-import: RrVeLvbYQpRJ/picture
import rectangle3174TXk3Gwlex5Fc from "./images/rectangle3174.jpg"; // plasmic-import: tXk3GWLEX5Fc/picture
import picture4GifZRolBchIqStm from "./images/picture4Gif.gif"; // plasmic-import: ZRolBCHIqSTM/picture
import rectangle3185Cy33Bese3Vn from "./images/rectangle3185.png"; // plasmic-import: Cy_33BESE3VN/picture
import rectangle3184PLp1UhPvk5F from "./images/rectangle3184.jpg"; // plasmic-import: pLP1uh-PVK5F/picture
import rectangle3183PyZ6JQpozfpp from "./images/rectangle3183.jpg"; // plasmic-import: pyZ6JQpozfpp/picture
import rectangle3175XJq2VvylRzOp from "./images/rectangle3175.png"; // plasmic-import: xJq2VVYLRzOP/picture

createPlasmicElementProxy;

export const PlasmicAnalysisCarousel__VariantProps = new Array("analysis");

export const PlasmicAnalysisCarousel__ArgProps = new Array("render4");

const $$ = {};

function PlasmicAnalysisCarousel__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          render4: 2
        },
        props.args
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "analysis", "a6")
            ? 5
            : hasVariant($state, "analysis", "a5")
            ? 4
            : hasVariant($state, "analysis", "a4")
            ? 3
            : hasVariant($state, "analysis", "a3")
            ? 2
            : hasVariant($state, "analysis", "a2")
            ? 1
            : hasVariant($state, "analysis", "a1")
            ? 0
            : 0,
        refName: "sliderCarousel",
        onMutate: p.generateOnMutateForSpec(
          "currentSlide",
          SliderWrapper_Helpers
        )
      },
      {
        path: "analysis",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.analysis
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootanalysis_a1]: hasVariant($state, "analysis", "a1"),
          [sty.rootanalysis_a2]: hasVariant($state, "analysis", "a2"),
          [sty.rootanalysis_a3]: hasVariant($state, "analysis", "a3"),
          [sty.rootanalysis_a4]: hasVariant($state, "analysis", "a4"),
          [sty.rootanalysis_a5]: hasVariant($state, "analysis", "a5"),
          [sty.rootanalysis_a6]: hasVariant($state, "analysis", "a6")
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__eAxG, {
          [sty.freeBoxanalysis_a2__eAxG7ZTqA]: hasVariant(
            $state,
            "analysis",
            "a2"
          )
        })}
      >
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__bAt4)}
          displayHeight={"36px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"36px"}
          loading={"lazy"}
          onClick={async event => {
            const $steps = {};
            $steps["goToGallery"] = true
              ? (() => {
                  const actionArgs = { destination: `/project_details` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      location.assign(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToGallery"] != null &&
              typeof $steps["goToGallery"] === "object" &&
              typeof $steps["goToGallery"].then === "function"
            ) {
              $steps["goToGallery"] = await $steps["goToGallery"];
            }
          }}
          src={{
            src: closeWhite36Dp1RrVeLvbYQpRj,
            fullWidth: 36,
            fullHeight: 36,
            aspectRatio: 1
          }}
        />
      </div>
      {(() => {
        const child$Props = {
          arrowColor: true ? "var(--antd-colorPrimaryText)" : undefined,
          beforeChange: p.generateStateOnChangePropForCodeComponents(
            $state,
            "currentSlide",
            ["sliderCarousel", "currentSlide"],
            SliderWrapper_Helpers
          ),
          centerMode: true,
          className: classNames("__wab_instance", sty.sliderCarousel, {
            [sty.sliderCarouselanalysis_a1]: hasVariant(
              $state,
              "analysis",
              "a1"
            ),
            [sty.sliderCarouselanalysis_a2]: hasVariant(
              $state,
              "analysis",
              "a2"
            ),
            [sty.sliderCarouselanalysis_a3]: hasVariant(
              $state,
              "analysis",
              "a3"
            ),
            [sty.sliderCarouselanalysis_a4]: hasVariant(
              $state,
              "analysis",
              "a4"
            ),
            [sty.sliderCarouselanalysis_a5]: hasVariant(
              $state,
              "analysis",
              "a5"
            ),
            [sty.sliderCarouselanalysis_a6]: hasVariant(
              $state,
              "analysis",
              "a6"
            )
          }),
          initialSlide: p.generateStateValueProp($state, [
            "sliderCarousel",
            "currentSlide"
          ]),
          ref: ref => {
            $refs["sliderCarousel"] = ref;
          },
          sliderScopeClassName: sty["sliderCarousel__slider"]
        };
        p.initializeCodeComponentStates(
          $state,
          [
            {
              name: "currentSlide",
              plasmicStateName: "sliderCarousel.currentSlide"
            }
          ],

          [],
          SliderWrapper_Helpers ?? {},
          child$Props
        );
        return (
          <SliderWrapper
            data-plasmic-name={"sliderCarousel"}
            data-plasmic-override={overrides.sliderCarousel}
            {...child$Props}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__eBaLv, {
                [sty.freeBoxanalysis_a2__eBaLv7ZTqA]: hasVariant(
                  $state,
                  "analysis",
                  "a2"
                )
              })}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__aUmrW, {
                  [sty.imganalysis_a1__aUmrWk7SmL]: hasVariant(
                    $state,
                    "analysis",
                    "a1"
                  ),
                  [sty.imganalysis_a2__aUmrW7ZTqA]: hasVariant(
                    $state,
                    "analysis",
                    "a2"
                  ),
                  [sty.imganalysis_a6__aUmrWajah8]: hasVariant(
                    $state,
                    "analysis",
                    "a6"
                  )
                })}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={{
                  src: rectangle3174TXk3Gwlex5Fc,
                  fullWidth: 516,
                  fullHeight: 289,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__jw3Ub)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__q8QeK, {
                  [sty.imganalysis_a2__q8QeK7ZTqA]: hasVariant(
                    $state,
                    "analysis",
                    "a2"
                  ),
                  [sty.imganalysis_a3__q8QeKm15D]: hasVariant(
                    $state,
                    "analysis",
                    "a3"
                  )
                })}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={{
                  src: picture4GifZRolBchIqStm,
                  fullWidth: 480,
                  fullHeight: 285,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__gjtnH, {
                [sty.freeBoxanalysis_a2__gjtnH7ZTqA]: hasVariant(
                  $state,
                  "analysis",
                  "a2"
                )
              })}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__qloD8, {
                  [sty.imganalysis_a2__qloD87ZTqA]: hasVariant(
                    $state,
                    "analysis",
                    "a2"
                  )
                })}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={{
                  src: rectangle3185Cy33Bese3Vn,
                  fullWidth: 1372,
                  fullHeight: 581,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__cvSml)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__eaze)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                src={{
                  src: rectangle3184PLp1UhPvk5F,
                  fullWidth: 1920,
                  fullHeight: 1080,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__rHy9H, {
                [sty.freeBoxanalysis_a2__rHy9H7ZTqA]: hasVariant(
                  $state,
                  "analysis",
                  "a2"
                )
              })}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__qr3Pz, {
                  [sty.imganalysis_a2__qr3Pz7ZTqA]: hasVariant(
                    $state,
                    "analysis",
                    "a2"
                  )
                })}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                src={{
                  src: rectangle3183PyZ6JQpozfpp,
                  fullWidth: 1920,
                  fullHeight: 1080,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___09Ont)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__fpcP, {
                  [sty.imganalysis_a6__fpcPAjah8]: hasVariant(
                    $state,
                    "analysis",
                    "a6"
                  )
                })}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                src={{
                  src: rectangle3175XJq2VvylRzOp,
                  fullWidth: 143,
                  fullHeight: 272,
                  aspectRatio: undefined
                }}
              />
            </div>
          </SliderWrapper>
        );
      })()}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "sliderCarousel"],
  sliderCarousel: ["sliderCarousel"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAnalysisCarousel__ArgProps,
          internalVariantPropNames: PlasmicAnalysisCarousel__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAnalysisCarousel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAnalysisCarousel";
  } else {
    func.displayName = `PlasmicAnalysisCarousel.${nodeName}`;
  }
  return func;
}

export const PlasmicAnalysisCarousel = Object.assign(
  // Top-level PlasmicAnalysisCarousel renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    // Metadata about props expected for PlasmicAnalysisCarousel
    internalVariantProps: PlasmicAnalysisCarousel__VariantProps,
    internalArgProps: PlasmicAnalysisCarousel__ArgProps
  }
);

export default PlasmicAnalysisCarousel;
/* prettier-ignore-end */
