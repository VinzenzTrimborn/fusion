// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: adU29zJd9uLGW9TewABBsV
// Component: CBJOAaymFywq
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_fusion_lab.module.css"; // plasmic-import: adU29zJd9uLGW9TewABBsV/projectcss
import sty from "./PlasmicViewerAnnotation.module.css"; // plasmic-import: CBJOAaymFywq/css
import layout3PopUppngPQuGwnoEoieY from "./images/layout3PopUppng.png"; // plasmic-import: pQuGwnoEoieY/picture
import layoutPopUp2PngRvBzf5OSPi3J from "./images/layoutPopUp2Png.png"; // plasmic-import: rvBZF5oSPi3j/picture
import layout1PopUppngI0WjXKLs7G0 from "./images/layout1PopUppng.png"; // plasmic-import: i0WjX-KLs7g0/picture
import layout5PopUppngYXLuFbMe0L4B from "./images/layout5PopUppng.png"; // plasmic-import: yXLuFbMe0l4B/picture
import layout4PopUppngQhe8Xvd1ZBjL from "./images/layout4PopUppng.png"; // plasmic-import: QHE8XVD1zBjL/picture

createPlasmicElementProxy;

export const PlasmicViewerAnnotation__VariantProps = new Array("activities");

export const PlasmicViewerAnnotation__ArgProps = new Array();

const $$ = {};

function PlasmicViewerAnnotation__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "activities",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.activities
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <PlasmicImg__
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img, {
          [sty.imgactivities_climbing]: hasVariant(
            $state,
            "activities",
            "climbing"
          ),
          [sty.imgactivities_market]: hasVariant(
            $state,
            "activities",
            "market"
          ),
          [sty.imgactivities_open]: hasVariant($state, "activities", "open"),
          [sty.imgactivities_skate]: hasVariant($state, "activities", "skate")
        })}
        displayHeight={"auto"}
        displayMaxHeight={"none"}
        displayMaxWidth={"100%"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={"auto"}
        loading={"lazy"}
        src={
          hasVariant($state, "activities", "market")
            ? {
                src: layout4PopUppngQhe8Xvd1ZBjL,
                fullWidth: 1023,
                fullHeight: 1035,
                aspectRatio: undefined
              }
            : hasVariant($state, "activities", "open")
            ? {
                src: layout5PopUppngYXLuFbMe0L4B,
                fullWidth: 1023,
                fullHeight: 1035,
                aspectRatio: undefined
              }
            : hasVariant($state, "activities", "climbing")
            ? {
                src: layout1PopUppngI0WjXKLs7G0,
                fullWidth: 1023,
                fullHeight: 1035,
                aspectRatio: undefined
              }
            : hasVariant($state, "activities", "skate")
            ? {
                src: layoutPopUp2PngRvBzf5OSPi3J,
                fullWidth: 1023,
                fullHeight: 1035,
                aspectRatio: undefined
              }
            : {
                src: layout3PopUppngPQuGwnoEoieY,
                fullWidth: 1023,
                fullHeight: 1035,
                aspectRatio: undefined
              }
        }
      />
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicViewerAnnotation__ArgProps,
          internalVariantPropNames: PlasmicViewerAnnotation__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicViewerAnnotation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicViewerAnnotation";
  } else {
    func.displayName = `PlasmicViewerAnnotation.${nodeName}`;
  }
  return func;
}

export const PlasmicViewerAnnotation = Object.assign(
  // Top-level PlasmicViewerAnnotation renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicViewerAnnotation
    internalVariantProps: PlasmicViewerAnnotation__VariantProps,
    internalArgProps: PlasmicViewerAnnotation__ArgProps
  }
);

export default PlasmicViewerAnnotation;
/* prettier-ignore-end */
