// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: adU29zJd9uLGW9TewABBsV
// Component: XEbKwQNWctlp
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_fusion_lab.module.css"; // plasmic-import: adU29zJd9uLGW9TewABBsV/projectcss
import sty from "./PlasmicQuestionnaireIntro.module.css"; // plasmic-import: XEbKwQNWctlp/css

createPlasmicElementProxy;

export const PlasmicQuestionnaireIntro__VariantProps = new Array();

export const PlasmicQuestionnaireIntro__ArgProps = new Array();

const $$ = {};

function PlasmicQuestionnaireIntro__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"generalFrame"}
        data-plasmic-override={overrides.generalFrame}
        className={classNames(projectcss.all, sty.generalFrame)}
      >
        <div
          data-plasmic-name={"introBox"}
          data-plasmic-override={overrides.introBox}
          className={classNames(projectcss.all, sty.introBox)}
        >
          <div
            data-plasmic-name={"boxArea"}
            data-plasmic-override={overrides.boxArea}
            className={classNames(projectcss.all, sty.boxArea)}
          >
            <div
              data-plasmic-name={"textGroup"}
              data-plasmic-override={overrides.textGroup}
              className={classNames(projectcss.all, sty.textGroup)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__t84Eh
                )}
              >
                {"Thank you for joining us!"}
              </div>
              <div
                data-plasmic-name={"helpUsMore"}
                data-plasmic-override={overrides.helpUsMore}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.helpUsMore
                )}
              >
                {"Help us more "}
              </div>
              <div
                data-plasmic-name={"byFillingInAVeryQuickQuestionnaire"}
                data-plasmic-override={
                  overrides.byFillingInAVeryQuickQuestionnaire
                }
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.byFillingInAVeryQuickQuestionnaire
                )}
              >
                {"by filling in a very quick questionnaire "}
              </div>
              <div
                data-plasmic-name={"button1"}
                data-plasmic-override={overrides.button1}
                className={classNames(projectcss.all, sty.button1)}
              >
                <div
                  data-plasmic-name={"rectangle1"}
                  data-plasmic-override={overrides.rectangle1}
                  className={classNames(projectcss.all, sty.rectangle1)}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jRxe
                  )}
                >
                  {"Back to the feedback page"}
                </div>
              </div>
              <div
                data-plasmic-name={"button2"}
                data-plasmic-override={overrides.button2}
                className={classNames(projectcss.all, sty.button2)}
              >
                <div
                  data-plasmic-name={"rectangle2"}
                  data-plasmic-override={overrides.rectangle2}
                  className={classNames(projectcss.all, sty.rectangle2)}
                />

                <div
                  data-plasmic-name={"answerTheQuestions"}
                  data-plasmic-override={overrides.answerTheQuestions}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.answerTheQuestions
                  )}
                >
                  {"Answer the questions "}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "generalFrame",
    "introBox",
    "boxArea",
    "textGroup",
    "helpUsMore",
    "byFillingInAVeryQuickQuestionnaire",
    "button1",
    "rectangle1",
    "button2",
    "rectangle2",
    "answerTheQuestions"
  ],

  generalFrame: [
    "generalFrame",
    "introBox",
    "boxArea",
    "textGroup",
    "helpUsMore",
    "byFillingInAVeryQuickQuestionnaire",
    "button1",
    "rectangle1",
    "button2",
    "rectangle2",
    "answerTheQuestions"
  ],

  introBox: [
    "introBox",
    "boxArea",
    "textGroup",
    "helpUsMore",
    "byFillingInAVeryQuickQuestionnaire",
    "button1",
    "rectangle1",
    "button2",
    "rectangle2",
    "answerTheQuestions"
  ],

  boxArea: [
    "boxArea",
    "textGroup",
    "helpUsMore",
    "byFillingInAVeryQuickQuestionnaire",
    "button1",
    "rectangle1",
    "button2",
    "rectangle2",
    "answerTheQuestions"
  ],

  textGroup: [
    "textGroup",
    "helpUsMore",
    "byFillingInAVeryQuickQuestionnaire",
    "button1",
    "rectangle1",
    "button2",
    "rectangle2",
    "answerTheQuestions"
  ],

  helpUsMore: ["helpUsMore"],
  byFillingInAVeryQuickQuestionnaire: ["byFillingInAVeryQuickQuestionnaire"],
  button1: ["button1", "rectangle1"],
  rectangle1: ["rectangle1"],
  button2: ["button2", "rectangle2", "answerTheQuestions"],
  rectangle2: ["rectangle2"],
  answerTheQuestions: ["answerTheQuestions"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicQuestionnaireIntro__ArgProps,
          internalVariantPropNames: PlasmicQuestionnaireIntro__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicQuestionnaireIntro__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicQuestionnaireIntro";
  } else {
    func.displayName = `PlasmicQuestionnaireIntro.${nodeName}`;
  }
  return func;
}

export const PlasmicQuestionnaireIntro = Object.assign(
  // Top-level PlasmicQuestionnaireIntro renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    generalFrame: makeNodeComponent("generalFrame"),
    introBox: makeNodeComponent("introBox"),
    boxArea: makeNodeComponent("boxArea"),
    textGroup: makeNodeComponent("textGroup"),
    helpUsMore: makeNodeComponent("helpUsMore"),
    byFillingInAVeryQuickQuestionnaire: makeNodeComponent(
      "byFillingInAVeryQuickQuestionnaire"
    ),
    button1: makeNodeComponent("button1"),
    rectangle1: makeNodeComponent("rectangle1"),
    button2: makeNodeComponent("button2"),
    rectangle2: makeNodeComponent("rectangle2"),
    answerTheQuestions: makeNodeComponent("answerTheQuestions"),
    // Metadata about props expected for PlasmicQuestionnaireIntro
    internalVariantProps: PlasmicQuestionnaireIntro__VariantProps,
    internalArgProps: PlasmicQuestionnaireIntro__ArgProps
  }
);

export default PlasmicQuestionnaireIntro;
/* prettier-ignore-end */
