// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: adU29zJd9uLGW9TewABBsV
// Component: HF0vnKWastHz
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_fusion_lab.module.css"; // plasmic-import: adU29zJd9uLGW9TewABBsV/projectcss
import sty from "./PlasmicProjectInformation.module.css"; // plasmic-import: HF0vnKWastHz/css
import FrameIcon from "./icons/PlasmicIcon__Frame"; // plasmic-import: _icd06TQqTSN/icon
import oigXzteUNbLakGyrjpegLzmdTxtKfDTq from "./images/oigXzteUNbLakGyrjpeg.jpg"; // plasmic-import: LzmdTxtKfDTq/picture
import rectangle3173JHnSZtXoqzEu from "./images/rectangle3173.jpg"; // plasmic-import: jHnSZtXoqzEu/picture
import mapspngZCTzc073FMLq from "./images/mapspng.png"; // plasmic-import: zCTzc073fMLq/picture
import noiseBarrierjpgWqeI69Rs5Ft from "./images/noiseBarrierjpg.jpg"; // plasmic-import: WqeI69-RS5FT/picture
import _91Aa24019464500557C88A8E3458E6D6JpgQekMstDf1Cgu from "./images/_91Aa24019464500557C88A8E3458E6D6Jpg.jpg"; // plasmic-import: QEKMstDF1cgu/picture

createPlasmicElementProxy;

export const PlasmicProjectInformation__VariantProps = new Array();

export const PlasmicProjectInformation__ArgProps = new Array();

const $$ = {};

function PlasmicProjectInformation__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "modal2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "modal3.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "modal4.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__sKec1)}>
        <div className={classNames(projectcss.all, sty.freeBox__z2RrV)}>
          <div
            data-plasmic-name={"featured"}
            data-plasmic-override={overrides.featured}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.featured
            )}
          >
            {"Featured  ideas"}
          </div>
        </div>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___8Medr)}
        >
          <div
            data-plasmic-name={"randomInfoBox"}
            data-plasmic-override={overrides.randomInfoBox}
            className={classNames(projectcss.all, sty.randomInfoBox)}
          >
            <div
              data-plasmic-name={"div2"}
              data-plasmic-override={overrides.div2}
              className={classNames(projectcss.all, sty.div2)}
            >
              <div
                data-plasmic-name={"span"}
                data-plasmic-override={overrides.span}
                className={classNames(projectcss.all, sty.span)}
              >
                <div
                  data-plasmic-name={
                    "dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign1"
                  }
                  data-plasmic-override={
                    overrides.dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign1
                  }
                  className={classNames(
                    projectcss.all,
                    sty.dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign1
                  )}
                  onClick={async event => {
                    const $steps = {};
                    $steps["updateModal2Open"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["modal2", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;
                            p.set(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateModal2Open"] != null &&
                      typeof $steps["updateModal2Open"] === "object" &&
                      typeof $steps["updateModal2Open"].then === "function"
                    ) {
                      $steps["updateModal2Open"] = await $steps[
                        "updateModal2Open"
                      ];
                    }
                  }}
                />
              </div>
            </div>
            <div
              data-plasmic-name={"div"}
              data-plasmic-override={overrides.div}
              className={classNames(projectcss.all, sty.div)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kigQc
                )}
              >
                {"Bridge Activities"}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__mIune)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___903DT
                  )}
                >
                  {
                    "Take a look at the activities possibilites planned for the new bridge "
                  }
                </div>
              </div>
            </div>
            <AntdModal
              data-plasmic-name={"modal2"}
              data-plasmic-override={overrides.modal2}
              className={classNames("__wab_instance", sty.modal2)}
              defaultStylesClassName={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )}
              hideFooter={true}
              modalScopeClassName={sty["modal2__modal"]}
              onOpenChange={p.generateStateOnChangeProp($state, [
                "modal2",
                "open"
              ])}
              open={p.generateStateValueProp($state, ["modal2", "open"])}
              title={"One interesting idea of an under-the-bridge activity is:"}
              trigger={null}
              width={"700"}
              wrapClassName={classNames({ [sty["pcls_AGwuFz2W_3Q0"]]: true })}
            >
              <div className={classNames(projectcss.all, sty.freeBox__y0If)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__jha8T)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__eeTb1)}
                    displayHeight={"421px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"244px"}
                    loading={"lazy"}
                    src={{
                      src: oigXzteUNbLakGyrjpegLzmdTxtKfDTq,
                      fullWidth: 1024,
                      fullHeight: 1024,
                      aspectRatio: undefined
                    }}
                  />
                </p.Stack>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ebDi5)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9HIe
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700, color: "#1677ff" }}
                      >
                        {"Dedicated skating area in the neighborhood"}
                      </span>
                      <React.Fragment>
                        {
                          "\n \nThe skatepark stands out as one of the few activities that seamlessly blend with the unique environment beneath the bridge. Positioned strategically, it is situated adjacent to the bridge's sidewalks, easily accessible via a carefully placed ramp. Visitors can smoothly transition from the top of the bridge, traversing the ramp while observing skaters in action and admiring the graffiti adorning the columns. The thoughtful placement of the ramp ensures a clear separation from the bicycle lane, allowing cyclists to enjoy a dedicated path that leads under the bridge toward the park in the west."
                        }
                      </React.Fragment>
                    </React.Fragment>
                  </div>
                </p.Stack>
              </div>
            </AntdModal>
          </div>
          <div
            data-plasmic-name={"randomInfoBox2"}
            data-plasmic-override={overrides.randomInfoBox2}
            className={classNames(projectcss.all, sty.randomInfoBox2)}
          >
            <div
              data-plasmic-name={"div3"}
              data-plasmic-override={overrides.div3}
              className={classNames(projectcss.all, sty.div3)}
            >
              <div
                data-plasmic-name={"span2"}
                data-plasmic-override={overrides.span2}
                className={classNames(projectcss.all, sty.span2)}
              >
                <div
                  data-plasmic-name={
                    "dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign2"
                  }
                  data-plasmic-override={
                    overrides.dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign2
                  }
                  className={classNames(
                    projectcss.all,
                    sty.dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign2
                  )}
                  onClick={async event => {
                    const $steps = {};
                    $steps["updateModal3Open"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["modal3", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;
                            p.set(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateModal3Open"] != null &&
                      typeof $steps["updateModal3Open"] === "object" &&
                      typeof $steps["updateModal3Open"].then === "function"
                    ) {
                      $steps["updateModal3Open"] = await $steps[
                        "updateModal3Open"
                      ];
                    }
                  }}
                />
              </div>
            </div>
            <div
              data-plasmic-name={"div4"}
              data-plasmic-override={overrides.div4}
              className={classNames(projectcss.all, sty.div4)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__c4Yk5
                )}
              >
                {"Project Renders"}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__x5346)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oQwVo
                  )}
                >
                  {"get a sneak peek of what the new bridge will look like"}
                </div>
              </div>
            </div>
            <AntdModal
              data-plasmic-name={"modal3"}
              data-plasmic-override={overrides.modal3}
              className={classNames("__wab_instance", sty.modal3)}
              defaultStylesClassName={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )}
              hideFooter={true}
              modalScopeClassName={sty["modal3__modal"]}
              onOpenChange={p.generateStateOnChangeProp($state, [
                "modal3",
                "open"
              ])}
              open={p.generateStateValueProp($state, ["modal3", "open"])}
              title={"Here is a view of the newly designed bridge"}
              trigger={null}
              width={"700"}
              wrapClassName={classNames({ [sty["pcls_FuHOq5mhh8U0"]]: true })}
            >
              <div className={classNames(projectcss.all, sty.freeBox__hcGlU)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___8Bz0D)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___8Nmn)}
                    displayHeight={"359px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: rectangle3173JHnSZtXoqzEu,
                      fullWidth: 1920,
                      fullHeight: 1080,
                      aspectRatio: undefined
                    }}
                  />
                </p.Stack>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__knzcr)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__k7PSv
                    )}
                  >
                    {
                      "\nIn conceiving the design for the Donnersberger Bridge, our inspiration was drawn from Munich's architectural essence. Positioned as a symbolic gateway, it pays homage to Munich's historic gates, offering guests a warm welcome and panoramic views of the city and sunset over the railway tracks. The bridge's innovation extends to its structure, where arches supporting the main section double as functional elements. A platform connecting the arches provides a unique viewpoint and activates areas beneath the bridge, transforming parking lots into engaging spaces."
                    }
                  </div>
                </p.Stack>
              </div>
            </AntdModal>
          </div>
          <div
            data-plasmic-name={"randomInfoBox3"}
            data-plasmic-override={overrides.randomInfoBox3}
            className={classNames(projectcss.all, sty.randomInfoBox3)}
          >
            <div
              data-plasmic-name={"div5"}
              data-plasmic-override={overrides.div5}
              className={classNames(projectcss.all, sty.div5)}
            >
              <div
                data-plasmic-name={"span3"}
                data-plasmic-override={overrides.span3}
                className={classNames(projectcss.all, sty.span3)}
              >
                <div
                  data-plasmic-name={
                    "dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign3"
                  }
                  data-plasmic-override={
                    overrides.dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign3
                  }
                  className={classNames(
                    projectcss.all,
                    sty.dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign3
                  )}
                  onClick={async event => {
                    const $steps = {};
                    $steps["updateModal4Open"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["modal4", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;
                            p.set(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateModal4Open"] != null &&
                      typeof $steps["updateModal4Open"] === "object" &&
                      typeof $steps["updateModal4Open"].then === "function"
                    ) {
                      $steps["updateModal4Open"] = await $steps[
                        "updateModal4Open"
                      ];
                    }
                  }}
                />
              </div>
            </div>
            <div
              data-plasmic-name={"div6"}
              data-plasmic-override={overrides.div6}
              className={classNames(projectcss.all, sty.div6)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___6Zt82
                )}
              >
                {"Affected Areas"}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___8CuRa)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rXtKq
                  )}
                >
                  {"See which areas will be influenced by construction"}
                </div>
              </div>
            </div>
            <AntdModal
              data-plasmic-name={"modal4"}
              data-plasmic-override={overrides.modal4}
              className={classNames("__wab_instance", sty.modal4)}
              defaultStylesClassName={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )}
              hideFooter={true}
              modalScopeClassName={sty["modal4__modal"]}
              onOpenChange={p.generateStateOnChangeProp($state, [
                "modal4",
                "open"
              ])}
              open={p.generateStateValueProp($state, ["modal4", "open"])}
              title={"Affected Areas"}
              trigger={null}
              width={"700"}
              wrapClassName={classNames({ [sty["pcls_wUfiKH09yAif"]]: true })}
            >
              <div className={classNames(projectcss.all, sty.freeBox__lKc5)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__n4Ft1)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__cH9T6)}
                    displayHeight={"359px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: mapspngZCTzc073FMLq,
                      fullWidth: 793,
                      fullHeight: 722,
                      aspectRatio: undefined
                    }}
                  />
                </p.Stack>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__dkc3Y)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wdUxH
                    )}
                  >
                    {
                      "During the year of 2025, the bridge will be going through the demolition and reconstruction process, and these neighbourhoods around its area could be affected traffic and noise-wise. However, the construction process was carefully planned to enable the traffic to never fully stop, with always one lane available for transportation. Regarding the noise, the demolition process was considered focusing on each area at a time (over the rail, north and south regions), which means that each one of these regions won't suffer from noise pollution from the demolition from more than one-month at the time."
                    }
                  </div>
                </p.Stack>
              </div>
            </AntdModal>
          </div>
          <div
            data-plasmic-name={"randomInfoBox4"}
            data-plasmic-override={overrides.randomInfoBox4}
            className={classNames(projectcss.all, sty.randomInfoBox4)}
          >
            <div
              data-plasmic-name={"div7"}
              data-plasmic-override={overrides.div7}
              className={classNames(projectcss.all, sty.div7)}
            >
              <div
                data-plasmic-name={"span4"}
                data-plasmic-override={overrides.span4}
                className={classNames(projectcss.all, sty.span4)}
              >
                <div
                  data-plasmic-name={
                    "dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign4"
                  }
                  data-plasmic-override={
                    overrides.dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign4
                  }
                  className={classNames(
                    projectcss.all,
                    sty.dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign4
                  )}
                  onClick={async event => {
                    const $steps = {};
                    $steps["updateModalOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["modal", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;
                            p.set(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateModalOpen"] != null &&
                      typeof $steps["updateModalOpen"] === "object" &&
                      typeof $steps["updateModalOpen"].then === "function"
                    ) {
                      $steps["updateModalOpen"] = await $steps[
                        "updateModalOpen"
                      ];
                    }
                  }}
                >
                  <div
                    data-plasmic-name={"sustainability"}
                    data-plasmic-override={overrides.sustainability}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.sustainability
                    )}
                  >
                    {"Sustainability"}
                  </div>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"div8"}
              data-plasmic-override={overrides.div8}
              className={classNames(projectcss.all, sty.div8)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__qjiU6)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___5TTZj
                  )}
                >
                  {
                    "see how the new bridge was conceive based on sustainable principles"
                  }
                </div>
              </div>
            </div>
            <AntdModal
              data-plasmic-name={"modal"}
              data-plasmic-override={overrides.modal}
              className={classNames("__wab_instance", sty.modal)}
              defaultStylesClassName={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )}
              hideFooter={true}
              modalScopeClassName={sty["modal__modal"]}
              onOpenChange={p.generateStateOnChangeProp($state, [
                "modal",
                "open"
              ])}
              open={p.generateStateValueProp($state, ["modal", "open"])}
              title={"Two of our ideas that contribute to sustainability are:"}
              trigger={null}
              width={"700"}
              wrapClassName={classNames({ [sty["pcls_LpEPVsl8Vn9z"]]: true })}
            >
              <div className={classNames(projectcss.all, sty.freeBox___0X9Q9)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ipnvq)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__uFznW)}
                    displayHeight={"217px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"244px"}
                    loading={"lazy"}
                    src={{
                      src: noiseBarrierjpgWqeI69Rs5Ft,
                      fullWidth: 639,
                      fullHeight: 741,
                      aspectRatio: undefined
                    }}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___5Eklt)}
                    displayHeight={"223px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"247px"}
                    loading={"lazy"}
                    src={{
                      src: _91Aa24019464500557C88A8E3458E6D6JpgQekMstDf1Cgu,
                      fullWidth: 564,
                      fullHeight: 423,
                      aspectRatio: undefined
                    }}
                  />
                </p.Stack>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__cghuO)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0ClaC
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"Polycarbonate panels"}
                      </span>
                      <React.Fragment>
                        {
                          " are used as sound barrier insulation. It is a lightweight material, easy to install, can reduce noise pollution from road traffic by 50%, without affecting its aesthetics. These sheets are anti-fogging, so they do not limit the view of drivers or residents in a rainy day. Due to their high resistance to impact and weathering, they can last between 15 and 20 years."
                        }
                      </React.Fragment>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nKcRd
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"Bioswales "}
                      </span>
                      <React.Fragment>
                        {
                          "in urban design offer effective stormwater management, enhance water quality, and promote biodiversity. By strategically implementing bioswales along roadways, we mitigate runoff pollution and contribute to sustainable urban environments."
                        }
                      </React.Fragment>
                    </React.Fragment>
                  </div>
                </p.Stack>
              </div>
            </AntdModal>
          </div>
        </p.Stack>
        <div className={classNames(projectcss.all, sty.freeBox__zu2X)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ytqOs
            )}
            onClick={async event => {
              const $steps = {};
              $steps["goToProjectDetails"] = true
                ? (() => {
                    const actionArgs = { destination: `/project_details` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        location.assign(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToProjectDetails"] != null &&
                typeof $steps["goToProjectDetails"] === "object" &&
                typeof $steps["goToProjectDetails"].then === "function"
              ) {
                $steps["goToProjectDetails"] = await $steps[
                  "goToProjectDetails"
                ];
              }
            }}
          >
            {"see more"}
          </div>
          <div
            data-plasmic-name={"svg3"}
            data-plasmic-override={overrides.svg3}
            className={classNames(projectcss.all, sty.svg3)}
          >
            <FrameIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />
          </div>
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "featured",
    "randomInfoBox",
    "div2",
    "span",
    "dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign1",
    "div",
    "modal2",
    "randomInfoBox2",
    "div3",
    "span2",
    "dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign2",
    "div4",
    "modal3",
    "randomInfoBox3",
    "div5",
    "span3",
    "dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign3",
    "div6",
    "modal4",
    "randomInfoBox4",
    "div7",
    "span4",
    "dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign4",
    "sustainability",
    "div8",
    "modal",
    "svg3",
    "svg"
  ],

  featured: ["featured"],
  randomInfoBox: [
    "randomInfoBox",
    "div2",
    "span",
    "dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign1",
    "div",
    "modal2"
  ],

  div2: [
    "div2",
    "span",
    "dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign1"
  ],

  span: [
    "span",
    "dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign1"
  ],

  dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign1:
    [
      "dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign1"
    ],

  div: ["div"],
  modal2: ["modal2"],
  randomInfoBox2: [
    "randomInfoBox2",
    "div3",
    "span2",
    "dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign2",
    "div4",
    "modal3"
  ],

  div3: [
    "div3",
    "span2",
    "dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign2"
  ],

  span2: [
    "span2",
    "dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign2"
  ],

  dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign2:
    [
      "dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign2"
    ],

  div4: ["div4"],
  modal3: ["modal3"],
  randomInfoBox3: [
    "randomInfoBox3",
    "div5",
    "span3",
    "dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign3",
    "div6",
    "modal4"
  ],

  div5: [
    "div5",
    "span3",
    "dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign3"
  ],

  span3: [
    "span3",
    "dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign3"
  ],

  dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign3:
    [
      "dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign3"
    ],

  div6: ["div6"],
  modal4: ["modal4"],
  randomInfoBox4: [
    "randomInfoBox4",
    "div7",
    "span4",
    "dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign4",
    "sustainability",
    "div8",
    "modal"
  ],

  div7: [
    "div7",
    "span4",
    "dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign4",
    "sustainability"
  ],

  span4: [
    "span4",
    "dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign4",
    "sustainability"
  ],

  dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign4:
    [
      "dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign4",
      "sustainability"
    ],

  sustainability: ["sustainability"],
  div8: ["div8"],
  modal: ["modal"],
  svg3: ["svg3", "svg"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProjectInformation__ArgProps,
          internalVariantPropNames: PlasmicProjectInformation__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProjectInformation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProjectInformation";
  } else {
    func.displayName = `PlasmicProjectInformation.${nodeName}`;
  }
  return func;
}

export const PlasmicProjectInformation = Object.assign(
  // Top-level PlasmicProjectInformation renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    featured: makeNodeComponent("featured"),
    randomInfoBox: makeNodeComponent("randomInfoBox"),
    div2: makeNodeComponent("div2"),
    span: makeNodeComponent("span"),
    dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign1:
      makeNodeComponent(
        "dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign1"
      ),
    div: makeNodeComponent("div"),
    modal2: makeNodeComponent("modal2"),
    randomInfoBox2: makeNodeComponent("randomInfoBox2"),
    div3: makeNodeComponent("div3"),
    span2: makeNodeComponent("span2"),
    dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign2:
      makeNodeComponent(
        "dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign2"
      ),
    div4: makeNodeComponent("div4"),
    modal3: makeNodeComponent("modal3"),
    randomInfoBox3: makeNodeComponent("randomInfoBox3"),
    div5: makeNodeComponent("div5"),
    span3: makeNodeComponent("span3"),
    dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign3:
      makeNodeComponent(
        "dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign3"
      ),
    div6: makeNodeComponent("div6"),
    modal4: makeNodeComponent("modal4"),
    randomInfoBox4: makeNodeComponent("randomInfoBox4"),
    div7: makeNodeComponent("div7"),
    span4: makeNodeComponent("span4"),
    dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign4:
      makeNodeComponent(
        "dalle20231228172044AModernBridgeShowcasingContemporaryArchitectureTheBridgeSpansAWideRiverReflectingASleekFuturisticDesign4"
      ),
    sustainability: makeNodeComponent("sustainability"),
    div8: makeNodeComponent("div8"),
    modal: makeNodeComponent("modal"),
    svg3: makeNodeComponent("svg3"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicProjectInformation
    internalVariantProps: PlasmicProjectInformation__VariantProps,
    internalArgProps: PlasmicProjectInformation__ArgProps
  }
);

export default PlasmicProjectInformation;
/* prettier-ignore-end */
