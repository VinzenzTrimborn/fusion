// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: adU29zJd9uLGW9TewABBsV
// Component: v_wMKsIXVD_E
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  hasVariant,
  set as $stateSet,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { Video } from "@plasmicpkgs/plasmic-basic-components";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import ActivityQuestions from "../../ActivityQuestions"; // plasmic-import: BOUoKYlWFZly/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_fusion_lab.module.css"; // plasmic-import: adU29zJd9uLGW9TewABBsV/projectcss
import sty from "./PlasmicGalleryDisplay.module.css"; // plasmic-import: v_wMKsIXVD_E/css
import CloseSvgrepoComsvgIcon from "./icons/PlasmicIcon__CloseSvgrepoComsvg"; // plasmic-import: naIJz5VNedYp/icon
import rectangle3173JHnSZtXoqzEu from "./images/rectangle3173.jpg"; // plasmic-import: jHnSZtXoqzEu/picture
import rectangle3185Cy33Bese3Vn from "./images/rectangle3185.png"; // plasmic-import: Cy_33BESE3VN/picture
import layout3PopUppngPQuGwnoEoieY from "./images/layout3PopUppng.png"; // plasmic-import: pQuGwnoEoieY/picture
import layoutPopUp2PngRvBzf5OSPi3J from "./images/layoutPopUp2Png.png"; // plasmic-import: rvBZF5oSPi3j/picture
import layout1PopUppngI0WjXKLs7G0 from "./images/layout1PopUppng.png"; // plasmic-import: i0WjX-KLs7g0/picture
import layout5PopUppngYXLuFbMe0L4B from "./images/layout5PopUppng.png"; // plasmic-import: yXLuFbMe0l4B/picture
import layout4PopUppngQhe8Xvd1ZBjL from "./images/layout4PopUppng.png"; // plasmic-import: QHE8XVD1zBjL/picture

createPlasmicElementProxy;

export const PlasmicGalleryDisplay__VariantProps = new Array("variants2");

export const PlasmicGalleryDisplay__ArgProps = new Array();

const $$ = {};

function PlasmicGalleryDisplay__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "variants2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.variants2
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "climbs.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "openAct.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "dayMkt.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "variable2",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "topModal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootvariants2_activities]: hasVariant(
            $state,
            "variants2",
            "activities"
          ),
          [sty.rootvariants2_analysis]: hasVariant(
            $state,
            "variants2",
            "analysis"
          ),
          [sty.rootvariants2_renderings]: hasVariant(
            $state,
            "variants2",
            "renderings"
          ),
          [sty.rootvariants2_sketches]: hasVariant(
            $state,
            "variants2",
            "sketches"
          )
        }
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__ro9Er, {
          [sty.freeBoxvariants2_activities__ro9Eroy1JL]: hasVariant(
            $state,
            "variants2",
            "activities"
          ),
          [sty.freeBoxvariants2_analysis__ro9ErW6Kp]: hasVariant(
            $state,
            "variants2",
            "analysis"
          ),
          [sty.freeBoxvariants2_renderings__ro9ErhKtTu]: hasVariant(
            $state,
            "variants2",
            "renderings"
          ),
          [sty.freeBoxvariants2_sketches__ro9Erl9NWu]: hasVariant(
            $state,
            "variants2",
            "sketches"
          )
        })}
      >
        <div
          data-plasmic-name={"description"}
          data-plasmic-override={overrides.description}
          className={classNames(projectcss.all, sty.description, {
            [sty.descriptionvariants2_activities]: hasVariant(
              $state,
              "variants2",
              "activities"
            ),
            [sty.descriptionvariants2_analysis]: hasVariant(
              $state,
              "variants2",
              "analysis"
            ),
            [sty.descriptionvariants2_renderings]: hasVariant(
              $state,
              "variants2",
              "renderings"
            )
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox___6Pbzu, {
              [sty.freeBoxvariants2_activities___6Pbzuoy1JL]: hasVariant(
                $state,
                "variants2",
                "activities"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tn1Ho,
                {
                  [sty.textvariants2_activities__tn1HOoy1JL]: hasVariant(
                    $state,
                    "variants2",
                    "activities"
                  ),
                  [sty.textvariants2_analysis__tn1How6Kp]: hasVariant(
                    $state,
                    "variants2",
                    "analysis"
                  ),
                  [sty.textvariants2_renderings__tn1HOhKtTu]: hasVariant(
                    $state,
                    "variants2",
                    "renderings"
                  )
                }
              )}
            >
              {
                "In conceiving the design for the Donnersberger Bridge, our inspiration was drawn from Munich's architectural essence. Our aim was simple: create a bridge that harmonizes with the city's identity and surroundings. Positioned as a symbolic gateway, it pays homage to Munich's historic gates, offering guests a warm welcome and panoramic views of the city and sunset over the railway tracks.\n\nBeyond aesthetics, our design addresses practical challenges of a bustling traffic hub, incorporating noise cancellation to mirror the dynamic flow of the traffic. The bridge's innovation extends to its structure, where arches supporting the main section double as functional elements. A platform connecting the arches provides a unique viewpoint and activates areas beneath the bridge, transforming parking lots into engaging spaces.\nAs we present this vision, we invite citizens to explore and share insights. Your perspectives are vital in shaping the Donnersberger Bridge, ensuring it stands not only as a structural marvel but also as a community-centric landmark. Join us in envisioning a bridge that reflects Munich's spirit and enhances urban living."
              }
            </div>
          </div>
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox___8HY32, {
            [sty.freeBoxvariants2_activities___8HY32Oy1JL]: hasVariant(
              $state,
              "variants2",
              "activities"
            ),
            [sty.freeBoxvariants2_analysis___8HY32W6Kp]: hasVariant(
              $state,
              "variants2",
              "analysis"
            ),
            [sty.freeBoxvariants2_renderings___8HY32HKtTu]: hasVariant(
              $state,
              "variants2",
              "renderings"
            ),
            [sty.freeBoxvariants2_sketches___8HY32L9NWu]: hasVariant(
              $state,
              "variants2",
              "sketches"
            )
          })}
        >
          <div
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            className={classNames(projectcss.all, sty.navBar, {
              [sty.navBarvariants2_activities]: hasVariant(
                $state,
                "variants2",
                "activities"
              ),
              [sty.navBarvariants2_renderings]: hasVariant(
                $state,
                "variants2",
                "renderings"
              )
            })}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__zq1J7, {
                [sty.freeBoxvariants2_activities__zq1J7Oy1JL]: hasVariant(
                  $state,
                  "variants2",
                  "activities"
                )
              })}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox___8XjHn, {
                  [sty.freeBoxvariants2_activities___8XjHNoy1JL]: hasVariant(
                    $state,
                    "variants2",
                    "activities"
                  )
                })}
                onClick={async event => {
                  const $steps = {};
                  $steps["updateVariants2"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: "variants2",
                          operation: 0,
                          value: "activities"
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }
                          $stateSet($state, vgroup, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateVariants2"] != null &&
                    typeof $steps["updateVariants2"] === "object" &&
                    typeof $steps["updateVariants2"].then === "function"
                  ) {
                    $steps["updateVariants2"] = await $steps["updateVariants2"];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tifKi,
                    {
                      [sty.textvariants2_activities__tifKIoy1JL]: hasVariant(
                        $state,
                        "variants2",
                        "activities"
                      ),
                      [sty.textvariants2_analysis__tifKiw6Kp]: hasVariant(
                        $state,
                        "variants2",
                        "analysis"
                      ),
                      [sty.textvariants2_renderings__tifKIhKtTu]: hasVariant(
                        $state,
                        "variants2",
                        "renderings"
                      ),
                      [sty.textvariants2_sketches__tifKIl9NWu]: hasVariant(
                        $state,
                        "variants2",
                        "sketches"
                      )
                    }
                  )}
                  onClick={async event => {
                    const $steps = {};
                    $steps["updateVariants2"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "variants2",
                            operation: 0,
                            value: "activities"
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }
                            $stateSet($state, vgroup, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateVariants2"] != null &&
                      typeof $steps["updateVariants2"] === "object" &&
                      typeof $steps["updateVariants2"].then === "function"
                    ) {
                      $steps["updateVariants2"] = await $steps[
                        "updateVariants2"
                      ];
                    }
                  }}
                >
                  {"Activities"}
                </div>
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__gJf00, {
                  [sty.freeBoxvariants2_activities__gJf00Oy1JL]: hasVariant(
                    $state,
                    "variants2",
                    "activities"
                  ),
                  [sty.freeBoxvariants2_renderings__gJf00HKtTu]: hasVariant(
                    $state,
                    "variants2",
                    "renderings"
                  )
                })}
                onClick={async event => {
                  const $steps = {};
                  $steps["updateVariants2"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: "variants2",
                          operation: 0,
                          value: "renderings"
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }
                          $stateSet($state, vgroup, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateVariants2"] != null &&
                    typeof $steps["updateVariants2"] === "object" &&
                    typeof $steps["updateVariants2"].then === "function"
                  ) {
                    $steps["updateVariants2"] = await $steps["updateVariants2"];
                  }
                }}
              >
                <div
                  data-plasmic-name={"_3DRenderings"}
                  data-plasmic-override={overrides._3DRenderings}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty._3DRenderings,
                    {
                      [sty._3DRenderingsvariants2_activities]: hasVariant(
                        $state,
                        "variants2",
                        "activities"
                      ),
                      [sty._3DRenderingsvariants2_renderings]: hasVariant(
                        $state,
                        "variants2",
                        "renderings"
                      )
                    }
                  )}
                  onClick={async event => {
                    const $steps = {};
                    $steps["updateVariants2"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "variants2",
                            operation: 0,
                            value: "renderings"
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }
                            $stateSet($state, vgroup, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateVariants2"] != null &&
                      typeof $steps["updateVariants2"] === "object" &&
                      typeof $steps["updateVariants2"].then === "function"
                    ) {
                      $steps["updateVariants2"] = await $steps[
                        "updateVariants2"
                      ];
                    }
                  }}
                >
                  {"Renderings "}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__p3Z4V)}>
                <div
                  data-plasmic-name={"analysis"}
                  data-plasmic-override={overrides.analysis}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.analysis,
                    {
                      [sty.analysisvariants2_analysis]: hasVariant(
                        $state,
                        "variants2",
                        "analysis"
                      ),
                      [sty.analysisvariants2_renderings]: hasVariant(
                        $state,
                        "variants2",
                        "renderings"
                      ),
                      [sty.analysisvariants2_sketches]: hasVariant(
                        $state,
                        "variants2",
                        "sketches"
                      )
                    }
                  )}
                  onClick={async event => {
                    const $steps = {};
                    $steps["updateVariants2"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "variants2",
                            operation: 0,
                            value: "analysis"
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }
                            $stateSet($state, vgroup, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateVariants2"] != null &&
                      typeof $steps["updateVariants2"] === "object" &&
                      typeof $steps["updateVariants2"].then === "function"
                    ) {
                      $steps["updateVariants2"] = await $steps[
                        "updateVariants2"
                      ];
                    }
                  }}
                >
                  {"Analysis "}
                </div>
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__uM7K5, {
                  [sty.freeBoxvariants2_activities__uM7K5Oy1JL]: hasVariant(
                    $state,
                    "variants2",
                    "activities"
                  ),
                  [sty.freeBoxvariants2_sketches__uM7K5L9NWu]: hasVariant(
                    $state,
                    "variants2",
                    "sketches"
                  )
                })}
              >
                <div
                  data-plasmic-name={"sketches"}
                  data-plasmic-override={overrides.sketches}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.sketches,
                    {
                      [sty.sketchesvariants2_activities]: hasVariant(
                        $state,
                        "variants2",
                        "activities"
                      ),
                      [sty.sketchesvariants2_sketches]: hasVariant(
                        $state,
                        "variants2",
                        "sketches"
                      )
                    }
                  )}
                  onClick={async event => {
                    const $steps = {};
                    $steps["updateVariants2"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "variants2",
                            operation: 0,
                            value: "sketches"
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }
                            $stateSet($state, vgroup, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateVariants2"] != null &&
                      typeof $steps["updateVariants2"] === "object" &&
                      typeof $steps["updateVariants2"].then === "function"
                    ) {
                      $steps["updateVariants2"] = await $steps[
                        "updateVariants2"
                      ];
                    }
                  }}
                >
                  {"Sketches "}
                </div>
              </div>
            </Stack__>
          </div>
          <div
            data-plasmic-name={"map"}
            data-plasmic-override={overrides.map}
            className={classNames(projectcss.all, sty.map, {
              [sty.mapvariants2_activities]: hasVariant(
                $state,
                "variants2",
                "activities"
              ),
              [sty.mapvariants2_analysis]: hasVariant(
                $state,
                "variants2",
                "analysis"
              ),
              [sty.mapvariants2_renderings]: hasVariant(
                $state,
                "variants2",
                "renderings"
              ),
              [sty.mapvariants2_sketches]: hasVariant(
                $state,
                "variants2",
                "sketches"
              )
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__hWseI, {
                [sty.freeBoxvariants2_activities__hWseIoy1JL]: hasVariant(
                  $state,
                  "variants2",
                  "activities"
                ),
                [sty.freeBoxvariants2_analysis__hWseIw6Kp]: hasVariant(
                  $state,
                  "variants2",
                  "analysis"
                ),
                [sty.freeBoxvariants2_renderings__hWseIhKtTu]: hasVariant(
                  $state,
                  "variants2",
                  "renderings"
                ),
                [sty.freeBoxvariants2_sketches__hWseIl9NWu]: hasVariant(
                  $state,
                  "variants2",
                  "sketches"
                )
              })}
            />

            <div
              className={classNames(projectcss.all, sty.freeBox___1Xuyc, {
                [sty.freeBoxvariants2_activities___1Xuycoy1JL]: hasVariant(
                  $state,
                  "variants2",
                  "activities"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jSUdx,
                  {
                    [sty.textvariants2_activities__jSUdxoy1JL]: hasVariant(
                      $state,
                      "variants2",
                      "activities"
                    )
                  }
                )}
              >
                {hasVariant($state, "variants2", "activities")
                  ? "Map of the areas designed on top and under the bridge "
                  : "Daylight Open Market"}
              </div>
            </div>
          </div>
          <Video
            data-plasmic-name={"renderedVideo"}
            data-plasmic-override={overrides.renderedVideo}
            autoPlay={true}
            className={classNames("__wab_instance", sty.renderedVideo, {
              [sty.renderedVideovariants2_renderings]: hasVariant(
                $state,
                "variants2",
                "renderings"
              )
            })}
            controls={true}
            loop={true}
            muted={true}
            poster={rectangle3173JHnSZtXoqzEu}
            src={"https://www.youtube.com/watch?v=3fekaeXh4Kw"}
          />

          <Video
            data-plasmic-name={"analysisVideo"}
            data-plasmic-override={overrides.analysisVideo}
            autoPlay={true}
            className={classNames("__wab_instance", sty.analysisVideo, {
              [sty.analysisVideovariants2_analysis]: hasVariant(
                $state,
                "variants2",
                "analysis"
              ),
              [sty.analysisVideovariants2_renderings]: hasVariant(
                $state,
                "variants2",
                "renderings"
              )
            })}
            controls={true}
            loop={true}
            muted={true}
            playsInline={false}
            poster={rectangle3185Cy33Bese3Vn}
            src={"https://www.youtube.com/watch?v=R28ds2l7e9A"}
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__t4Vcl, {
              [sty.freeBoxvariants2_activities__t4Vcloy1JL]: hasVariant(
                $state,
                "variants2",
                "activities"
              ),
              [sty.freeBoxvariants2_analysis__t4VclW6Kp]: hasVariant(
                $state,
                "variants2",
                "analysis"
              ),
              [sty.freeBoxvariants2_renderings__t4VclhKtTu]: hasVariant(
                $state,
                "variants2",
                "renderings"
              ),
              [sty.freeBoxvariants2_sketches__t4Vcll9NWu]: hasVariant(
                $state,
                "variants2",
                "sketches"
              )
            })}
          >
            <div
              data-plasmic-name={"rederingPics"}
              data-plasmic-override={overrides.rederingPics}
              className={classNames(projectcss.all, sty.rederingPics, {
                [sty.rederingPicsvariants2_activities]: hasVariant(
                  $state,
                  "variants2",
                  "activities"
                ),
                [sty.rederingPicsvariants2_analysis]: hasVariant(
                  $state,
                  "variants2",
                  "analysis"
                ),
                [sty.rederingPicsvariants2_renderings]: hasVariant(
                  $state,
                  "variants2",
                  "renderings"
                )
              })}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__oUcD1, {
                  [sty.freeBoxvariants2_renderings__oUcD1HKtTu]: hasVariant(
                    $state,
                    "variants2",
                    "renderings"
                  )
                })}
                onClick={async event => {
                  const $steps = {};
                }}
              />

              <div
                className={classNames(projectcss.all, sty.freeBox__eIf5H, {
                  [sty.freeBoxvariants2_renderings__eIf5HhKtTu]: hasVariant(
                    $state,
                    "variants2",
                    "renderings"
                  )
                })}
                onClick={async event => {
                  const $steps = {};
                }}
              />

              <div
                className={classNames(projectcss.all, sty.freeBox__z7Y3G, {
                  [sty.freeBoxvariants2_renderings__z7Y3GhKtTu]: hasVariant(
                    $state,
                    "variants2",
                    "renderings"
                  )
                })}
                onClick={async event => {
                  const $steps = {};
                }}
              />

              <div
                className={classNames(projectcss.all, sty.freeBox__ka2Hz, {
                  [sty.freeBoxvariants2_renderings__ka2HzhKtTu]: hasVariant(
                    $state,
                    "variants2",
                    "renderings"
                  )
                })}
                onClick={async event => {
                  const $steps = {};
                }}
              />

              <div
                className={classNames(projectcss.all, sty.freeBox__knboa, {
                  [sty.freeBoxvariants2_renderings__knboAhKtTu]: hasVariant(
                    $state,
                    "variants2",
                    "renderings"
                  )
                })}
                onClick={async event => {
                  const $steps = {};
                }}
              />

              <div
                className={classNames(projectcss.all, sty.freeBox__bYPl, {
                  [sty.freeBoxvariants2_renderings__bYPlhKtTu]: hasVariant(
                    $state,
                    "variants2",
                    "renderings"
                  )
                })}
                onClick={async event => {
                  const $steps = {};
                }}
              />
            </div>
            {(
              hasVariant($state, "variants2", "analysis")
                ? true
                : hasVariant($state, "variants2", "renderings")
                ? true
                : false
            ) ? (
              <div
                data-plasmic-name={"analysisPics"}
                data-plasmic-override={overrides.analysisPics}
                className={classNames(projectcss.all, sty.analysisPics, {
                  [sty.analysisPicsvariants2_analysis]: hasVariant(
                    $state,
                    "variants2",
                    "analysis"
                  ),
                  [sty.analysisPicsvariants2_renderings]: hasVariant(
                    $state,
                    "variants2",
                    "renderings"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__muoOk)}
                />

                <div
                  className={classNames(projectcss.all, sty.freeBox__adgEi)}
                />

                <div
                  className={classNames(projectcss.all, sty.freeBox__ozwX8)}
                />
              </div>
            ) : null}
            <div
              data-plasmic-name={"sketches2"}
              data-plasmic-override={overrides.sketches2}
              className={classNames(projectcss.all, sty.sketches2, {
                [sty.sketches2variants2_activities]: hasVariant(
                  $state,
                  "variants2",
                  "activities"
                ),
                [sty.sketches2variants2_analysis]: hasVariant(
                  $state,
                  "variants2",
                  "analysis"
                ),
                [sty.sketches2variants2_sketches]: hasVariant(
                  $state,
                  "variants2",
                  "sketches"
                )
              })}
            >
              <div className={classNames(projectcss.all, sty.freeBox__nxCa)} />
              <div className={classNames(projectcss.all, sty.freeBox__ytzWc)} />
              <div
                className={classNames(projectcss.all, sty.freeBox__xPhKf)}
                onClick={async event => {
                  const $steps = {};
                }}
              />

              <div className={classNames(projectcss.all, sty.freeBox__pNtvp)} />
            </div>
            {(
              hasVariant($state, "variants2", "sketches")
                ? true
                : hasVariant($state, "variants2", "analysis")
                ? true
                : hasVariant($state, "variants2", "renderings")
                ? true
                : hasVariant($state, "variants2", "activities")
                ? true
                : false
            ) ? (
              <div
                data-plasmic-name={"overTheBridge"}
                data-plasmic-override={overrides.overTheBridge}
                className={classNames(projectcss.all, sty.overTheBridge, {
                  [sty.overTheBridgevariants2_activities]: hasVariant(
                    $state,
                    "variants2",
                    "activities"
                  ),
                  [sty.overTheBridgevariants2_analysis]: hasVariant(
                    $state,
                    "variants2",
                    "analysis"
                  ),
                  [sty.overTheBridgevariants2_renderings]: hasVariant(
                    $state,
                    "variants2",
                    "renderings"
                  ),
                  [sty.overTheBridgevariants2_sketches]: hasVariant(
                    $state,
                    "variants2",
                    "sketches"
                  )
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aD8Md,
                    {
                      [sty.textvariants2_activities__aD8Mdoy1JL]: hasVariant(
                        $state,
                        "variants2",
                        "activities"
                      )
                    }
                  )}
                >
                  {hasVariant($state, "variants2", "activities")
                    ? "1"
                    : "Over the bridge platform"}
                </div>
                <AntdModal
                  data-plasmic-name={"topModal"}
                  data-plasmic-override={overrides.topModal}
                  className={classNames("__wab_instance", sty.topModal, {
                    [sty.topModalvariants2_activities]: hasVariant(
                      $state,
                      "variants2",
                      "activities"
                    )
                  })}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens,
                    plasmic_plasmic_rich_components_css.plasmic_tokens
                  )}
                  hideFooter={true}
                  modalScopeClassName={sty["topModal__modal"]}
                  onOpenChange={generateStateOnChangeProp($state, [
                    "topModal",
                    "open"
                  ])}
                  open={generateStateValueProp($state, ["topModal", "open"])}
                  title={"Modal title"}
                  trigger={
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__zNzCw,
                        {
                          [sty.freeBoxvariants2_activities__zNzCWoy1JL]:
                            hasVariant($state, "variants2", "activities"),
                          [sty.freeBoxvariants2_renderings__zNzCWhKtTu]:
                            hasVariant($state, "variants2", "renderings")
                        }
                      )}
                    />
                  }
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__tYtw0, {
                      [sty.imgvariants2_activities__tYtw0Oy1JL]: hasVariant(
                        $state,
                        "variants2",
                        "activities"
                      )
                    })}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: layout3PopUppngPQuGwnoEoieY,
                      fullWidth: 1023,
                      fullHeight: 1035,
                      aspectRatio: undefined
                    }}
                  />
                </AntdModal>
                <ActivityQuestions
                  className={classNames(
                    "__wab_instance",
                    sty.activityQuestions__hzUzo,
                    {
                      [sty.activityQuestionsvariants2_activities__hzUzOoy1JL]:
                        hasVariant($state, "variants2", "activities")
                    }
                  )}
                  open={false}
                />

                <div
                  className={classNames(projectcss.all, sty.freeBox__qxcnq, {
                    [sty.freeBoxvariants2_activities__qxcnQoy1JL]: hasVariant(
                      $state,
                      "variants2",
                      "activities"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yOeV,
                      {
                        [sty.textvariants2_activities__yOeVoy1JL]: hasVariant(
                          $state,
                          "variants2",
                          "activities"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "variants2", "activities")
                      ? " Bridge platform"
                      : "Over the bridge platform"}
                  </div>
                </div>
              </div>
            ) : null}
            {(
              hasVariant($state, "variants2", "sketches")
                ? true
                : hasVariant($state, "variants2", "analysis")
                ? true
                : hasVariant($state, "variants2", "renderings")
                ? true
                : hasVariant($state, "variants2", "activities")
                ? true
                : false
            ) ? (
              <div
                data-plasmic-name={"skatePark"}
                data-plasmic-override={overrides.skatePark}
                className={classNames(projectcss.all, sty.skatePark, {
                  [sty.skateParkvariants2_activities]: hasVariant(
                    $state,
                    "variants2",
                    "activities"
                  ),
                  [sty.skateParkvariants2_analysis]: hasVariant(
                    $state,
                    "variants2",
                    "analysis"
                  ),
                  [sty.skateParkvariants2_renderings]: hasVariant(
                    $state,
                    "variants2",
                    "renderings"
                  ),
                  [sty.skateParkvariants2_sketches]: hasVariant(
                    $state,
                    "variants2",
                    "sketches"
                  )
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lqZqU,
                    {
                      [sty.textvariants2_activities__lqZqUoy1JL]: hasVariant(
                        $state,
                        "variants2",
                        "activities"
                      )
                    }
                  )}
                >
                  {hasVariant($state, "variants2", "activities")
                    ? "6 - 7"
                    : "Over the bridge platform"}
                </div>
                <AntdModal
                  data-plasmic-name={"modal"}
                  data-plasmic-override={overrides.modal}
                  className={classNames("__wab_instance", sty.modal, {
                    [sty.modalvariants2_activities]: hasVariant(
                      $state,
                      "variants2",
                      "activities"
                    )
                  })}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens,
                    plasmic_plasmic_rich_components_css.plasmic_tokens
                  )}
                  hideFooter={true}
                  modalScopeClassName={sty["modal__modal"]}
                  onOpenChange={generateStateOnChangeProp($state, [
                    "modal",
                    "open"
                  ])}
                  open={generateStateValueProp($state, ["modal", "open"])}
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__w3X48
                      )}
                    >
                      {
                        "Possible implementation of a skating area in the current bridge "
                      }
                    </div>
                  }
                  trigger={
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__v6401,
                        {
                          [sty.freeBoxvariants2_activities__v6401Oy1JL]:
                            hasVariant($state, "variants2", "activities"),
                          [sty.freeBoxvariants2_renderings__v6401HKtTu]:
                            hasVariant($state, "variants2", "renderings"),
                          [sty.freeBoxvariants2_sketches__v6401L9NWu]:
                            hasVariant($state, "variants2", "sketches")
                        }
                      )}
                    />
                  }
                  width={``}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__wFspU, {
                      [sty.imgvariants2_activities__wFspUoy1JL]: hasVariant(
                        $state,
                        "variants2",
                        "activities"
                      )
                    })}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: layoutPopUp2PngRvBzf5OSPi3J,
                      fullWidth: 1023,
                      fullHeight: 1035,
                      aspectRatio: undefined
                    }}
                  />
                </AntdModal>
                <ActivityQuestions
                  activity={"skateParkArea"}
                  className={classNames(
                    "__wab_instance",
                    sty.activityQuestions__jtvSy,
                    {
                      [sty.activityQuestionsvariants2_activities__jtvSYoy1JL]:
                        hasVariant($state, "variants2", "activities")
                    }
                  )}
                  open={false}
                />

                <div
                  className={classNames(projectcss.all, sty.freeBox___6PoW, {
                    [sty.freeBoxvariants2_activities___6PoWOy1JL]: hasVariant(
                      $state,
                      "variants2",
                      "activities"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__y4GlW,
                      {
                        [sty.textvariants2_activities__y4GlWoy1JL]: hasVariant(
                          $state,
                          "variants2",
                          "activities"
                        )
                      }
                    )}
                  >
                    {"Skate-park area"}
                  </div>
                </div>
              </div>
            ) : null}
            {(
              hasVariant($state, "variants2", "sketches")
                ? true
                : hasVariant($state, "variants2", "analysis")
                ? true
                : hasVariant($state, "variants2", "renderings")
                ? true
                : hasVariant($state, "variants2", "activities")
                ? true
                : false
            ) ? (
              <div
                data-plasmic-name={"climbingWall2"}
                data-plasmic-override={overrides.climbingWall2}
                className={classNames(projectcss.all, sty.climbingWall2, {
                  [sty.climbingWall2variants2_activities]: hasVariant(
                    $state,
                    "variants2",
                    "activities"
                  ),
                  [sty.climbingWall2variants2_analysis]: hasVariant(
                    $state,
                    "variants2",
                    "analysis"
                  ),
                  [sty.climbingWall2variants2_renderings]: hasVariant(
                    $state,
                    "variants2",
                    "renderings"
                  ),
                  [sty.climbingWall2variants2_sketches]: hasVariant(
                    $state,
                    "variants2",
                    "sketches"
                  )
                })}
              >
                <AntdModal
                  data-plasmic-name={"climbs"}
                  data-plasmic-override={overrides.climbs}
                  className={classNames("__wab_instance", sty.climbs, {
                    [sty.climbsvariants2_activities]: hasVariant(
                      $state,
                      "variants2",
                      "activities"
                    )
                  })}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens,
                    plasmic_plasmic_rich_components_css.plasmic_tokens
                  )}
                  hideFooter={true}
                  modalScopeClassName={sty["climbs__modal"]}
                  onOpenChange={generateStateOnChangeProp($state, [
                    "climbs",
                    "open"
                  ])}
                  open={generateStateValueProp($state, ["climbs", "open"])}
                  title={
                    "Possible implementation of a climbing wall in the current urban areas"
                  }
                  trigger={
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__pEiDd,
                        {
                          [sty.freeBoxvariants2_activities__pEiDdoy1JL]:
                            hasVariant($state, "variants2", "activities"),
                          [sty.freeBoxvariants2_renderings__pEiDdhKtTu]:
                            hasVariant($state, "variants2", "renderings")
                        }
                      )}
                    />
                  }
                  width={``}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__dZmUf, {
                      [sty.imgvariants2_activities__dZmUfoy1JL]: hasVariant(
                        $state,
                        "variants2",
                        "activities"
                      )
                    })}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: layout1PopUppngI0WjXKLs7G0,
                      fullWidth: 1023,
                      fullHeight: 1035,
                      aspectRatio: undefined
                    }}
                  />
                </AntdModal>
                <ActivityQuestions
                  activity={"climbingWall"}
                  className={classNames(
                    "__wab_instance",
                    sty.activityQuestions__eM0Zv,
                    {
                      [sty.activityQuestionsvariants2_activities__eM0ZVoy1JL]:
                        hasVariant($state, "variants2", "activities")
                    }
                  )}
                  open={false}
                />

                <div
                  className={classNames(projectcss.all, sty.freeBox__no5Ys, {
                    [sty.freeBoxvariants2_activities__no5Ysoy1JL]: hasVariant(
                      $state,
                      "variants2",
                      "activities"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__x6Qos,
                      {
                        [sty.textvariants2_activities__x6QoSoy1JL]: hasVariant(
                          $state,
                          "variants2",
                          "activities"
                        )
                      }
                    )}
                  >
                    {"Climbing wall "}
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aVxfV,
                    {
                      [sty.textvariants2_activities__aVxfVoy1JL]: hasVariant(
                        $state,
                        "variants2",
                        "activities"
                      )
                    }
                  )}
                >
                  {hasVariant($state, "variants2", "activities")
                    ? "8 "
                    : "Over the bridge platform"}
                </div>
              </div>
            ) : null}
            {(
              hasVariant($state, "variants2", "sketches")
                ? true
                : hasVariant($state, "variants2", "analysis")
                ? true
                : hasVariant($state, "variants2", "renderings")
                ? true
                : hasVariant($state, "variants2", "activities")
                ? true
                : false
            ) ? (
              <div
                data-plasmic-name={"activitiesCard4"}
                data-plasmic-override={overrides.activitiesCard4}
                className={classNames(projectcss.all, sty.activitiesCard4, {
                  [sty.activitiesCard4variants2_activities]: hasVariant(
                    $state,
                    "variants2",
                    "activities"
                  ),
                  [sty.activitiesCard4variants2_analysis]: hasVariant(
                    $state,
                    "variants2",
                    "analysis"
                  ),
                  [sty.activitiesCard4variants2_renderings]: hasVariant(
                    $state,
                    "variants2",
                    "renderings"
                  ),
                  [sty.activitiesCard4variants2_sketches]: hasVariant(
                    $state,
                    "variants2",
                    "sketches"
                  )
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zAw8A,
                    {
                      [sty.textvariants2_activities__zAw8Aoy1JL]: hasVariant(
                        $state,
                        "variants2",
                        "activities"
                      )
                    }
                  )}
                >
                  {hasVariant($state, "variants2", "activities")
                    ? "9 - 10"
                    : "Over the bridge platform"}
                </div>
                <AntdModal
                  data-plasmic-name={"openAct"}
                  data-plasmic-override={overrides.openAct}
                  className={classNames("__wab_instance", sty.openAct, {
                    [sty.openActvariants2_activities]: hasVariant(
                      $state,
                      "variants2",
                      "activities"
                    ),
                    [sty.openActvariants2_renderings]: hasVariant(
                      $state,
                      "variants2",
                      "renderings"
                    )
                  })}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens,
                    plasmic_plasmic_rich_components_css.plasmic_tokens
                  )}
                  hideFooter={true}
                  modalScopeClassName={sty["openAct__modal"]}
                  onOpenChange={generateStateOnChangeProp($state, [
                    "openAct",
                    "open"
                  ])}
                  open={generateStateValueProp($state, ["openAct", "open"])}
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__tlZFr,
                        {
                          [sty.freeBoxvariants2_activities__tlZFroy1JL]:
                            hasVariant($state, "variants2", "activities")
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___9VgNt
                        )}
                      >
                        {
                          "Possible implementation of the activities in the north"
                        }
                      </div>
                      <CloseSvgrepoComsvgIcon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg, {
                          [sty.svgvariants2_activities]: hasVariant(
                            $state,
                            "variants2",
                            "activities"
                          )
                        })}
                        role={"img"}
                      />
                    </div>
                  }
                  trigger={
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__xLwLj,
                        {
                          [sty.freeBoxvariants2_analysis__xLwLjW6Kp]:
                            hasVariant($state, "variants2", "analysis")
                        }
                      )}
                    />
                  }
                  width={``}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__jgtWf, {
                      [sty.imgvariants2_activities__jgtWFoy1JL]: hasVariant(
                        $state,
                        "variants2",
                        "activities"
                      )
                    })}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: layout5PopUppngYXLuFbMe0L4B,
                      fullWidth: 1023,
                      fullHeight: 1035,
                      aspectRatio: undefined
                    }}
                  />
                </AntdModal>
                <ActivityQuestions
                  activity={"openActivitiesNorth"}
                  className={classNames(
                    "__wab_instance",
                    sty.activityQuestions__yobR,
                    {
                      [sty.activityQuestionsvariants2_activities__yobRoy1JL]:
                        hasVariant($state, "variants2", "activities")
                    }
                  )}
                  open={false}
                />

                <div
                  className={classNames(projectcss.all, sty.freeBox__paQu, {
                    [sty.freeBoxvariants2_activities__paQuoy1JL]: hasVariant(
                      $state,
                      "variants2",
                      "activities"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qpl43,
                      {
                        [sty.textvariants2_activities__qpl43Oy1JL]: hasVariant(
                          $state,
                          "variants2",
                          "activities"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "variants2", "activities")
                      ? "Open activities"
                      : "Open activities on the north "}
                  </div>
                </div>
              </div>
            ) : null}
            {(
              hasVariant($state, "variants2", "sketches")
                ? true
                : hasVariant($state, "variants2", "analysis")
                ? true
                : hasVariant($state, "variants2", "renderings")
                ? true
                : hasVariant($state, "variants2", "activities")
                ? true
                : false
            ) ? (
              <div
                data-plasmic-name={"activitiesCard5"}
                data-plasmic-override={overrides.activitiesCard5}
                className={classNames(projectcss.all, sty.activitiesCard5, {
                  [sty.activitiesCard5variants2_activities]: hasVariant(
                    $state,
                    "variants2",
                    "activities"
                  ),
                  [sty.activitiesCard5variants2_analysis]: hasVariant(
                    $state,
                    "variants2",
                    "analysis"
                  ),
                  [sty.activitiesCard5variants2_renderings]: hasVariant(
                    $state,
                    "variants2",
                    "renderings"
                  ),
                  [sty.activitiesCard5variants2_sketches]: hasVariant(
                    $state,
                    "variants2",
                    "sketches"
                  )
                })}
                onClick={async event => {
                  const $steps = {};
                }}
              >
                <AntdModal
                  data-plasmic-name={"dayMkt"}
                  data-plasmic-override={overrides.dayMkt}
                  className={classNames("__wab_instance", sty.dayMkt, {
                    [sty.dayMktvariants2_activities]: hasVariant(
                      $state,
                      "variants2",
                      "activities"
                    ),
                    [sty.dayMktvariants2_renderings]: hasVariant(
                      $state,
                      "variants2",
                      "renderings"
                    )
                  })}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens,
                    plasmic_plasmic_rich_components_css.plasmic_tokens
                  )}
                  hideFooter={true}
                  modalContentClassName={classNames({
                    [sty["pcls_38AugLXtxh41"]]: true
                  })}
                  modalScopeClassName={sty["dayMkt__modal"]}
                  onOpenChange={generateStateOnChangeProp($state, [
                    "dayMkt",
                    "open"
                  ])}
                  open={generateStateValueProp($state, ["dayMkt", "open"])}
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___61Nd1
                      )}
                    >
                      {"Possible implementation of the activities in the south"}
                    </div>
                  }
                  trigger={
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__nnFga,
                        {
                          [sty.freeBoxvariants2_activities__nnFgaoy1JL]:
                            hasVariant($state, "variants2", "activities")
                        }
                      )}
                    />
                  }
                  width={``}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__vHaX9, {
                      [sty.imgvariants2_activities__vHaX9Oy1JL]: hasVariant(
                        $state,
                        "variants2",
                        "activities"
                      )
                    })}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: layout4PopUppngQhe8Xvd1ZBjL,
                      fullWidth: 1023,
                      fullHeight: 1035,
                      aspectRatio: undefined
                    }}
                  />
                </AntdModal>
                <ActivityQuestions
                  activity={"openActivitiesSouth"}
                  className={classNames(
                    "__wab_instance",
                    sty.activityQuestions___5Ect,
                    {
                      [sty.activityQuestionsvariants2_activities___5EctOy1JL]:
                        hasVariant($state, "variants2", "activities")
                    }
                  )}
                  open={false}
                />

                <div
                  className={classNames(projectcss.all, sty.freeBox__ieGsT, {
                    [sty.freeBoxvariants2_activities__ieGsToy1JL]: hasVariant(
                      $state,
                      "variants2",
                      "activities"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gk3C0,
                      {
                        [sty.textvariants2_activities__gk3C0Oy1JL]: hasVariant(
                          $state,
                          "variants2",
                          "activities"
                        )
                      }
                    )}
                  >
                    {"Daylight Open Market"}
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___2XPpk,
                    {
                      [sty.textvariants2_activities___2XPpkoy1JL]: hasVariant(
                        $state,
                        "variants2",
                        "activities"
                      )
                    }
                  )}
                >
                  {hasVariant($state, "variants2", "activities")
                    ? "4 - 5 - 6"
                    : "Over the bridge platform"}
                </div>
              </div>
            ) : null}
          </Stack__>
        </div>
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "description",
    "navBar",
    "_3DRenderings",
    "analysis",
    "sketches",
    "map",
    "renderedVideo",
    "analysisVideo",
    "rederingPics",
    "analysisPics",
    "sketches2",
    "overTheBridge",
    "topModal",
    "skatePark",
    "modal",
    "climbingWall2",
    "climbs",
    "activitiesCard4",
    "openAct",
    "svg",
    "activitiesCard5",
    "dayMkt"
  ],

  description: ["description"],
  navBar: ["navBar", "_3DRenderings", "analysis", "sketches"],
  _3DRenderings: ["_3DRenderings"],
  analysis: ["analysis"],
  sketches: ["sketches"],
  map: ["map"],
  renderedVideo: ["renderedVideo"],
  analysisVideo: ["analysisVideo"],
  rederingPics: ["rederingPics"],
  analysisPics: ["analysisPics"],
  sketches2: ["sketches2"],
  overTheBridge: ["overTheBridge", "topModal"],
  topModal: ["topModal"],
  skatePark: ["skatePark", "modal"],
  modal: ["modal"],
  climbingWall2: ["climbingWall2", "climbs"],
  climbs: ["climbs"],
  activitiesCard4: ["activitiesCard4", "openAct", "svg"],
  openAct: ["openAct", "svg"],
  svg: ["svg"],
  activitiesCard5: ["activitiesCard5", "dayMkt"],
  dayMkt: ["dayMkt"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicGalleryDisplay__ArgProps,
          internalVariantPropNames: PlasmicGalleryDisplay__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicGalleryDisplay__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGalleryDisplay";
  } else {
    func.displayName = `PlasmicGalleryDisplay.${nodeName}`;
  }
  return func;
}

export const PlasmicGalleryDisplay = Object.assign(
  // Top-level PlasmicGalleryDisplay renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    description: makeNodeComponent("description"),
    navBar: makeNodeComponent("navBar"),
    _3DRenderings: makeNodeComponent("_3DRenderings"),
    analysis: makeNodeComponent("analysis"),
    sketches: makeNodeComponent("sketches"),
    map: makeNodeComponent("map"),
    renderedVideo: makeNodeComponent("renderedVideo"),
    analysisVideo: makeNodeComponent("analysisVideo"),
    rederingPics: makeNodeComponent("rederingPics"),
    analysisPics: makeNodeComponent("analysisPics"),
    sketches2: makeNodeComponent("sketches2"),
    overTheBridge: makeNodeComponent("overTheBridge"),
    topModal: makeNodeComponent("topModal"),
    skatePark: makeNodeComponent("skatePark"),
    modal: makeNodeComponent("modal"),
    climbingWall2: makeNodeComponent("climbingWall2"),
    climbs: makeNodeComponent("climbs"),
    activitiesCard4: makeNodeComponent("activitiesCard4"),
    openAct: makeNodeComponent("openAct"),
    svg: makeNodeComponent("svg"),
    activitiesCard5: makeNodeComponent("activitiesCard5"),
    dayMkt: makeNodeComponent("dayMkt"),
    // Metadata about props expected for PlasmicGalleryDisplay
    internalVariantProps: PlasmicGalleryDisplay__VariantProps,
    internalArgProps: PlasmicGalleryDisplay__ArgProps
  }
);

export default PlasmicGalleryDisplay;
/* prettier-ignore-end */
