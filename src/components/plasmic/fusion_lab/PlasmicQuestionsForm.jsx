// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: adU29zJd9uLGW9TewABBsV
// Component: Uk8ghP4bFAyL
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import TextInput from "../../TextInput"; // plasmic-import: eo06WAQVRF2h/component
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import Select from "../../Select"; // plasmic-import: YbzHlcQNiy51/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_fusion_lab.module.css"; // plasmic-import: adU29zJd9uLGW9TewABBsV/projectcss
import sty from "./PlasmicQuestionsForm.module.css"; // plasmic-import: Uk8ghP4bFAyL/css
import CloseSvgrepoComsvgIcon from "./icons/PlasmicIcon__CloseSvgrepoComsvg"; // plasmic-import: naIJz5VNedYp/icon

createPlasmicElementProxy;

export const PlasmicQuestionsForm__VariantProps = new Array();

export const PlasmicQuestionsForm__ArgProps = new Array("open");

const $$ = {};

function PlasmicQuestionsForm__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          open: false
        },
        props.args
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props["open"]
      },
      {
        path: "postalCode.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "howOften.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "bridgeUse.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "commute.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "bridgeActivities.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "email.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <AntdModal
        data-plasmic-name={"modal"}
        data-plasmic-override={overrides.modal}
        className={classNames("__wab_instance", sty.modal)}
        closeIcon={
          <CloseSvgrepoComsvgIcon
            data-plasmic-name={"close"}
            data-plasmic-override={overrides.close}
            className={classNames(projectcss.all, sty.close)}
            role={"img"}
          />
        }
        defaultStylesClassName={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens
        )}
        hideFooter={true}
        maskClosable={false}
        modalScopeClassName={sty["modal__modal"]}
        onOpenChange={p.generateStateOnChangeProp($state, ["modal", "open"])}
        open={p.generateStateValueProp($state, ["modal", "open"])}
        title={
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___8HpgT)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__fddzw
              )}
            >
              {"Tell us about you!"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cD6P
              )}
            >
              {
                "The questions below help us understand your feedback better and enable us to address them in our design"
              }
            </div>
          </p.Stack>
        }
        trigger={null}
        wrapClassName={classNames({ [sty["pcls_ZbSLIxScg4sz"]]: true })}
      >
        <p.Stack
          as={"form"}
          data-plasmic-name={"form"}
          data-plasmic-override={overrides.form}
          hasGap={true}
          className={classNames(projectcss.all, sty.form)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__yUvS0)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__cBtdj)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___3B2Rs)}
              >
                <TextInput
                  data-plasmic-name={"email"}
                  data-plasmic-override={overrides.email}
                  className={classNames("__wab_instance", sty.email)}
                  onChange={(...eventArgs) => {
                    p.generateStateOnChangeProp($state, ["email", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  }}
                  placeholder={"Enter your email..."}
                  value={
                    p.generateStateValueProp($state, ["email", "value"]) ?? ""
                  }
                />
              </p.Stack>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__tWfUw)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__o1JQz
                  )}
                >
                  {
                    "Tell us in which area of Munich you live through your Postal Code:"
                  }
                </div>
                <AntdInputNumber
                  data-plasmic-name={"postalCode"}
                  data-plasmic-override={overrides.postalCode}
                  className={classNames("__wab_instance", sty.postalCode)}
                  maxLength={8}
                  onChange={p.generateStateOnChangeProp($state, [
                    "postalCode",
                    "value"
                  ])}
                  type={"number"}
                  value={p.generateStateValueProp($state, [
                    "postalCode",
                    "value"
                  ])}
                />
              </p.Stack>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___216HD)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pqBeA
                  )}
                >
                  {
                    "How often do you use the Donnersberger Bridge Station (Bus or S-Bahn)?"
                  }
                </div>
                <Select
                  data-plasmic-name={"howOften"}
                  data-plasmic-override={overrides.howOften}
                  className={classNames("__wab_instance", sty.howOften)}
                  onChange={(...eventArgs) => {
                    p.generateStateOnChangeProp($state, ["howOften", "value"])(
                      eventArgs[0]
                    );
                  }}
                  options={[
                    { value: "option1", label: "Option 1" },
                    { value: "option2", label: "Option 2" }
                  ]}
                  value={p.generateStateValueProp($state, [
                    "howOften",
                    "value"
                  ])}
                />
              </p.Stack>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__qKfKa)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nToCj
                  )}
                >
                  {"What do you use the Bridge for?"}
                </div>
                <Select
                  data-plasmic-name={"bridgeUse"}
                  data-plasmic-override={overrides.bridgeUse}
                  className={classNames("__wab_instance", sty.bridgeUse)}
                  onChange={(...eventArgs) => {
                    p.generateStateOnChangeProp($state, ["bridgeUse", "value"])(
                      eventArgs[0]
                    );
                  }}
                  options={[
                    { value: "option1", label: "Option 1" },
                    { value: "option2", label: "Option 2" }
                  ]}
                  value={p.generateStateValueProp($state, [
                    "bridgeUse",
                    "value"
                  ])}
                />
              </p.Stack>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___6Xjkp)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___2Ljzr
                  )}
                >
                  {"How do you usually commute on the Bridge?"}
                </div>
                <Select
                  data-plasmic-name={"commute"}
                  data-plasmic-override={overrides.commute}
                  className={classNames("__wab_instance", sty.commute)}
                  onChange={(...eventArgs) => {
                    p.generateStateOnChangeProp($state, ["commute", "value"])(
                      eventArgs[0]
                    );
                  }}
                  options={[
                    { value: "option1", label: "Option 1" },
                    { value: "option2", label: "Option 2" }
                  ]}
                  value={p.generateStateValueProp($state, ["commute", "value"])}
                />
              </p.Stack>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__f9Rij)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__f6Zom
                  )}
                >
                  {"What kind of Bridge activities would spark your interest?"}
                </div>
                <Select
                  data-plasmic-name={"bridgeActivities"}
                  data-plasmic-override={overrides.bridgeActivities}
                  className={classNames("__wab_instance", sty.bridgeActivities)}
                  onChange={(...eventArgs) => {
                    p.generateStateOnChangeProp($state, [
                      "bridgeActivities",
                      "value"
                    ])(eventArgs[0]);
                  }}
                  options={[
                    { value: "option1", label: "Option 1" },
                    { value: "option2", label: "Option 2" }
                  ]}
                  value={p.generateStateValueProp($state, [
                    "bridgeActivities",
                    "value"
                  ])}
                />
              </p.Stack>
            </p.Stack>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__oU2Nc)}>
            <AntdButton
              data-plasmic-name={"submit"}
              data-plasmic-override={overrides.submit}
              className={classNames("__wab_instance", sty.submit)}
              onClick={async () => {
                const $steps = {};
                $steps["updateModalOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["modal", "open"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;
                        p.set(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateModalOpen"] != null &&
                  typeof $steps["updateModalOpen"] === "object" &&
                  typeof $steps["updateModalOpen"].then === "function"
                ) {
                  $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                }
              }}
              submitsForm={true}
              type={"primary"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qd2VG
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"Submit"}
                  </span>
                </React.Fragment>
              </div>
            </AntdButton>
          </div>
        </p.Stack>
      </AntdModal>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "modal",
    "form",
    "email",
    "postalCode",
    "howOften",
    "bridgeUse",
    "commute",
    "bridgeActivities",
    "submit",
    "close"
  ],

  modal: [
    "modal",
    "form",
    "email",
    "postalCode",
    "howOften",
    "bridgeUse",
    "commute",
    "bridgeActivities",
    "submit",
    "close"
  ],

  form: [
    "form",
    "email",
    "postalCode",
    "howOften",
    "bridgeUse",
    "commute",
    "bridgeActivities",
    "submit"
  ],

  email: ["email"],
  postalCode: ["postalCode"],
  howOften: ["howOften"],
  bridgeUse: ["bridgeUse"],
  commute: ["commute"],
  bridgeActivities: ["bridgeActivities"],
  submit: ["submit"],
  close: ["close"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicQuestionsForm__ArgProps,
          internalVariantPropNames: PlasmicQuestionsForm__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicQuestionsForm__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicQuestionsForm";
  } else {
    func.displayName = `PlasmicQuestionsForm.${nodeName}`;
  }
  return func;
}

export const PlasmicQuestionsForm = Object.assign(
  // Top-level PlasmicQuestionsForm renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    modal: makeNodeComponent("modal"),
    form: makeNodeComponent("form"),
    email: makeNodeComponent("email"),
    postalCode: makeNodeComponent("postalCode"),
    howOften: makeNodeComponent("howOften"),
    bridgeUse: makeNodeComponent("bridgeUse"),
    commute: makeNodeComponent("commute"),
    bridgeActivities: makeNodeComponent("bridgeActivities"),
    submit: makeNodeComponent("submit"),
    close: makeNodeComponent("close"),
    // Metadata about props expected for PlasmicQuestionsForm
    internalVariantProps: PlasmicQuestionsForm__VariantProps,
    internalArgProps: PlasmicQuestionsForm__ArgProps
  }
);

export default PlasmicQuestionsForm;
/* prettier-ignore-end */
