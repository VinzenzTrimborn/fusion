// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: adU29zJd9uLGW9TewABBsV
// Component: CBJOAaymFywq
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import ActivityQuestions from "../../ActivityQuestions"; // plasmic-import: BOUoKYlWFZly/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_fusion_lab.module.css"; // plasmic-import: adU29zJd9uLGW9TewABBsV/projectcss
import sty from "./Plasmic_3DViewerAnnotation.module.css"; // plasmic-import: CBJOAaymFywq/css

createPlasmicElementProxy;

export const Plasmic_3DViewerAnnotation__VariantProps = new Array(
  "climbingWall"
);

export const Plasmic_3DViewerAnnotation__ArgProps = new Array();

const $$ = {};

function Plasmic_3DViewerAnnotation__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "climbingWall",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.climbingWall
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootclimbingWall_picture1]: hasVariant(
            $state,
            "climbingWall",
            "picture1"
          ),
          [sty.rootclimbingWall_picture2]: hasVariant(
            $state,
            "climbingWall",
            "picture2"
          ),
          [sty.rootclimbingWall_text]: hasVariant(
            $state,
            "climbingWall",
            "text"
          )
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__caHy4, {
          [sty.freeBoxclimbingWall_picture2__caHy4BGfZg]: hasVariant(
            $state,
            "climbingWall",
            "picture2"
          ),
          [sty.freeBoxclimbingWall_text__caHy41Grg1]: hasVariant(
            $state,
            "climbingWall",
            "text"
          )
        })}
      >
        <div
          data-plasmic-name={"image5"}
          data-plasmic-override={overrides.image5}
          className={classNames(projectcss.all, sty.image5, {
            [sty.image5climbingWall_picture2]: hasVariant(
              $state,
              "climbingWall",
              "picture2"
            ),
            [sty.image5climbingWall_text]: hasVariant(
              $state,
              "climbingWall",
              "text"
            )
          })}
        />
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__fl4Fe, {
          [sty.freeBoxclimbingWall_picture1__fl4FeYpj5B]: hasVariant(
            $state,
            "climbingWall",
            "picture1"
          ),
          [sty.freeBoxclimbingWall_text__fl4Fe1Grg1]: hasVariant(
            $state,
            "climbingWall",
            "text"
          )
        })}
      >
        <div
          data-plasmic-name={"image6"}
          data-plasmic-override={overrides.image6}
          className={classNames(projectcss.all, sty.image6, {
            [sty.image6climbingWall_picture1]: hasVariant(
              $state,
              "climbingWall",
              "picture1"
            )
          })}
        />
      </div>
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__akV5D, {
          [sty.freeBoxclimbingWall_picture1__akV5Dypj5B]: hasVariant(
            $state,
            "climbingWall",
            "picture1"
          ),
          [sty.freeBoxclimbingWall_picture2__akV5DbGfZg]: hasVariant(
            $state,
            "climbingWall",
            "picture2"
          )
        })}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___7WLol
          )}
        >
          {"Climbing Wall"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___11RJ6,
            {
              [sty.textclimbingWall_picture1___11RJ6Ypj5B]: hasVariant(
                $state,
                "climbingWall",
                "picture1"
              ),
              [sty.textclimbingWall_text___11RJ61Grg1]: hasVariant(
                $state,
                "climbingWall",
                "text"
              )
            }
          )}
        >
          {
            "Extending from the skate park, users will flow from ramps to an open area adorned with graffiti-covered columns. Here, one can relax while looking at the art or indulge in climbing, conveniently close to home. The climbing wall, integrated onto reinforced walls supporting ramps, maintains privacy with covered upper sides and allows natural light through carefully placed openings. Well-lit for nighttime use, the space includes a few parking spots with power stations for electric vehicles, enhancing accessibility and convenience."
          }
        </div>
        <ActivityQuestions
          data-plasmic-name={"activityQuestions"}
          data-plasmic-override={overrides.activityQuestions}
          className={classNames("__wab_instance", sty.activityQuestions)}
          open={false}
        />
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "image5", "image6", "activityQuestions"],
  image5: ["image5"],
  image6: ["image6"],
  activityQuestions: ["activityQuestions"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: Plasmic_3DViewerAnnotation__ArgProps,
          internalVariantPropNames: Plasmic_3DViewerAnnotation__VariantProps
        }),
      [props, nodeName]
    );
    return Plasmic_3DViewerAnnotation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "Plasmic_3DViewerAnnotation";
  } else {
    func.displayName = `Plasmic_3DViewerAnnotation.${nodeName}`;
  }
  return func;
}

export const Plasmic_3DViewerAnnotation = Object.assign(
  // Top-level Plasmic_3DViewerAnnotation renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    image5: makeNodeComponent("image5"),
    image6: makeNodeComponent("image6"),
    activityQuestions: makeNodeComponent("activityQuestions"),
    // Metadata about props expected for Plasmic_3DViewerAnnotation
    internalVariantProps: Plasmic_3DViewerAnnotation__VariantProps,
    internalArgProps: Plasmic_3DViewerAnnotation__ArgProps
  }
);

export default Plasmic_3DViewerAnnotation;
/* prettier-ignore-end */
