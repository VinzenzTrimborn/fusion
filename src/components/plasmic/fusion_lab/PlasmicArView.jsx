// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: adU29zJd9uLGW9TewABBsV
// Component: 9bh6WWKdnqfi
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Button from "../../Button"; // plasmic-import: apXgE63BR30L/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_fusion_lab.module.css"; // plasmic-import: adU29zJd9uLGW9TewABBsV/projectcss
import sty from "./PlasmicArView.module.css"; // plasmic-import: 9bh6WWKdnqfi/css

createPlasmicElementProxy;

export const PlasmicArView__VariantProps = new Array("apple");

export const PlasmicArView__ArgProps = new Array();

const $$ = {};

function PlasmicArView__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "apple",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.apple
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        { [sty.rootapple]: hasVariant($state, "apple", "apple") }
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__aHWdY
        )}
      >
        {
          "Visit the page on your desktop device to give feedback and explore more! "
        }
      </div>
      <Button
        data-plasmic-name={"ar"}
        data-plasmic-override={overrides.ar}
        className={classNames("__wab_instance", sty.ar, {
          [sty.arapple]: hasVariant($state, "apple", "apple")
        })}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__gqcIa
          )}
        >
          <React.Fragment>
            <span
              className={"plasmic_default__all plasmic_default__span"}
              style={{ fontWeight: 700, color: "#FFFFFF" }}
            >
              {"Show Model in AR"}
            </span>
          </React.Fragment>
        </div>
      </Button>
      <div
        data-plasmic-name={"model"}
        data-plasmic-override={overrides.model}
        className={classNames(projectcss.all, sty.model, {
          [sty.modelapple]: hasVariant($state, "apple", "apple")
        })}
      />
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "ar", "model"],
  ar: ["ar"],
  model: ["model"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicArView__ArgProps,
          internalVariantPropNames: PlasmicArView__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicArView__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicArView";
  } else {
    func.displayName = `PlasmicArView.${nodeName}`;
  }
  return func;
}

export const PlasmicArView = Object.assign(
  // Top-level PlasmicArView renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    ar: makeNodeComponent("ar"),
    model: makeNodeComponent("model"),
    // Metadata about props expected for PlasmicArView
    internalVariantProps: PlasmicArView__VariantProps,
    internalArgProps: PlasmicArView__ArgProps
  }
);

export default PlasmicArView;
/* prettier-ignore-end */
