// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: adU29zJd9uLGW9TewABBsV
// Component: SJ9BZMm9j-BB
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  hasVariant,
  initializeCodeComponentStates,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_fusion_lab.module.css"; // plasmic-import: adU29zJd9uLGW9TewABBsV/projectcss
import sty from "./PlasmicSketchesCarousel.module.css"; // plasmic-import: SJ9BZMm9j-BB/css
import closeWhite36Dp1RrVeLvbYQpRj from "./images/closeWhite36Dp1.svg"; // plasmic-import: RrVeLvbYQpRJ/picture
import perspectiveAndTopViewpngUNx6Qfvr4I1 from "./images/perspectiveAndTopViewpng.png"; // plasmic-import: UNx6Qfvr_4i1/picture
import _9E76A7C6B6C248C3Ad872563Fbeb55B2PngTdEzPk5YiRa from "./images/_9E76A7C6B6C248C3Ad872563Fbeb55B2Png.png"; // plasmic-import: tdEzPK_5YiRA/picture
import rectangle3190R3YKrXvtOioc from "./images/rectangle3190.png"; // plasmic-import: r3yKrXvtOIOC/picture
import rectangle3188Ykt2KjFigyW from "./images/rectangle3188.jpg"; // plasmic-import: YKT2kjFigy_w/picture
import celtinaSitePngUaiuO9TsIp8N from "./images/celtinaSitePng.png"; // plasmic-import: uaiuO9TsIP8n/picture
import rectangle3191F7Od8Ws2JJt5 from "./images/rectangle3191.png"; // plasmic-import: f7OD8ws2jJt5/picture

createPlasmicElementProxy;

export const PlasmicSketchesCarousel__VariantProps = new Array("sketchPopUp1");

export const PlasmicSketchesCarousel__ArgProps = new Array("render4");

const $$ = {};

function PlasmicSketchesCarousel__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          render4: 2
        },
        props.args
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "sketchPopUp1", "sketch6")
            ? 5
            : hasVariant($state, "sketchPopUp1", "sketch5")
            ? 4
            : hasVariant($state, "sketchPopUp1", "sketch4")
            ? 3
            : hasVariant($state, "sketchPopUp1", "sketch3")
            ? 2
            : hasVariant($state, "sketchPopUp1", "sketch2")
            ? 1
            : hasVariant($state, "sketchPopUp1", "sketch1")
            ? 0
            : 0,
        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "sketchPopUp1",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.sketchPopUp1
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootsketchPopUp1_sketch1]: hasVariant(
            $state,
            "sketchPopUp1",
            "sketch1"
          ),
          [sty.rootsketchPopUp1_sketch2]: hasVariant(
            $state,
            "sketchPopUp1",
            "sketch2"
          ),
          [sty.rootsketchPopUp1_sketch3]: hasVariant(
            $state,
            "sketchPopUp1",
            "sketch3"
          ),
          [sty.rootsketchPopUp1_sketch4]: hasVariant(
            $state,
            "sketchPopUp1",
            "sketch4"
          ),
          [sty.rootsketchPopUp1_sketch5]: hasVariant(
            $state,
            "sketchPopUp1",
            "sketch5"
          ),
          [sty.rootsketchPopUp1_sketch6]: hasVariant(
            $state,
            "sketchPopUp1",
            "sketch6"
          )
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__v0Gm, {
          [sty.freeBoxsketchPopUp1_sketch1__v0Gm9P3Ay]: hasVariant(
            $state,
            "sketchPopUp1",
            "sketch1"
          ),
          [sty.freeBoxsketchPopUp1_sketch2__v0GmCrWip]: hasVariant(
            $state,
            "sketchPopUp1",
            "sketch2"
          )
        })}
      >
        <PlasmicImg__
          alt={""}
          className={classNames(sty.img__hfEFx)}
          displayHeight={"36px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"36px"}
          loading={"lazy"}
          onClick={async event => {
            const $steps = {};
            $steps["goToGallery"] = true
              ? (() => {
                  const actionArgs = {};
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      location.assign(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToGallery"] != null &&
              typeof $steps["goToGallery"] === "object" &&
              typeof $steps["goToGallery"].then === "function"
            ) {
              $steps["goToGallery"] = await $steps["goToGallery"];
            }
          }}
          src={{
            src: closeWhite36Dp1RrVeLvbYQpRj,
            fullWidth: 36,
            fullHeight: 36,
            aspectRatio: 1
          }}
        />
      </div>
      {(() => {
        const child$Props = {
          arrowColor: true ? "var(--antd-colorPrimaryText)" : undefined,
          beforeChange: generateStateOnChangePropForCodeComponents(
            $state,
            "currentSlide",
            ["sliderCarousel", "currentSlide"],
            SliderWrapper_Helpers
          ),
          centerMode: true,
          className: classNames("__wab_instance", sty.sliderCarousel, {
            [sty.sliderCarouselsketchPopUp1_sketch1]: hasVariant(
              $state,
              "sketchPopUp1",
              "sketch1"
            ),
            [sty.sliderCarouselsketchPopUp1_sketch2]: hasVariant(
              $state,
              "sketchPopUp1",
              "sketch2"
            ),
            [sty.sliderCarouselsketchPopUp1_sketch3]: hasVariant(
              $state,
              "sketchPopUp1",
              "sketch3"
            ),
            [sty.sliderCarouselsketchPopUp1_sketch4]: hasVariant(
              $state,
              "sketchPopUp1",
              "sketch4"
            ),
            [sty.sliderCarouselsketchPopUp1_sketch5]: hasVariant(
              $state,
              "sketchPopUp1",
              "sketch5"
            ),
            [sty.sliderCarouselsketchPopUp1_sketch6]: hasVariant(
              $state,
              "sketchPopUp1",
              "sketch6"
            )
          }),
          initialSlide: generateStateValueProp($state, [
            "sliderCarousel",
            "currentSlide"
          ]),
          ref: ref => {
            $refs["sliderCarousel"] = ref;
          },
          sliderScopeClassName: sty["sliderCarousel__slider"]
        };
        initializeCodeComponentStates(
          $state,
          [
            {
              name: "currentSlide",
              plasmicStateName: "sliderCarousel.currentSlide"
            }
          ],

          [],
          SliderWrapper_Helpers ?? {},
          child$Props
        );
        return (
          <SliderWrapper
            data-plasmic-name={"sliderCarousel"}
            data-plasmic-override={overrides.sliderCarousel}
            {...child$Props}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__v9OQf, {
                [sty.freeBoxsketchPopUp1_sketch2__v9OQfCrWip]: hasVariant(
                  $state,
                  "sketchPopUp1",
                  "sketch2"
                )
              })}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__lFwq4, {
                  [sty.imgsketchPopUp1_sketch1__lFwq49P3Ay]: hasVariant(
                    $state,
                    "sketchPopUp1",
                    "sketch1"
                  ),
                  [sty.imgsketchPopUp1_sketch2__lFwq4CrWip]: hasVariant(
                    $state,
                    "sketchPopUp1",
                    "sketch2"
                  ),
                  [sty.imgsketchPopUp1_sketch6__lFwq4Vcj05]: hasVariant(
                    $state,
                    "sketchPopUp1",
                    "sketch6"
                  )
                })}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={{
                  src: perspectiveAndTopViewpngUNx6Qfvr4I1,
                  fullWidth: 2432,
                  fullHeight: 1685,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__ujuJq)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img___5ZMfH, {
                  [sty.imgsketchPopUp1_sketch2___5ZMfHCrWip]: hasVariant(
                    $state,
                    "sketchPopUp1",
                    "sketch2"
                  ),
                  [sty.imgsketchPopUp1_sketch3___5ZMfH7VUah]: hasVariant(
                    $state,
                    "sketchPopUp1",
                    "sketch3"
                  )
                })}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={{
                  src: _9E76A7C6B6C248C3Ad872563Fbeb55B2PngTdEzPk5YiRa,
                  fullWidth: 1448,
                  fullHeight: 724,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox___7JqAx, {
                [sty.freeBoxsketchPopUp1_sketch2___7JqAxCrWip]: hasVariant(
                  $state,
                  "sketchPopUp1",
                  "sketch2"
                )
              })}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__pEWvK, {
                  [sty.imgsketchPopUp1_sketch2__pEWvKCrWip]: hasVariant(
                    $state,
                    "sketchPopUp1",
                    "sketch2"
                  )
                })}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={{
                  src: rectangle3190R3YKrXvtOioc,
                  fullWidth: 1613,
                  fullHeight: 1090,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__n7Cbg)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__jcGKw)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                src={{
                  src: rectangle3188Ykt2KjFigyW,
                  fullWidth: 4096,
                  fullHeight: 2064,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__pgAmi, {
                [sty.freeBoxsketchPopUp1_sketch2__pgAmiCrWip]: hasVariant(
                  $state,
                  "sketchPopUp1",
                  "sketch2"
                )
              })}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__ggJwn, {
                  [sty.imgsketchPopUp1_sketch2__ggJwnCrWip]: hasVariant(
                    $state,
                    "sketchPopUp1",
                    "sketch2"
                  )
                })}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                src={{
                  src: celtinaSitePngUaiuO9TsIp8N,
                  fullWidth: 9933,
                  fullHeight: 7017,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__j6TAq)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__ffTwk)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                src={{
                  src: rectangle3191F7Od8Ws2JJt5,
                  fullWidth: 1348,
                  fullHeight: 1342,
                  aspectRatio: undefined
                }}
              />
            </div>
          </SliderWrapper>
        );
      })()}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "sliderCarousel"],
  sliderCarousel: ["sliderCarousel"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSketchesCarousel__ArgProps,
          internalVariantPropNames: PlasmicSketchesCarousel__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSketchesCarousel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSketchesCarousel";
  } else {
    func.displayName = `PlasmicSketchesCarousel.${nodeName}`;
  }
  return func;
}

export const PlasmicSketchesCarousel = Object.assign(
  // Top-level PlasmicSketchesCarousel renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    // Metadata about props expected for PlasmicSketchesCarousel
    internalVariantProps: PlasmicSketchesCarousel__VariantProps,
    internalArgProps: PlasmicSketchesCarousel__ArgProps
  }
);

export default PlasmicSketchesCarousel;
/* prettier-ignore-end */
