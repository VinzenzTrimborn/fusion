// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: adU29zJd9uLGW9TewABBsV
// Component: Jj6Wy6mGqjeW
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_fusion_lab.module.css"; // plasmic-import: adU29zJd9uLGW9TewABBsV/projectcss
import sty from "./PlasmicRenderingsCarousel.module.css"; // plasmic-import: Jj6Wy6mGqjeW/css
import closeWhite36Dp1RrVeLvbYQpRj from "./images/closeWhite36Dp1.svg"; // plasmic-import: RrVeLvbYQpRJ/picture
import rectangle3179MT205PyEs3M from "./images/rectangle3179.jpg"; // plasmic-import: mT205-PyEs3M/picture
import enscape20231214071249JpgBk2YgGb38BI from "./images/enscape20231214071249Jpg.jpg"; // plasmic-import: BK2YGGb38B_i/picture
import enscape20231214065756JpgMk6HoJ5KqaGr from "./images/enscape20231214065756Jpg.jpg"; // plasmic-import: Mk6HoJ5KqaGr/picture
import rectangle3184PLp1UhPvk5F from "./images/rectangle3184.jpg"; // plasmic-import: pLP1uh-PVK5F/picture
import rectangle3183PyZ6JQpozfpp from "./images/rectangle3183.jpg"; // plasmic-import: pyZ6JQpozfpp/picture
import rectangle3172WhCyNc527YIp from "./images/rectangle3172.jpg"; // plasmic-import: WhCYNc527yIP/picture

createPlasmicElementProxy;

export const PlasmicRenderingsCarousel__VariantProps = new Array("renders");

export const PlasmicRenderingsCarousel__ArgProps = new Array("render4");

const $$ = {};

function PlasmicRenderingsCarousel__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          render4: 2
        },
        props.args
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "renders", "render6")
            ? 5
            : hasVariant($state, "renders", "render5")
            ? 4
            : hasVariant($state, "renders", "render4")
            ? 3
            : hasVariant($state, "renders", "render3")
            ? 2
            : hasVariant($state, "renders", "render2")
            ? 1
            : hasVariant($state, "renders", "render1")
            ? 0
            : 0,
        refName: "sliderCarousel",
        onMutate: p.generateOnMutateForSpec(
          "currentSlide",
          SliderWrapper_Helpers
        )
      },
      {
        path: "renders",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.renders
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootrenders_render1]: hasVariant($state, "renders", "render1"),
          [sty.rootrenders_render2]: hasVariant($state, "renders", "render2"),
          [sty.rootrenders_render3]: hasVariant($state, "renders", "render3"),
          [sty.rootrenders_render4]: hasVariant($state, "renders", "render4"),
          [sty.rootrenders_render5]: hasVariant($state, "renders", "render5"),
          [sty.rootrenders_render6]: hasVariant($state, "renders", "render6")
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__yZfFp, {
          [sty.freeBoxrenders_render2__yZfFPoPUb]: hasVariant(
            $state,
            "renders",
            "render2"
          )
        })}
      >
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__mOyQt, {
            [sty.imgrenders_render3__mOyQtp0Dp7]: hasVariant(
              $state,
              "renders",
              "render3"
            )
          })}
          displayHeight={"36px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"36px"}
          loading={"lazy"}
          onClick={async event => {
            const $steps = {};
            $steps["goToGallery"] = true
              ? (() => {
                  const actionArgs = { destination: `/project_details` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      location.assign(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToGallery"] != null &&
              typeof $steps["goToGallery"] === "object" &&
              typeof $steps["goToGallery"].then === "function"
            ) {
              $steps["goToGallery"] = await $steps["goToGallery"];
            }
          }}
          src={{
            src: closeWhite36Dp1RrVeLvbYQpRj,
            fullWidth: 36,
            fullHeight: 36,
            aspectRatio: 1
          }}
        />
      </div>
      {(() => {
        const child$Props = {
          arrowColor: true ? "var(--antd-colorPrimaryText)" : undefined,
          beforeChange: p.generateStateOnChangePropForCodeComponents(
            $state,
            "currentSlide",
            ["sliderCarousel", "currentSlide"],
            SliderWrapper_Helpers
          ),
          centerMode: true,
          className: classNames("__wab_instance", sty.sliderCarousel, {
            [sty.sliderCarouselrenders_render1]: hasVariant(
              $state,
              "renders",
              "render1"
            ),
            [sty.sliderCarouselrenders_render2]: hasVariant(
              $state,
              "renders",
              "render2"
            ),
            [sty.sliderCarouselrenders_render3]: hasVariant(
              $state,
              "renders",
              "render3"
            ),
            [sty.sliderCarouselrenders_render4]: hasVariant(
              $state,
              "renders",
              "render4"
            ),
            [sty.sliderCarouselrenders_render5]: hasVariant(
              $state,
              "renders",
              "render5"
            ),
            [sty.sliderCarouselrenders_render6]: hasVariant(
              $state,
              "renders",
              "render6"
            )
          }),
          initialSlide: p.generateStateValueProp($state, [
            "sliderCarousel",
            "currentSlide"
          ]),
          ref: ref => {
            $refs["sliderCarousel"] = ref;
          },
          sliderScopeClassName: sty["sliderCarousel__slider"]
        };
        p.initializeCodeComponentStates(
          $state,
          [
            {
              name: "currentSlide",
              plasmicStateName: "sliderCarousel.currentSlide"
            }
          ],

          [],
          SliderWrapper_Helpers ?? {},
          child$Props
        );
        return (
          <SliderWrapper
            data-plasmic-name={"sliderCarousel"}
            data-plasmic-override={overrides.sliderCarousel}
            {...child$Props}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__sniJq, {
                [sty.freeBoxrenders_render2__sniJQoPUb]: hasVariant(
                  $state,
                  "renders",
                  "render2"
                )
              })}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__d3Cfp, {
                  [sty.imgrenders_render1__d3CfpBuL44]: hasVariant(
                    $state,
                    "renders",
                    "render1"
                  ),
                  [sty.imgrenders_render2__d3CfpoPUb]: hasVariant(
                    $state,
                    "renders",
                    "render2"
                  ),
                  [sty.imgrenders_render6__d3Cfp1ZQsR]: hasVariant(
                    $state,
                    "renders",
                    "render6"
                  )
                })}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={{
                  src: rectangle3179MT205PyEs3M,
                  fullWidth: 1920,
                  fullHeight: 1080,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__yqLak)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img___3ZZu, {
                  [sty.imgrenders_render2___3ZZuoPUb]: hasVariant(
                    $state,
                    "renders",
                    "render2"
                  ),
                  [sty.imgrenders_render3___3ZZuP0Dp7]: hasVariant(
                    $state,
                    "renders",
                    "render3"
                  )
                })}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={{
                  src: enscape20231214071249JpgBk2YgGb38BI,
                  fullWidth: 1920,
                  fullHeight: 1080,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__fRkK6, {
                [sty.freeBoxrenders_render2__fRkK6OPUb]: hasVariant(
                  $state,
                  "renders",
                  "render2"
                )
              })}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__eAoIo, {
                  [sty.imgrenders_render2__eAoIooPUb]: hasVariant(
                    $state,
                    "renders",
                    "render2"
                  ),
                  [sty.imgrenders_render3__eAoIoP0Dp7]: hasVariant(
                    $state,
                    "renders",
                    "render3"
                  )
                })}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={{
                  src: enscape20231214065756JpgMk6HoJ5KqaGr,
                  fullWidth: 1920,
                  fullHeight: 1080,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__kk8V2)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__nGs2A)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                src={{
                  src: rectangle3184PLp1UhPvk5F,
                  fullWidth: 1920,
                  fullHeight: 1080,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__eRhom, {
                [sty.freeBoxrenders_render2__eRhomoPUb]: hasVariant(
                  $state,
                  "renders",
                  "render2"
                )
              })}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__bFcS, {
                  [sty.imgrenders_render2__bFcSoPUb]: hasVariant(
                    $state,
                    "renders",
                    "render2"
                  ),
                  [sty.imgrenders_render5__bFcSvukP8]: hasVariant(
                    $state,
                    "renders",
                    "render5"
                  )
                })}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                src={{
                  src: rectangle3183PyZ6JQpozfpp,
                  fullWidth: 1920,
                  fullHeight: 1080,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__s0Es2)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img___2KRrg, {
                  [sty.imgrenders_render6___2KRrg1ZQsR]: hasVariant(
                    $state,
                    "renders",
                    "render6"
                  )
                })}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                src={{
                  src: rectangle3172WhCyNc527YIp,
                  fullWidth: 1000,
                  fullHeight: 1400,
                  aspectRatio: undefined
                }}
              />
            </div>
          </SliderWrapper>
        );
      })()}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "sliderCarousel"],
  sliderCarousel: ["sliderCarousel"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRenderingsCarousel__ArgProps,
          internalVariantPropNames: PlasmicRenderingsCarousel__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRenderingsCarousel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRenderingsCarousel";
  } else {
    func.displayName = `PlasmicRenderingsCarousel.${nodeName}`;
  }
  return func;
}

export const PlasmicRenderingsCarousel = Object.assign(
  // Top-level PlasmicRenderingsCarousel renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    // Metadata about props expected for PlasmicRenderingsCarousel
    internalVariantProps: PlasmicRenderingsCarousel__VariantProps,
    internalArgProps: PlasmicRenderingsCarousel__ArgProps
  }
);

export default PlasmicRenderingsCarousel;
/* prettier-ignore-end */
