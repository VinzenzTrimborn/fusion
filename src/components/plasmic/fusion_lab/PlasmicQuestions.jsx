// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: adU29zJd9uLGW9TewABBsV
// Component: ua_gmRo83aZu
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import Select from "../../Select"; // plasmic-import: YbzHlcQNiy51/component
import Checkbox from "../../Checkbox"; // plasmic-import: QYHJ3nGLufw1/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import ActionButton from "../../ActionButton"; // plasmic-import: x_Fghcos84Ui/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_fusion_lab.module.css"; // plasmic-import: adU29zJd9uLGW9TewABBsV/projectcss
import sty from "./PlasmicQuestions.module.css"; // plasmic-import: ua_gmRo83aZu/css

createPlasmicElementProxy;

export const PlasmicQuestions__VariantProps = new Array();

export const PlasmicQuestions__ArgProps = new Array();

const $$ = {};

function PlasmicQuestions__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "postalCode.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "howOften.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "bridgeUse.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "commute.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "countrySelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "option1"
      },
      {
        path: "checkbox.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox2.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox3.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox4.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox6.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox7.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <AntdModal
        data-plasmic-name={"modal"}
        data-plasmic-override={overrides.modal}
        className={classNames("__wab_instance", sty.modal)}
        defaultStylesClassName={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens
        )}
        hideFooter={true}
        modalScopeClassName={sty["modal__modal"]}
        onOpenChange={generateStateOnChangeProp($state, ["modal", "open"])}
        open={generateStateValueProp($state, ["modal", "open"])}
        title={
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__hrXGa)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1YjqO
              )}
            >
              {"How do you use the bridge?"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__daDbc
              )}
            >
              {
                "The questions below help us understand your feedback better and enable us to address them in our design"
              }
            </div>
          </Stack__>
        }
        trigger={
          <ActionButton
            data-plasmic-name={"actionButton"}
            data-plasmic-override={overrides.actionButton}
            className={classNames("__wab_instance", sty.actionButton)}
          >
            {"Tell us how you use the bridge"}
          </ActionButton>
        }
      >
        <form
          data-plasmic-name={"form"}
          data-plasmic-override={overrides.form}
          className={classNames(projectcss.all, sty.form)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__w0S32)}>
            <div className={classNames(projectcss.all, sty.freeBox___2Zbv)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7WNz
                )}
              >
                {"Postal Code"}
              </div>
              <AntdInputNumber
                data-plasmic-name={"postalCode"}
                data-plasmic-override={overrides.postalCode}
                className={classNames("__wab_instance", sty.postalCode)}
                maxLength={8}
                onChange={generateStateOnChangeProp($state, [
                  "postalCode",
                  "value"
                ])}
                type={"number"}
                value={generateStateValueProp($state, ["postalCode", "value"])}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__zbNd)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hCdoE
                )}
              >
                {"Place of Residence"}
              </div>
              <Select
                data-plasmic-name={"countrySelect"}
                data-plasmic-override={overrides.countrySelect}
                className={classNames("__wab_instance", sty.countrySelect)}
                onChange={(...eventArgs) => {
                  generateStateOnChangeProp($state, ["countrySelect", "value"])(
                    eventArgs[0]
                  );
                }}
                options={(() => {
                  const __composite = [
                    { value: null, label: null },
                    { value: null, label: null },
                    { value: null }
                  ];

                  __composite["0"]["value"] = "Munich";
                  __composite["0"]["label"] = "Munich";
                  __composite["1"]["value"] = "Other Cities in Bavaria";
                  __composite["1"]["label"] = "Other Cities in Bavaria";
                  __composite["2"]["value"] = "Other";
                  return __composite;
                })()}
                value={generateStateValueProp($state, [
                  "countrySelect",
                  "value"
                ])}
              />
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__uWdso)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___7ANih
              )}
            >
              {
                "How often do you use the Donnersberger Bridge Station (Bus or S-Bahn) per Week?"
              }
            </div>
            <Select
              data-plasmic-name={"howOften"}
              data-plasmic-override={overrides.howOften}
              className={classNames("__wab_instance", sty.howOften)}
              onChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["howOften", "value"])(
                  eventArgs[0]
                );
              }}
              options={(() => {
                const __composite = [
                  { value: null, label: null },
                  { value: null, label: null },
                  { value: null }
                ];

                __composite["0"]["value"] = "Twice or Less";
                __composite["0"]["label"] = "Twice or Less";
                __composite["1"]["value"] = "Weekdays";
                __composite["1"]["label"] = "Weekdays";
                __composite["2"]["value"] = "The Whole Week";
                return __composite;
              })()}
              value={generateStateValueProp($state, ["howOften", "value"])}
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__v1SeA)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nTn1
              )}
            >
              {"What do you use the Bridge for?"}
            </div>
            <Select
              data-plasmic-name={"bridgeUse"}
              data-plasmic-override={overrides.bridgeUse}
              className={classNames("__wab_instance", sty.bridgeUse)}
              onChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["bridgeUse", "value"])(
                  eventArgs[0]
                );
              }}
              options={(() => {
                const __composite = [
                  { value: null, label: null },
                  { value: null, label: null },
                  { value: null }
                ];

                __composite["0"]["value"] = "Commute to Work";
                __composite["0"]["label"] = "Commute to Work";
                __composite["1"]["value"] = "Leisure";
                __composite["1"]["label"] = "Leisure";
                __composite["2"]["value"] = "Other";
                return __composite;
              })()}
              value={generateStateValueProp($state, ["bridgeUse", "value"])}
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__wyuvp)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__padt3
              )}
            >
              {"How do you usually commute on the Bridge?"}
            </div>
            <Select
              data-plasmic-name={"commute"}
              data-plasmic-override={overrides.commute}
              className={classNames("__wab_instance", sty.commute)}
              onChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["commute", "value"])(
                  eventArgs[0]
                );
              }}
              options={(() => {
                const __composite = [
                  { value: null, label: null },
                  { value: null, label: null },
                  { value: null },
                  { value: null }
                ];

                __composite["0"]["value"] = "Bus";
                __composite["0"]["label"] = "Bus";
                __composite["1"]["value"] = "Car";
                __composite["1"]["label"] = "Car";
                __composite["2"]["value"] = "S-Bahn";
                __composite["3"]["value"] = "Walking or Cycling";
                return __composite;
              })()}
              value={generateStateValueProp($state, ["commute", "value"])}
            />
          </div>
          <div
            data-plasmic-name={"bridgeActivitiesBox"}
            data-plasmic-override={overrides.bridgeActivitiesBox}
            className={classNames(projectcss.all, sty.bridgeActivitiesBox)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___78JRn
              )}
            >
              {
                "Which of the Bridge's leasure areas proposed in the project is your favorite?"
              }
            </div>
            <Checkbox
              data-plasmic-name={"checkbox"}
              data-plasmic-override={overrides.checkbox}
              className={classNames("__wab_instance", sty.checkbox)}
              isChecked={
                generateStateValueProp($state, ["checkbox", "isChecked"]) ??
                false
              }
              onChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["checkbox", "isChecked"])(
                  eventArgs[0]
                );
              }}
            >
              {"Platform View"}
            </Checkbox>
            <Checkbox
              data-plasmic-name={"checkbox2"}
              data-plasmic-override={overrides.checkbox2}
              className={classNames("__wab_instance", sty.checkbox2)}
              isChecked={
                generateStateValueProp($state, ["checkbox2", "isChecked"]) ??
                false
              }
              onChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["checkbox2", "isChecked"])(
                  eventArgs[0]
                );
              }}
            >
              {"Skate Park"}
            </Checkbox>
            <Checkbox
              data-plasmic-name={"checkbox3"}
              data-plasmic-override={overrides.checkbox3}
              className={classNames("__wab_instance", sty.checkbox3)}
              isChecked={
                generateStateValueProp($state, ["checkbox3", "isChecked"]) ??
                false
              }
              onChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["checkbox3", "isChecked"])(
                  eventArgs[0]
                );
              }}
            >
              {"Climbing Wall"}
            </Checkbox>
            <Checkbox
              data-plasmic-name={"checkbox4"}
              data-plasmic-override={overrides.checkbox4}
              className={classNames("__wab_instance", sty.checkbox4)}
              isChecked={
                generateStateValueProp($state, ["checkbox4", "isChecked"]) ??
                false
              }
              onChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["checkbox4", "isChecked"])(
                  eventArgs[0]
                );
              }}
            >
              {"Park Area"}
            </Checkbox>
            <Checkbox
              data-plasmic-name={"checkbox6"}
              data-plasmic-override={overrides.checkbox6}
              className={classNames("__wab_instance", sty.checkbox6)}
              isChecked={
                generateStateValueProp($state, ["checkbox6", "isChecked"]) ??
                false
              }
              onChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["checkbox6", "isChecked"])(
                  eventArgs[0]
                );
              }}
            >
              {"Open Market"}
            </Checkbox>
            <Checkbox
              data-plasmic-name={"checkbox7"}
              data-plasmic-override={overrides.checkbox7}
              className={classNames("__wab_instance", sty.checkbox7)}
              isChecked={
                generateStateValueProp($state, ["checkbox7", "isChecked"]) ??
                false
              }
              onChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["checkbox7", "isChecked"])(
                  eventArgs[0]
                );
              }}
            >
              {"Coffe-to-Go Area"}
            </Checkbox>
          </div>
          <AntdButton
            data-plasmic-name={"submitButton"}
            data-plasmic-override={overrides.submitButton}
            className={classNames("__wab_instance", sty.submitButton)}
            submitsForm={false}
            type={"primary"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tbYx5
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Submit"}
                </span>
              </React.Fragment>
            </div>
          </AntdButton>
        </form>
      </AntdModal>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "modal",
    "form",
    "postalCode",
    "countrySelect",
    "howOften",
    "bridgeUse",
    "commute",
    "bridgeActivitiesBox",
    "checkbox",
    "checkbox2",
    "checkbox3",
    "checkbox4",
    "checkbox6",
    "checkbox7",
    "submitButton",
    "actionButton"
  ],

  modal: [
    "modal",
    "form",
    "postalCode",
    "countrySelect",
    "howOften",
    "bridgeUse",
    "commute",
    "bridgeActivitiesBox",
    "checkbox",
    "checkbox2",
    "checkbox3",
    "checkbox4",
    "checkbox6",
    "checkbox7",
    "submitButton",
    "actionButton"
  ],

  form: [
    "form",
    "postalCode",
    "countrySelect",
    "howOften",
    "bridgeUse",
    "commute",
    "bridgeActivitiesBox",
    "checkbox",
    "checkbox2",
    "checkbox3",
    "checkbox4",
    "checkbox6",
    "checkbox7",
    "submitButton"
  ],

  postalCode: ["postalCode"],
  countrySelect: ["countrySelect"],
  howOften: ["howOften"],
  bridgeUse: ["bridgeUse"],
  commute: ["commute"],
  bridgeActivitiesBox: [
    "bridgeActivitiesBox",
    "checkbox",
    "checkbox2",
    "checkbox3",
    "checkbox4",
    "checkbox6",
    "checkbox7"
  ],

  checkbox: ["checkbox"],
  checkbox2: ["checkbox2"],
  checkbox3: ["checkbox3"],
  checkbox4: ["checkbox4"],
  checkbox6: ["checkbox6"],
  checkbox7: ["checkbox7"],
  submitButton: ["submitButton"],
  actionButton: ["actionButton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicQuestions__ArgProps,
          internalVariantPropNames: PlasmicQuestions__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicQuestions__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicQuestions";
  } else {
    func.displayName = `PlasmicQuestions.${nodeName}`;
  }
  return func;
}

export const PlasmicQuestions = Object.assign(
  // Top-level PlasmicQuestions renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    modal: makeNodeComponent("modal"),
    form: makeNodeComponent("form"),
    postalCode: makeNodeComponent("postalCode"),
    countrySelect: makeNodeComponent("countrySelect"),
    howOften: makeNodeComponent("howOften"),
    bridgeUse: makeNodeComponent("bridgeUse"),
    commute: makeNodeComponent("commute"),
    bridgeActivitiesBox: makeNodeComponent("bridgeActivitiesBox"),
    checkbox: makeNodeComponent("checkbox"),
    checkbox2: makeNodeComponent("checkbox2"),
    checkbox3: makeNodeComponent("checkbox3"),
    checkbox4: makeNodeComponent("checkbox4"),
    checkbox6: makeNodeComponent("checkbox6"),
    checkbox7: makeNodeComponent("checkbox7"),
    submitButton: makeNodeComponent("submitButton"),
    actionButton: makeNodeComponent("actionButton"),
    // Metadata about props expected for PlasmicQuestions
    internalVariantProps: PlasmicQuestions__VariantProps,
    internalArgProps: PlasmicQuestions__ArgProps
  }
);

export default PlasmicQuestions;
/* prettier-ignore-end */
