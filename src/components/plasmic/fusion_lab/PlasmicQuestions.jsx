// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: adU29zJd9uLGW9TewABBsV
// Component: ua_gmRo83aZu
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import Select from "../../Select"; // plasmic-import: YbzHlcQNiy51/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import Button from "../../Button"; // plasmic-import: apXgE63BR30L/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_fusion_lab.module.css"; // plasmic-import: adU29zJd9uLGW9TewABBsV/projectcss
import sty from "./PlasmicQuestions.module.css"; // plasmic-import: ua_gmRo83aZu/css
import checkOneOLn2Q3HdIiHd from "./images/checkOne.svg"; // plasmic-import: oLn2Q3hdIIHd/picture

createPlasmicElementProxy;

export const PlasmicQuestions__VariantProps = new Array();

export const PlasmicQuestions__ArgProps = new Array();

const $$ = {};

function PlasmicQuestions__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "fullForm.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "fullForm",
        onMutate: p.generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "fullForm.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "fullForm",
        onMutate: p.generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "numberInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__ybcpY)}>
        <div className={classNames(projectcss.all, sty.freeBox__hrXGa)}>
          <div className={classNames(projectcss.all, sty.freeBox__ag8CX)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yINft
              )}
            >
              {"Great!"}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__ikmu2)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1YjqO
                )}
              >
                {"That\u2019s very nice of you "}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__daDbc
                )}
              >
                {
                  "The questions below help us understand your feedback better and enable us to address them in our design"
                }
              </div>
            </div>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox___4WLj0)}>
          {(() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.fullForm),
              extendedOnValuesChange:
                p.generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["fullForm", "value"],
                  FormWrapper_Helpers
                ),
              formItems: [
                { label: "Name", name: "name", inputType: "Text" },
                { label: "Message", name: "message", inputType: "Text Area" }
              ],

              labelCol: { span: 8, horizontalOnly: true },
              layout: "vertical",
              mode: "advanced",
              onIsSubmittingChange:
                p.generateStateOnChangePropForCodeComponents(
                  $state,
                  "isSubmitting",
                  ["fullForm", "isSubmitting"],
                  FormWrapper_Helpers
                ),
              ref: ref => {
                $refs["fullForm"] = ref;
              },
              submitSlot: null,
              wrapperCol: { span: 16, horizontalOnly: true }
            };
            p.initializeCodeComponentStates(
              $state,
              [
                {
                  name: "value",
                  plasmicStateName: "fullForm.value"
                },
                {
                  name: "isSubmitting",
                  plasmicStateName: "fullForm.isSubmitting"
                }
              ],

              [],
              FormWrapper_Helpers ?? {},
              child$Props
            );
            return (
              <FormWrapper
                data-plasmic-name={"fullForm"}
                data-plasmic-override={overrides.fullForm}
                {...child$Props}
              >
                <FormItemWrapper
                  data-plasmic-name={"postalCodeField"}
                  data-plasmic-override={overrides.postalCodeField}
                  className={classNames("__wab_instance", sty.postalCodeField)}
                  label={"Postal Code"}
                  name={"name"}
                >
                  <AntdInputNumber
                    data-plasmic-name={"numberInput"}
                    data-plasmic-override={overrides.numberInput}
                    className={classNames("__wab_instance", sty.numberInput)}
                    onChange={p.generateStateOnChangeProp($state, [
                      "numberInput",
                      "value"
                    ])}
                    type={"number"}
                    value={p.generateStateValueProp($state, [
                      "numberInput",
                      "value"
                    ])}
                  />

                  <FormItemWrapper
                    data-plasmic-name={"howOften"}
                    data-plasmic-override={overrides.howOften}
                    className={classNames("__wab_instance", sty.howOften)}
                    label={
                      "How often do you use the Donnersberger Bridge Station (Bus or S-Bahn)?"
                    }
                    name={"name"}
                  >
                    <Select
                      data-plasmic-name={"select2"}
                      data-plasmic-override={overrides.select2}
                      className={classNames("__wab_instance", sty.select2)}
                      onChange={(...eventArgs) => {
                        p.generateStateOnChangeProp($state, [
                          "select2",
                          "value"
                        ])(eventArgs[0]);
                      }}
                      options={[
                        { value: "option1", label: "Option 1" },
                        { value: "option2", label: "Option 2" }
                      ]}
                      value={p.generateStateValueProp($state, [
                        "select2",
                        "value"
                      ])}
                    />

                    <FormItemWrapper
                      data-plasmic-name={"bridgeUse"}
                      data-plasmic-override={overrides.bridgeUse}
                      className={classNames("__wab_instance", sty.bridgeUse)}
                      label={"What do you use the Bridge for?"}
                      name={"name"}
                    >
                      <Select
                        data-plasmic-name={"select4"}
                        data-plasmic-override={overrides.select4}
                        className={classNames("__wab_instance", sty.select4)}
                        onChange={(...eventArgs) => {
                          p.generateStateOnChangeProp($state, [
                            "select4",
                            "value"
                          ])(eventArgs[0]);
                        }}
                        options={[
                          { value: "option1", label: "Option 1" },
                          { value: "option2", label: "Option 2" }
                        ]}
                        value={p.generateStateValueProp($state, [
                          "select4",
                          "value"
                        ])}
                      />
                    </FormItemWrapper>
                    <FormItemWrapper
                      data-plasmic-name={"commute"}
                      data-plasmic-override={overrides.commute}
                      className={classNames("__wab_instance", sty.commute)}
                      label={"How do you usually commute in the Bridge?"}
                      name={"name"}
                    >
                      <Select
                        data-plasmic-name={"select5"}
                        data-plasmic-override={overrides.select5}
                        className={classNames("__wab_instance", sty.select5)}
                        onChange={(...eventArgs) => {
                          p.generateStateOnChangeProp($state, [
                            "select5",
                            "value"
                          ])(eventArgs[0]);
                        }}
                        options={[
                          { value: "option1", label: "Option 1" },
                          { value: "option2", label: "Option 2" }
                        ]}
                        value={p.generateStateValueProp($state, [
                          "select5",
                          "value"
                        ])}
                      />
                    </FormItemWrapper>
                    <FormItemWrapper
                      data-plasmic-name={"activities"}
                      data-plasmic-override={overrides.activities}
                      className={classNames("__wab_instance", sty.activities)}
                      label={
                        "What kind of bridge activities would spark your interest?"
                      }
                      name={"name"}
                    >
                      <Select
                        data-plasmic-name={"select6"}
                        data-plasmic-override={overrides.select6}
                        className={classNames("__wab_instance", sty.select6)}
                        onChange={(...eventArgs) => {
                          p.generateStateOnChangeProp($state, [
                            "select6",
                            "value"
                          ])(eventArgs[0]);
                        }}
                        options={[
                          { value: "option1", label: "Option 1" },
                          { value: "option2", label: "Option 2" }
                        ]}
                        value={p.generateStateValueProp($state, [
                          "select6",
                          "value"
                        ])}
                      />

                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button___64Ewy
                        )}
                        onClick={async () => {
                          const $steps = {};
                          $steps["updateModalOpen"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["modal", "open"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;
                                  p.set(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateModalOpen"] != null &&
                            typeof $steps["updateModalOpen"] === "object" &&
                            typeof $steps["updateModalOpen"].then === "function"
                          ) {
                            $steps["updateModalOpen"] = await $steps[
                              "updateModalOpen"
                            ];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tbYx5
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Submit"}
                            </span>
                          </React.Fragment>
                        </div>
                      </AntdButton>
                    </FormItemWrapper>
                  </FormItemWrapper>
                </FormItemWrapper>
                <FormItemWrapper
                  data-plasmic-name={"formField"}
                  data-plasmic-override={overrides.formField}
                  className={classNames("__wab_instance", sty.formField)}
                  label={"Country"}
                  name={"name"}
                >
                  <Select
                    data-plasmic-name={"select3"}
                    data-plasmic-override={overrides.select3}
                    className={classNames("__wab_instance", sty.select3)}
                    onChange={(...eventArgs) => {
                      p.generateStateOnChangeProp($state, ["select3", "value"])(
                        eventArgs[0]
                      );
                    }}
                    options={[
                      { value: "option1", label: "Option 1" },
                      { value: "option2", label: "Option 2" }
                    ]}
                    value={p.generateStateValueProp($state, [
                      "select3",
                      "value"
                    ])}
                  />
                </FormItemWrapper>
              </FormWrapper>
            );
          })()}
        </div>
      </div>
      <AntdModal
        data-plasmic-name={"modal"}
        data-plasmic-override={overrides.modal}
        className={classNames("__wab_instance", sty.modal)}
        defaultStylesClassName={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens
        )}
        hideFooter={true}
        modalScopeClassName={sty["modal__modal"]}
        onOpenChange={p.generateStateOnChangeProp($state, ["modal", "open"])}
        open={p.generateStateValueProp($state, ["modal", "open"])}
        title={
          <div className={classNames(projectcss.all, sty.freeBox__dp4FY)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vfAhg
              )}
            >
              {"Sucessfully Submitted!"}
            </div>
          </div>
        }
        trigger={
          <AntdButton
            className={classNames("__wab_instance", sty.button__hwC4R)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yueeO
              )}
            >
              {"Show modal"}
            </div>
          </AntdButton>
        }
      >
        <div className={classNames(projectcss.all, sty.freeBox__rIj1H)}>
          <div
            data-plasmic-name={"icon"}
            data-plasmic-override={overrides.icon}
            className={classNames(projectcss.all, sty.icon)}
          >
            <p.PlasmicImg
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"28px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"28px"}
              loading={"lazy"}
              src={{
                src: checkOneOLn2Q3HdIiHd,
                fullWidth: 28,
                fullHeight: 28,
                aspectRatio: 1
              }}
            />
          </div>
          <div
            data-plasmic-name={"thanks"}
            data-plasmic-override={overrides.thanks}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.thanks
            )}
          >
            {"Thank you for answering the questions!"}
          </div>
        </div>
        <Button
          className={classNames("__wab_instance", sty.button___8Ovz5)}
          onClick={async event => {
            const $steps = {};
            $steps["goToHome"] = true
              ? (() => {
                  const actionArgs = { destination: `/` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      location.assign(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToHome"] != null &&
              typeof $steps["goToHome"] === "object" &&
              typeof $steps["goToHome"].then === "function"
            ) {
              $steps["goToHome"] = await $steps["goToHome"];
            }
          }}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__o73JR
            )}
          >
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700 }}
              >
                {"Return to Home"}
              </span>
            </React.Fragment>
          </div>
        </Button>
      </AntdModal>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "fullForm",
    "postalCodeField",
    "numberInput",
    "howOften",
    "select2",
    "bridgeUse",
    "select4",
    "commute",
    "select5",
    "activities",
    "select6",
    "formField",
    "select3",
    "modal",
    "icon",
    "img",
    "thanks"
  ],

  fullForm: [
    "fullForm",
    "postalCodeField",
    "numberInput",
    "howOften",
    "select2",
    "bridgeUse",
    "select4",
    "commute",
    "select5",
    "activities",
    "select6",
    "formField",
    "select3"
  ],

  postalCodeField: [
    "postalCodeField",
    "numberInput",
    "howOften",
    "select2",
    "bridgeUse",
    "select4",
    "commute",
    "select5",
    "activities",
    "select6"
  ],

  numberInput: ["numberInput"],
  howOften: [
    "howOften",
    "select2",
    "bridgeUse",
    "select4",
    "commute",
    "select5",
    "activities",
    "select6"
  ],

  select2: ["select2"],
  bridgeUse: ["bridgeUse", "select4"],
  select4: ["select4"],
  commute: ["commute", "select5"],
  select5: ["select5"],
  activities: ["activities", "select6"],
  select6: ["select6"],
  formField: ["formField", "select3"],
  select3: ["select3"],
  modal: ["modal", "icon", "img", "thanks"],
  icon: ["icon", "img"],
  img: ["img"],
  thanks: ["thanks"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicQuestions__ArgProps,
          internalVariantPropNames: PlasmicQuestions__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicQuestions__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicQuestions";
  } else {
    func.displayName = `PlasmicQuestions.${nodeName}`;
  }
  return func;
}

export const PlasmicQuestions = Object.assign(
  // Top-level PlasmicQuestions renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    fullForm: makeNodeComponent("fullForm"),
    postalCodeField: makeNodeComponent("postalCodeField"),
    numberInput: makeNodeComponent("numberInput"),
    howOften: makeNodeComponent("howOften"),
    select2: makeNodeComponent("select2"),
    bridgeUse: makeNodeComponent("bridgeUse"),
    select4: makeNodeComponent("select4"),
    commute: makeNodeComponent("commute"),
    select5: makeNodeComponent("select5"),
    activities: makeNodeComponent("activities"),
    select6: makeNodeComponent("select6"),
    formField: makeNodeComponent("formField"),
    select3: makeNodeComponent("select3"),
    modal: makeNodeComponent("modal"),
    icon: makeNodeComponent("icon"),
    img: makeNodeComponent("img"),
    thanks: makeNodeComponent("thanks"),
    // Metadata about props expected for PlasmicQuestions
    internalVariantProps: PlasmicQuestions__VariantProps,
    internalArgProps: PlasmicQuestions__ArgProps
  }
);

export default PlasmicQuestions;
/* prettier-ignore-end */
