// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: adU29zJd9uLGW9TewABBsV
// Component: knzeMrCzG77L
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_fusion_lab.module.css"; // plasmic-import: adU29zJd9uLGW9TewABBsV/projectcss
import sty from "./PlasmicIsLoggedIn.module.css"; // plasmic-import: knzeMrCzG77L/css

createPlasmicElementProxy;

export const PlasmicIsLoggedIn__VariantProps = new Array();

export const PlasmicIsLoggedIn__ArgProps = new Array();

const $$ = {};

function PlasmicIsLoggedIn__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"generalBox"}
        data-plasmic-override={overrides.generalBox}
        className={classNames(projectcss.all, sty.generalBox)}
      >
        <div
          data-plasmic-name={"generalGroup"}
          data-plasmic-override={overrides.generalGroup}
          className={classNames(projectcss.all, sty.generalGroup)}
        >
          <div
            data-plasmic-name={"generalBoxRectangle"}
            data-plasmic-override={overrides.generalBoxRectangle}
            className={classNames(projectcss.all, sty.generalBoxRectangle)}
          >
            <div
              data-plasmic-name={"boxElements"}
              data-plasmic-override={overrides.boxElements}
              className={classNames(projectcss.all, sty.boxElements)}
            >
              <div
                data-plasmic-name={"textGroup"}
                data-plasmic-override={overrides.textGroup}
                className={classNames(projectcss.all, sty.textGroup)}
              >
                <div
                  data-plasmic-name={"generalText"}
                  data-plasmic-override={overrides.generalText}
                  className={classNames(projectcss.all, sty.generalText)}
                >
                  <div
                    data-plasmic-name={"helpUsMore"}
                    data-plasmic-override={overrides.helpUsMore}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.helpUsMore
                    )}
                  >
                    {"Help us more "}
                  </div>
                  <div
                    data-plasmic-name={"byFillingInAVeryQuickQuestionnaire"}
                    data-plasmic-override={
                      overrides.byFillingInAVeryQuickQuestionnaire
                    }
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.byFillingInAVeryQuickQuestionnaire
                    )}
                  >
                    {"by filling in a very quick questionnaire "}
                  </div>
                </div>
                <div
                  data-plasmic-name={"boxAnswer"}
                  data-plasmic-override={overrides.boxAnswer}
                  className={classNames(projectcss.all, sty.boxAnswer)}
                >
                  <div
                    data-plasmic-name={"rectangle7"}
                    data-plasmic-override={overrides.rectangle7}
                    className={classNames(projectcss.all, sty.rectangle7)}
                  />

                  <div
                    data-plasmic-name={"answerTheQuestions"}
                    data-plasmic-override={overrides.answerTheQuestions}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.answerTheQuestions
                    )}
                  >
                    {"Answer the questions "}
                  </div>
                </div>
                <div
                  data-plasmic-name={"boxFeedback"}
                  data-plasmic-override={overrides.boxFeedback}
                  className={classNames(projectcss.all, sty.boxFeedback)}
                >
                  <div
                    data-plasmic-name={"rectangle6"}
                    data-plasmic-override={overrides.rectangle6}
                    className={classNames(projectcss.all, sty.rectangle6)}
                  />

                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {"Back to the feedback page"}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "generalBox",
    "generalGroup",
    "generalBoxRectangle",
    "boxElements",
    "textGroup",
    "generalText",
    "helpUsMore",
    "byFillingInAVeryQuickQuestionnaire",
    "boxAnswer",
    "rectangle7",
    "answerTheQuestions",
    "boxFeedback",
    "rectangle6",
    "text"
  ],

  generalBox: [
    "generalBox",
    "generalGroup",
    "generalBoxRectangle",
    "boxElements",
    "textGroup",
    "generalText",
    "helpUsMore",
    "byFillingInAVeryQuickQuestionnaire",
    "boxAnswer",
    "rectangle7",
    "answerTheQuestions",
    "boxFeedback",
    "rectangle6",
    "text"
  ],

  generalGroup: [
    "generalGroup",
    "generalBoxRectangle",
    "boxElements",
    "textGroup",
    "generalText",
    "helpUsMore",
    "byFillingInAVeryQuickQuestionnaire",
    "boxAnswer",
    "rectangle7",
    "answerTheQuestions",
    "boxFeedback",
    "rectangle6",
    "text"
  ],

  generalBoxRectangle: [
    "generalBoxRectangle",
    "boxElements",
    "textGroup",
    "generalText",
    "helpUsMore",
    "byFillingInAVeryQuickQuestionnaire",
    "boxAnswer",
    "rectangle7",
    "answerTheQuestions",
    "boxFeedback",
    "rectangle6",
    "text"
  ],

  boxElements: [
    "boxElements",
    "textGroup",
    "generalText",
    "helpUsMore",
    "byFillingInAVeryQuickQuestionnaire",
    "boxAnswer",
    "rectangle7",
    "answerTheQuestions",
    "boxFeedback",
    "rectangle6",
    "text"
  ],

  textGroup: [
    "textGroup",
    "generalText",
    "helpUsMore",
    "byFillingInAVeryQuickQuestionnaire",
    "boxAnswer",
    "rectangle7",
    "answerTheQuestions",
    "boxFeedback",
    "rectangle6",
    "text"
  ],

  generalText: [
    "generalText",
    "helpUsMore",
    "byFillingInAVeryQuickQuestionnaire"
  ],

  helpUsMore: ["helpUsMore"],
  byFillingInAVeryQuickQuestionnaire: ["byFillingInAVeryQuickQuestionnaire"],
  boxAnswer: ["boxAnswer", "rectangle7", "answerTheQuestions"],
  rectangle7: ["rectangle7"],
  answerTheQuestions: ["answerTheQuestions"],
  boxFeedback: ["boxFeedback", "rectangle6", "text"],
  rectangle6: ["rectangle6"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicIsLoggedIn__ArgProps,
          internalVariantPropNames: PlasmicIsLoggedIn__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicIsLoggedIn__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicIsLoggedIn";
  } else {
    func.displayName = `PlasmicIsLoggedIn.${nodeName}`;
  }
  return func;
}

export const PlasmicIsLoggedIn = Object.assign(
  // Top-level PlasmicIsLoggedIn renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    generalBox: makeNodeComponent("generalBox"),
    generalGroup: makeNodeComponent("generalGroup"),
    generalBoxRectangle: makeNodeComponent("generalBoxRectangle"),
    boxElements: makeNodeComponent("boxElements"),
    textGroup: makeNodeComponent("textGroup"),
    generalText: makeNodeComponent("generalText"),
    helpUsMore: makeNodeComponent("helpUsMore"),
    byFillingInAVeryQuickQuestionnaire: makeNodeComponent(
      "byFillingInAVeryQuickQuestionnaire"
    ),
    boxAnswer: makeNodeComponent("boxAnswer"),
    rectangle7: makeNodeComponent("rectangle7"),
    answerTheQuestions: makeNodeComponent("answerTheQuestions"),
    boxFeedback: makeNodeComponent("boxFeedback"),
    rectangle6: makeNodeComponent("rectangle6"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicIsLoggedIn
    internalVariantProps: PlasmicIsLoggedIn__VariantProps,
    internalArgProps: PlasmicIsLoggedIn__ArgProps
  }
);

export default PlasmicIsLoggedIn;
/* prettier-ignore-end */
